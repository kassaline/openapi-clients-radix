<?php
/**
 * PartListPostCommandTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Radix\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * PartListPostCommandTest Class Doc Comment
 *
 * @category    Class
 * @description PartListPostCommand
 * @package     OpenAPI\Client\Radix
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class PartListPostCommandTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "PartListPostCommand"
     */
    public function testPartListPostCommand()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "articleCode"
     */
    public function testPropertyArticleCode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "descriptionDe"
     */
    public function testPropertyDescriptionDe()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "descriptionIt"
     */
    public function testPropertyDescriptionIt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "calculatePricePerPartList"
     */
    public function testPropertyCalculatePricePerPartList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "explosionType"
     */
    public function testPropertyExplosionType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "usageType"
     */
    public function testPropertyUsageType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "explosionLevelType"
     */
    public function testPropertyExplosionLevelType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "productionOrdersType"
     */
    public function testPropertyProductionOrdersType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reservationType"
     */
    public function testPropertyReservationType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "executeExplosingForMacroTemplate"
     */
    public function testPropertyExecuteExplosingForMacroTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "quantity"
     */
    public function testPropertyQuantity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "unitOfMeasure"
     */
    public function testPropertyUnitOfMeasure()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "blocked"
     */
    public function testPropertyBlocked()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "inactive"
     */
    public function testPropertyInactive()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "details"
     */
    public function testPropertyDetails()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
