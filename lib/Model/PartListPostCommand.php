<?php
/**
 * PartListPostCommand
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Model;

use \ArrayAccess;
use \OpenAPI\Client\Radix\ObjectSerializer;

/**
 * PartListPostCommand Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PartListPostCommand implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PartListPostCommand';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'articleCode' => 'string',
        'descriptionDe' => 'string',
        'descriptionIt' => 'string',
        'calculatePricePerPartList' => 'bool',
        'explosionType' => '\OpenAPI\Client\Radix\Model\PartListExplosionType',
        'usageType' => '\OpenAPI\Client\Radix\Model\PartListUsageType',
        'explosionLevelType' => '\OpenAPI\Client\Radix\Model\PartListExplosionLevelType',
        'productionOrdersType' => '\OpenAPI\Client\Radix\Model\PartListProductionOrdersType',
        'reservationType' => '\OpenAPI\Client\Radix\Model\PartListReservationType',
        'executeExplosingForMacroTemplate' => 'bool',
        'quantity' => 'float',
        'unitOfMeasure' => 'string',
        'blocked' => '\DateTime',
        'inactive' => 'bool',
        'details' => '\OpenAPI\Client\Radix\Model\PartListDetail[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'articleCode' => null,
        'descriptionDe' => null,
        'descriptionIt' => null,
        'calculatePricePerPartList' => null,
        'explosionType' => null,
        'usageType' => null,
        'explosionLevelType' => null,
        'productionOrdersType' => null,
        'reservationType' => null,
        'executeExplosingForMacroTemplate' => null,
        'quantity' => 'double',
        'unitOfMeasure' => null,
        'blocked' => 'date-time',
        'inactive' => null,
        'details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'articleCode' => true,
        'descriptionDe' => true,
        'descriptionIt' => true,
        'calculatePricePerPartList' => true,
        'explosionType' => false,
        'usageType' => false,
        'explosionLevelType' => false,
        'productionOrdersType' => false,
        'reservationType' => false,
        'executeExplosingForMacroTemplate' => true,
        'quantity' => true,
        'unitOfMeasure' => true,
        'blocked' => true,
        'inactive' => true,
        'details' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'articleCode' => 'articleCode',
        'descriptionDe' => 'descriptionDe',
        'descriptionIt' => 'descriptionIt',
        'calculatePricePerPartList' => 'calculatePricePerPartList',
        'explosionType' => 'explosionType',
        'usageType' => 'usageType',
        'explosionLevelType' => 'explosionLevelType',
        'productionOrdersType' => 'productionOrdersType',
        'reservationType' => 'reservationType',
        'executeExplosingForMacroTemplate' => 'executeExplosingForMacroTemplate',
        'quantity' => 'quantity',
        'unitOfMeasure' => 'unitOfMeasure',
        'blocked' => 'blocked',
        'inactive' => 'inactive',
        'details' => 'details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'articleCode' => 'setArticleCode',
        'descriptionDe' => 'setDescriptionDe',
        'descriptionIt' => 'setDescriptionIt',
        'calculatePricePerPartList' => 'setCalculatePricePerPartList',
        'explosionType' => 'setExplosionType',
        'usageType' => 'setUsageType',
        'explosionLevelType' => 'setExplosionLevelType',
        'productionOrdersType' => 'setProductionOrdersType',
        'reservationType' => 'setReservationType',
        'executeExplosingForMacroTemplate' => 'setExecuteExplosingForMacroTemplate',
        'quantity' => 'setQuantity',
        'unitOfMeasure' => 'setUnitOfMeasure',
        'blocked' => 'setBlocked',
        'inactive' => 'setInactive',
        'details' => 'setDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'articleCode' => 'getArticleCode',
        'descriptionDe' => 'getDescriptionDe',
        'descriptionIt' => 'getDescriptionIt',
        'calculatePricePerPartList' => 'getCalculatePricePerPartList',
        'explosionType' => 'getExplosionType',
        'usageType' => 'getUsageType',
        'explosionLevelType' => 'getExplosionLevelType',
        'productionOrdersType' => 'getProductionOrdersType',
        'reservationType' => 'getReservationType',
        'executeExplosingForMacroTemplate' => 'getExecuteExplosingForMacroTemplate',
        'quantity' => 'getQuantity',
        'unitOfMeasure' => 'getUnitOfMeasure',
        'blocked' => 'getBlocked',
        'inactive' => 'getInactive',
        'details' => 'getDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('articleCode', $data ?? [], null);
        $this->setIfExists('descriptionDe', $data ?? [], null);
        $this->setIfExists('descriptionIt', $data ?? [], null);
        $this->setIfExists('calculatePricePerPartList', $data ?? [], null);
        $this->setIfExists('explosionType', $data ?? [], null);
        $this->setIfExists('usageType', $data ?? [], null);
        $this->setIfExists('explosionLevelType', $data ?? [], null);
        $this->setIfExists('productionOrdersType', $data ?? [], null);
        $this->setIfExists('reservationType', $data ?? [], null);
        $this->setIfExists('executeExplosingForMacroTemplate', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('unitOfMeasure', $data ?? [], null);
        $this->setIfExists('blocked', $data ?? [], null);
        $this->setIfExists('inactive', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets articleCode
     *
     * @return string|null
     */
    public function getArticleCode()
    {
        return $this->container['articleCode'];
    }

    /**
     * Sets articleCode
     *
     * @param string|null $articleCode articleCode
     *
     * @return self
     */
    public function setArticleCode($articleCode)
    {
        if (is_null($articleCode)) {
            array_push($this->openAPINullablesSetToNull, 'articleCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('articleCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['articleCode'] = $articleCode;

        return $this;
    }

    /**
     * Gets descriptionDe
     *
     * @return string|null
     */
    public function getDescriptionDe()
    {
        return $this->container['descriptionDe'];
    }

    /**
     * Sets descriptionDe
     *
     * @param string|null $descriptionDe descriptionDe
     *
     * @return self
     */
    public function setDescriptionDe($descriptionDe)
    {
        if (is_null($descriptionDe)) {
            array_push($this->openAPINullablesSetToNull, 'descriptionDe');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descriptionDe', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descriptionDe'] = $descriptionDe;

        return $this;
    }

    /**
     * Gets descriptionIt
     *
     * @return string|null
     */
    public function getDescriptionIt()
    {
        return $this->container['descriptionIt'];
    }

    /**
     * Sets descriptionIt
     *
     * @param string|null $descriptionIt descriptionIt
     *
     * @return self
     */
    public function setDescriptionIt($descriptionIt)
    {
        if (is_null($descriptionIt)) {
            array_push($this->openAPINullablesSetToNull, 'descriptionIt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descriptionIt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descriptionIt'] = $descriptionIt;

        return $this;
    }

    /**
     * Gets calculatePricePerPartList
     *
     * @return bool|null
     */
    public function getCalculatePricePerPartList()
    {
        return $this->container['calculatePricePerPartList'];
    }

    /**
     * Sets calculatePricePerPartList
     *
     * @param bool|null $calculatePricePerPartList calculatePricePerPartList
     *
     * @return self
     */
    public function setCalculatePricePerPartList($calculatePricePerPartList)
    {
        if (is_null($calculatePricePerPartList)) {
            array_push($this->openAPINullablesSetToNull, 'calculatePricePerPartList');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('calculatePricePerPartList', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['calculatePricePerPartList'] = $calculatePricePerPartList;

        return $this;
    }

    /**
     * Gets explosionType
     *
     * @return \OpenAPI\Client\Radix\Model\PartListExplosionType|null
     */
    public function getExplosionType()
    {
        return $this->container['explosionType'];
    }

    /**
     * Sets explosionType
     *
     * @param \OpenAPI\Client\Radix\Model\PartListExplosionType|null $explosionType explosionType
     *
     * @return self
     */
    public function setExplosionType($explosionType)
    {
        if (is_null($explosionType)) {
            throw new \InvalidArgumentException('non-nullable explosionType cannot be null');
        }
        $this->container['explosionType'] = $explosionType;

        return $this;
    }

    /**
     * Gets usageType
     *
     * @return \OpenAPI\Client\Radix\Model\PartListUsageType|null
     */
    public function getUsageType()
    {
        return $this->container['usageType'];
    }

    /**
     * Sets usageType
     *
     * @param \OpenAPI\Client\Radix\Model\PartListUsageType|null $usageType usageType
     *
     * @return self
     */
    public function setUsageType($usageType)
    {
        if (is_null($usageType)) {
            throw new \InvalidArgumentException('non-nullable usageType cannot be null');
        }
        $this->container['usageType'] = $usageType;

        return $this;
    }

    /**
     * Gets explosionLevelType
     *
     * @return \OpenAPI\Client\Radix\Model\PartListExplosionLevelType|null
     */
    public function getExplosionLevelType()
    {
        return $this->container['explosionLevelType'];
    }

    /**
     * Sets explosionLevelType
     *
     * @param \OpenAPI\Client\Radix\Model\PartListExplosionLevelType|null $explosionLevelType explosionLevelType
     *
     * @return self
     */
    public function setExplosionLevelType($explosionLevelType)
    {
        if (is_null($explosionLevelType)) {
            throw new \InvalidArgumentException('non-nullable explosionLevelType cannot be null');
        }
        $this->container['explosionLevelType'] = $explosionLevelType;

        return $this;
    }

    /**
     * Gets productionOrdersType
     *
     * @return \OpenAPI\Client\Radix\Model\PartListProductionOrdersType|null
     */
    public function getProductionOrdersType()
    {
        return $this->container['productionOrdersType'];
    }

    /**
     * Sets productionOrdersType
     *
     * @param \OpenAPI\Client\Radix\Model\PartListProductionOrdersType|null $productionOrdersType productionOrdersType
     *
     * @return self
     */
    public function setProductionOrdersType($productionOrdersType)
    {
        if (is_null($productionOrdersType)) {
            throw new \InvalidArgumentException('non-nullable productionOrdersType cannot be null');
        }
        $this->container['productionOrdersType'] = $productionOrdersType;

        return $this;
    }

    /**
     * Gets reservationType
     *
     * @return \OpenAPI\Client\Radix\Model\PartListReservationType|null
     */
    public function getReservationType()
    {
        return $this->container['reservationType'];
    }

    /**
     * Sets reservationType
     *
     * @param \OpenAPI\Client\Radix\Model\PartListReservationType|null $reservationType reservationType
     *
     * @return self
     */
    public function setReservationType($reservationType)
    {
        if (is_null($reservationType)) {
            throw new \InvalidArgumentException('non-nullable reservationType cannot be null');
        }
        $this->container['reservationType'] = $reservationType;

        return $this;
    }

    /**
     * Gets executeExplosingForMacroTemplate
     *
     * @return bool|null
     */
    public function getExecuteExplosingForMacroTemplate()
    {
        return $this->container['executeExplosingForMacroTemplate'];
    }

    /**
     * Sets executeExplosingForMacroTemplate
     *
     * @param bool|null $executeExplosingForMacroTemplate executeExplosingForMacroTemplate
     *
     * @return self
     */
    public function setExecuteExplosingForMacroTemplate($executeExplosingForMacroTemplate)
    {
        if (is_null($executeExplosingForMacroTemplate)) {
            array_push($this->openAPINullablesSetToNull, 'executeExplosingForMacroTemplate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('executeExplosingForMacroTemplate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['executeExplosingForMacroTemplate'] = $executeExplosingForMacroTemplate;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            array_push($this->openAPINullablesSetToNull, 'quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unitOfMeasure
     *
     * @return string|null
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unitOfMeasure'];
    }

    /**
     * Sets unitOfMeasure
     *
     * @param string|null $unitOfMeasure unitOfMeasure
     *
     * @return self
     */
    public function setUnitOfMeasure($unitOfMeasure)
    {
        if (is_null($unitOfMeasure)) {
            array_push($this->openAPINullablesSetToNull, 'unitOfMeasure');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unitOfMeasure', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unitOfMeasure'] = $unitOfMeasure;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return \DateTime|null
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param \DateTime|null $blocked blocked
     *
     * @return self
     */
    public function setBlocked($blocked)
    {
        if (is_null($blocked)) {
            array_push($this->openAPINullablesSetToNull, 'blocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool|null
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool|null $inactive inactive
     *
     * @return self
     */
    public function setInactive($inactive)
    {
        if (is_null($inactive)) {
            array_push($this->openAPINullablesSetToNull, 'inactive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inactive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \OpenAPI\Client\Radix\Model\PartListDetail[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \OpenAPI\Client\Radix\Model\PartListDetail[]|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            array_push($this->openAPINullablesSetToNull, 'details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['details'] = $details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


