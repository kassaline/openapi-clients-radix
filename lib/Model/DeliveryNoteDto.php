<?php
/**
 * DeliveryNoteDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Model;

use \ArrayAccess;
use \OpenAPI\Client\Radix\ObjectSerializer;

/**
 * DeliveryNoteDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeliveryNoteDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeliveryNoteDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'documentId' => 'string',
        'number' => 'string',
        'documentDate' => '\DateTime',
        'customer' => '\OpenAPI\Client\Radix\Model\DeliveryNoteCustomerDto',
        'invoiceCustomer' => '\OpenAPI\Client\Radix\Model\DeliveryNoteCustomerDto',
        'shippingAddress' => '\OpenAPI\Client\Radix\Model\DeliveryNoteShippingAddressDto',
        'contact' => '\OpenAPI\Client\Radix\Model\IdCodeDescription',
        'agent' => '\OpenAPI\Client\Radix\Model\IdCodeDescription',
        'agent2' => '\OpenAPI\Client\Radix\Model\IdCodeDescription',
        'currency' => '\OpenAPI\Client\Radix\Model\IdCodeDescription',
        'documentState' => '\OpenAPI\Client\Radix\Model\DocumentstateDto',
        'paymentType' => '\OpenAPI\Client\Radix\Model\IdCodeDescription',
        'paymentFromDate' => '\DateTime',
        'employee' => '\OpenAPI\Client\Radix\Model\IdCodeDescription',
        'comment' => 'string',
        'cig' => 'string',
        'cup' => 'string',
        'deliveryExpenses' => 'float',
        'packagingExpenses' => 'float',
        'bankCharges' => 'float',
        'totalInvoiceDiscount' => 'float',
        'project' => '\OpenAPI\Client\Radix\Model\IdCode',
        'rup' => 'string',
        'dec' => 'string',
        'includingVat' => 'bool',
        'invoiceTemplate' => '\OpenAPI\Client\Radix\Model\IdCode',
        'shipmentMethod' => '\OpenAPI\Client\Radix\Model\IdCode',
        'shipmentMedium' => '\OpenAPI\Client\Radix\Model\IdCode',
        'freighter' => '\OpenAPI\Client\Radix\Model\IdCode',
        'transportReason' => '\OpenAPI\Client\Radix\Model\IdCode',
        'packagingType' => 'string',
        'amount' => 'float',
        'amountVat' => 'float',
        'amountIncludingVat' => 'float',
        'language' => 'string',
        'numberPackages' => 'int',
        'weight' => 'float',
        'weightUnit' => 'int',
        'volume' => 'float',
        'volumeUnit' => 'int',
        'conversionRate' => 'float',
        'deposit' => '\OpenAPI\Client\Radix\Model\IdCode',
        'absoluteInvoiceDiscount' => 'float',
        'documentGroup' => '\OpenAPI\Client\Radix\Model\IdCode',
        'priceKey' => '\OpenAPI\Client\Radix\Model\IdCode',
        'deliveryCondition' => '\OpenAPI\Client\Radix\Model\IdCode',
        'deliveryCondition2' => '\OpenAPI\Client\Radix\Model\IdCode',
        'deliveryConditionAmount' => 'float',
        'deliveryConditionAmount2' => 'float',
        'invoiceEuType' => '\OpenAPI\Client\Radix\Model\InvoiceEUType',
        'payment' => 'float',
        'taxes' => '\OpenAPI\Client\Radix\Model\TaxSalesDto[]',
        'movements' => '\OpenAPI\Client\Radix\Model\DeliveryNoteMovementDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'documentId' => null,
        'number' => null,
        'documentDate' => 'date-time',
        'customer' => null,
        'invoiceCustomer' => null,
        'shippingAddress' => null,
        'contact' => null,
        'agent' => null,
        'agent2' => null,
        'currency' => null,
        'documentState' => null,
        'paymentType' => null,
        'paymentFromDate' => 'date-time',
        'employee' => null,
        'comment' => null,
        'cig' => null,
        'cup' => null,
        'deliveryExpenses' => 'double',
        'packagingExpenses' => 'double',
        'bankCharges' => 'double',
        'totalInvoiceDiscount' => 'double',
        'project' => null,
        'rup' => null,
        'dec' => null,
        'includingVat' => null,
        'invoiceTemplate' => null,
        'shipmentMethod' => null,
        'shipmentMedium' => null,
        'freighter' => null,
        'transportReason' => null,
        'packagingType' => null,
        'amount' => 'double',
        'amountVat' => 'double',
        'amountIncludingVat' => 'double',
        'language' => null,
        'numberPackages' => 'int32',
        'weight' => 'double',
        'weightUnit' => 'int32',
        'volume' => 'double',
        'volumeUnit' => 'int32',
        'conversionRate' => 'double',
        'deposit' => null,
        'absoluteInvoiceDiscount' => 'double',
        'documentGroup' => null,
        'priceKey' => null,
        'deliveryCondition' => null,
        'deliveryCondition2' => null,
        'deliveryConditionAmount' => 'double',
        'deliveryConditionAmount2' => 'double',
        'invoiceEuType' => null,
        'payment' => 'double',
        'taxes' => null,
        'movements' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'documentId' => true,
        'number' => true,
        'documentDate' => true,
        'customer' => false,
        'invoiceCustomer' => false,
        'shippingAddress' => false,
        'contact' => false,
        'agent' => false,
        'agent2' => false,
        'currency' => false,
        'documentState' => false,
        'paymentType' => false,
        'paymentFromDate' => true,
        'employee' => false,
        'comment' => true,
        'cig' => true,
        'cup' => true,
        'deliveryExpenses' => false,
        'packagingExpenses' => false,
        'bankCharges' => false,
        'totalInvoiceDiscount' => false,
        'project' => false,
        'rup' => true,
        'dec' => true,
        'includingVat' => true,
        'invoiceTemplate' => false,
        'shipmentMethod' => false,
        'shipmentMedium' => false,
        'freighter' => false,
        'transportReason' => false,
        'packagingType' => true,
        'amount' => false,
        'amountVat' => false,
        'amountIncludingVat' => false,
        'language' => true,
        'numberPackages' => false,
        'weight' => false,
        'weightUnit' => false,
        'volume' => false,
        'volumeUnit' => false,
        'conversionRate' => false,
        'deposit' => false,
        'absoluteInvoiceDiscount' => true,
        'documentGroup' => false,
        'priceKey' => false,
        'deliveryCondition' => false,
        'deliveryCondition2' => false,
        'deliveryConditionAmount' => true,
        'deliveryConditionAmount2' => true,
        'invoiceEuType' => false,
        'payment' => true,
        'taxes' => true,
        'movements' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'documentId' => 'documentId',
        'number' => 'number',
        'documentDate' => 'documentDate',
        'customer' => 'customer',
        'invoiceCustomer' => 'invoiceCustomer',
        'shippingAddress' => 'shippingAddress',
        'contact' => 'contact',
        'agent' => 'agent',
        'agent2' => 'agent2',
        'currency' => 'currency',
        'documentState' => 'documentState',
        'paymentType' => 'paymentType',
        'paymentFromDate' => 'paymentFromDate',
        'employee' => 'employee',
        'comment' => 'comment',
        'cig' => 'cig',
        'cup' => 'cup',
        'deliveryExpenses' => 'deliveryExpenses',
        'packagingExpenses' => 'packagingExpenses',
        'bankCharges' => 'bankCharges',
        'totalInvoiceDiscount' => 'totalInvoiceDiscount',
        'project' => 'project',
        'rup' => 'rup',
        'dec' => 'dec',
        'includingVat' => 'includingVat',
        'invoiceTemplate' => 'invoiceTemplate',
        'shipmentMethod' => 'shipmentMethod',
        'shipmentMedium' => 'shipmentMedium',
        'freighter' => 'freighter',
        'transportReason' => 'transportReason',
        'packagingType' => 'packagingType',
        'amount' => 'amount',
        'amountVat' => 'amountVat',
        'amountIncludingVat' => 'amountIncludingVat',
        'language' => 'language',
        'numberPackages' => 'numberPackages',
        'weight' => 'weight',
        'weightUnit' => 'weightUnit',
        'volume' => 'volume',
        'volumeUnit' => 'volumeUnit',
        'conversionRate' => 'conversionRate',
        'deposit' => 'deposit',
        'absoluteInvoiceDiscount' => 'absoluteInvoiceDiscount',
        'documentGroup' => 'documentGroup',
        'priceKey' => 'priceKey',
        'deliveryCondition' => 'deliveryCondition',
        'deliveryCondition2' => 'deliveryCondition2',
        'deliveryConditionAmount' => 'deliveryConditionAmount',
        'deliveryConditionAmount2' => 'deliveryConditionAmount2',
        'invoiceEuType' => 'invoiceEuType',
        'payment' => 'payment',
        'taxes' => 'taxes',
        'movements' => 'movements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'documentId' => 'setDocumentId',
        'number' => 'setNumber',
        'documentDate' => 'setDocumentDate',
        'customer' => 'setCustomer',
        'invoiceCustomer' => 'setInvoiceCustomer',
        'shippingAddress' => 'setShippingAddress',
        'contact' => 'setContact',
        'agent' => 'setAgent',
        'agent2' => 'setAgent2',
        'currency' => 'setCurrency',
        'documentState' => 'setDocumentState',
        'paymentType' => 'setPaymentType',
        'paymentFromDate' => 'setPaymentFromDate',
        'employee' => 'setEmployee',
        'comment' => 'setComment',
        'cig' => 'setCig',
        'cup' => 'setCup',
        'deliveryExpenses' => 'setDeliveryExpenses',
        'packagingExpenses' => 'setPackagingExpenses',
        'bankCharges' => 'setBankCharges',
        'totalInvoiceDiscount' => 'setTotalInvoiceDiscount',
        'project' => 'setProject',
        'rup' => 'setRup',
        'dec' => 'setDec',
        'includingVat' => 'setIncludingVat',
        'invoiceTemplate' => 'setInvoiceTemplate',
        'shipmentMethod' => 'setShipmentMethod',
        'shipmentMedium' => 'setShipmentMedium',
        'freighter' => 'setFreighter',
        'transportReason' => 'setTransportReason',
        'packagingType' => 'setPackagingType',
        'amount' => 'setAmount',
        'amountVat' => 'setAmountVat',
        'amountIncludingVat' => 'setAmountIncludingVat',
        'language' => 'setLanguage',
        'numberPackages' => 'setNumberPackages',
        'weight' => 'setWeight',
        'weightUnit' => 'setWeightUnit',
        'volume' => 'setVolume',
        'volumeUnit' => 'setVolumeUnit',
        'conversionRate' => 'setConversionRate',
        'deposit' => 'setDeposit',
        'absoluteInvoiceDiscount' => 'setAbsoluteInvoiceDiscount',
        'documentGroup' => 'setDocumentGroup',
        'priceKey' => 'setPriceKey',
        'deliveryCondition' => 'setDeliveryCondition',
        'deliveryCondition2' => 'setDeliveryCondition2',
        'deliveryConditionAmount' => 'setDeliveryConditionAmount',
        'deliveryConditionAmount2' => 'setDeliveryConditionAmount2',
        'invoiceEuType' => 'setInvoiceEuType',
        'payment' => 'setPayment',
        'taxes' => 'setTaxes',
        'movements' => 'setMovements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'documentId' => 'getDocumentId',
        'number' => 'getNumber',
        'documentDate' => 'getDocumentDate',
        'customer' => 'getCustomer',
        'invoiceCustomer' => 'getInvoiceCustomer',
        'shippingAddress' => 'getShippingAddress',
        'contact' => 'getContact',
        'agent' => 'getAgent',
        'agent2' => 'getAgent2',
        'currency' => 'getCurrency',
        'documentState' => 'getDocumentState',
        'paymentType' => 'getPaymentType',
        'paymentFromDate' => 'getPaymentFromDate',
        'employee' => 'getEmployee',
        'comment' => 'getComment',
        'cig' => 'getCig',
        'cup' => 'getCup',
        'deliveryExpenses' => 'getDeliveryExpenses',
        'packagingExpenses' => 'getPackagingExpenses',
        'bankCharges' => 'getBankCharges',
        'totalInvoiceDiscount' => 'getTotalInvoiceDiscount',
        'project' => 'getProject',
        'rup' => 'getRup',
        'dec' => 'getDec',
        'includingVat' => 'getIncludingVat',
        'invoiceTemplate' => 'getInvoiceTemplate',
        'shipmentMethod' => 'getShipmentMethod',
        'shipmentMedium' => 'getShipmentMedium',
        'freighter' => 'getFreighter',
        'transportReason' => 'getTransportReason',
        'packagingType' => 'getPackagingType',
        'amount' => 'getAmount',
        'amountVat' => 'getAmountVat',
        'amountIncludingVat' => 'getAmountIncludingVat',
        'language' => 'getLanguage',
        'numberPackages' => 'getNumberPackages',
        'weight' => 'getWeight',
        'weightUnit' => 'getWeightUnit',
        'volume' => 'getVolume',
        'volumeUnit' => 'getVolumeUnit',
        'conversionRate' => 'getConversionRate',
        'deposit' => 'getDeposit',
        'absoluteInvoiceDiscount' => 'getAbsoluteInvoiceDiscount',
        'documentGroup' => 'getDocumentGroup',
        'priceKey' => 'getPriceKey',
        'deliveryCondition' => 'getDeliveryCondition',
        'deliveryCondition2' => 'getDeliveryCondition2',
        'deliveryConditionAmount' => 'getDeliveryConditionAmount',
        'deliveryConditionAmount2' => 'getDeliveryConditionAmount2',
        'invoiceEuType' => 'getInvoiceEuType',
        'payment' => 'getPayment',
        'taxes' => 'getTaxes',
        'movements' => 'getMovements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('documentId', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('documentDate', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('invoiceCustomer', $data ?? [], null);
        $this->setIfExists('shippingAddress', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('agent', $data ?? [], null);
        $this->setIfExists('agent2', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('documentState', $data ?? [], null);
        $this->setIfExists('paymentType', $data ?? [], null);
        $this->setIfExists('paymentFromDate', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('cig', $data ?? [], null);
        $this->setIfExists('cup', $data ?? [], null);
        $this->setIfExists('deliveryExpenses', $data ?? [], null);
        $this->setIfExists('packagingExpenses', $data ?? [], null);
        $this->setIfExists('bankCharges', $data ?? [], null);
        $this->setIfExists('totalInvoiceDiscount', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('rup', $data ?? [], null);
        $this->setIfExists('dec', $data ?? [], null);
        $this->setIfExists('includingVat', $data ?? [], null);
        $this->setIfExists('invoiceTemplate', $data ?? [], null);
        $this->setIfExists('shipmentMethod', $data ?? [], null);
        $this->setIfExists('shipmentMedium', $data ?? [], null);
        $this->setIfExists('freighter', $data ?? [], null);
        $this->setIfExists('transportReason', $data ?? [], null);
        $this->setIfExists('packagingType', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amountVat', $data ?? [], null);
        $this->setIfExists('amountIncludingVat', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('numberPackages', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weightUnit', $data ?? [], null);
        $this->setIfExists('volume', $data ?? [], null);
        $this->setIfExists('volumeUnit', $data ?? [], null);
        $this->setIfExists('conversionRate', $data ?? [], null);
        $this->setIfExists('deposit', $data ?? [], null);
        $this->setIfExists('absoluteInvoiceDiscount', $data ?? [], null);
        $this->setIfExists('documentGroup', $data ?? [], null);
        $this->setIfExists('priceKey', $data ?? [], null);
        $this->setIfExists('deliveryCondition', $data ?? [], null);
        $this->setIfExists('deliveryCondition2', $data ?? [], null);
        $this->setIfExists('deliveryConditionAmount', $data ?? [], null);
        $this->setIfExists('deliveryConditionAmount2', $data ?? [], null);
        $this->setIfExists('invoiceEuType', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('movements', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets documentId
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['documentId'];
    }

    /**
     * Sets documentId
     *
     * @param string|null $documentId documentId
     *
     * @return self
     */
    public function setDocumentId($documentId)
    {
        if (is_null($documentId)) {
            array_push($this->openAPINullablesSetToNull, 'documentId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('documentId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['documentId'] = $documentId;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets documentDate
     *
     * @return \DateTime|null
     */
    public function getDocumentDate()
    {
        return $this->container['documentDate'];
    }

    /**
     * Sets documentDate
     *
     * @param \DateTime|null $documentDate documentDate
     *
     * @return self
     */
    public function setDocumentDate($documentDate)
    {
        if (is_null($documentDate)) {
            array_push($this->openAPINullablesSetToNull, 'documentDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('documentDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['documentDate'] = $documentDate;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \OpenAPI\Client\Radix\Model\DeliveryNoteCustomerDto|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \OpenAPI\Client\Radix\Model\DeliveryNoteCustomerDto|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets invoiceCustomer
     *
     * @return \OpenAPI\Client\Radix\Model\DeliveryNoteCustomerDto|null
     */
    public function getInvoiceCustomer()
    {
        return $this->container['invoiceCustomer'];
    }

    /**
     * Sets invoiceCustomer
     *
     * @param \OpenAPI\Client\Radix\Model\DeliveryNoteCustomerDto|null $invoiceCustomer invoiceCustomer
     *
     * @return self
     */
    public function setInvoiceCustomer($invoiceCustomer)
    {
        if (is_null($invoiceCustomer)) {
            throw new \InvalidArgumentException('non-nullable invoiceCustomer cannot be null');
        }
        $this->container['invoiceCustomer'] = $invoiceCustomer;

        return $this;
    }

    /**
     * Gets shippingAddress
     *
     * @return \OpenAPI\Client\Radix\Model\DeliveryNoteShippingAddressDto|null
     */
    public function getShippingAddress()
    {
        return $this->container['shippingAddress'];
    }

    /**
     * Sets shippingAddress
     *
     * @param \OpenAPI\Client\Radix\Model\DeliveryNoteShippingAddressDto|null $shippingAddress shippingAddress
     *
     * @return self
     */
    public function setShippingAddress($shippingAddress)
    {
        if (is_null($shippingAddress)) {
            throw new \InvalidArgumentException('non-nullable shippingAddress cannot be null');
        }
        $this->container['shippingAddress'] = $shippingAddress;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \OpenAPI\Client\Radix\Model\IdCodeDescription|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \OpenAPI\Client\Radix\Model\IdCodeDescription|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \OpenAPI\Client\Radix\Model\IdCodeDescription|null
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \OpenAPI\Client\Radix\Model\IdCodeDescription|null $agent agent
     *
     * @return self
     */
    public function setAgent($agent)
    {
        if (is_null($agent)) {
            throw new \InvalidArgumentException('non-nullable agent cannot be null');
        }
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets agent2
     *
     * @return \OpenAPI\Client\Radix\Model\IdCodeDescription|null
     */
    public function getAgent2()
    {
        return $this->container['agent2'];
    }

    /**
     * Sets agent2
     *
     * @param \OpenAPI\Client\Radix\Model\IdCodeDescription|null $agent2 agent2
     *
     * @return self
     */
    public function setAgent2($agent2)
    {
        if (is_null($agent2)) {
            throw new \InvalidArgumentException('non-nullable agent2 cannot be null');
        }
        $this->container['agent2'] = $agent2;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Radix\Model\IdCodeDescription|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Radix\Model\IdCodeDescription|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets documentState
     *
     * @return \OpenAPI\Client\Radix\Model\DocumentstateDto|null
     */
    public function getDocumentState()
    {
        return $this->container['documentState'];
    }

    /**
     * Sets documentState
     *
     * @param \OpenAPI\Client\Radix\Model\DocumentstateDto|null $documentState documentState
     *
     * @return self
     */
    public function setDocumentState($documentState)
    {
        if (is_null($documentState)) {
            throw new \InvalidArgumentException('non-nullable documentState cannot be null');
        }
        $this->container['documentState'] = $documentState;

        return $this;
    }

    /**
     * Gets paymentType
     *
     * @return \OpenAPI\Client\Radix\Model\IdCodeDescription|null
     */
    public function getPaymentType()
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     *
     * @param \OpenAPI\Client\Radix\Model\IdCodeDescription|null $paymentType paymentType
     *
     * @return self
     */
    public function setPaymentType($paymentType)
    {
        if (is_null($paymentType)) {
            throw new \InvalidArgumentException('non-nullable paymentType cannot be null');
        }
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets paymentFromDate
     *
     * @return \DateTime|null
     */
    public function getPaymentFromDate()
    {
        return $this->container['paymentFromDate'];
    }

    /**
     * Sets paymentFromDate
     *
     * @param \DateTime|null $paymentFromDate paymentFromDate
     *
     * @return self
     */
    public function setPaymentFromDate($paymentFromDate)
    {
        if (is_null($paymentFromDate)) {
            array_push($this->openAPINullablesSetToNull, 'paymentFromDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentFromDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentFromDate'] = $paymentFromDate;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \OpenAPI\Client\Radix\Model\IdCodeDescription|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \OpenAPI\Client\Radix\Model\IdCodeDescription|null $employee employee
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        if (is_null($employee)) {
            throw new \InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets cig
     *
     * @return string|null
     */
    public function getCig()
    {
        return $this->container['cig'];
    }

    /**
     * Sets cig
     *
     * @param string|null $cig cig
     *
     * @return self
     */
    public function setCig($cig)
    {
        if (is_null($cig)) {
            array_push($this->openAPINullablesSetToNull, 'cig');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cig', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cig'] = $cig;

        return $this;
    }

    /**
     * Gets cup
     *
     * @return string|null
     */
    public function getCup()
    {
        return $this->container['cup'];
    }

    /**
     * Sets cup
     *
     * @param string|null $cup cup
     *
     * @return self
     */
    public function setCup($cup)
    {
        if (is_null($cup)) {
            array_push($this->openAPINullablesSetToNull, 'cup');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cup', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cup'] = $cup;

        return $this;
    }

    /**
     * Gets deliveryExpenses
     *
     * @return float|null
     */
    public function getDeliveryExpenses()
    {
        return $this->container['deliveryExpenses'];
    }

    /**
     * Sets deliveryExpenses
     *
     * @param float|null $deliveryExpenses deliveryExpenses
     *
     * @return self
     */
    public function setDeliveryExpenses($deliveryExpenses)
    {
        if (is_null($deliveryExpenses)) {
            throw new \InvalidArgumentException('non-nullable deliveryExpenses cannot be null');
        }
        $this->container['deliveryExpenses'] = $deliveryExpenses;

        return $this;
    }

    /**
     * Gets packagingExpenses
     *
     * @return float|null
     */
    public function getPackagingExpenses()
    {
        return $this->container['packagingExpenses'];
    }

    /**
     * Sets packagingExpenses
     *
     * @param float|null $packagingExpenses packagingExpenses
     *
     * @return self
     */
    public function setPackagingExpenses($packagingExpenses)
    {
        if (is_null($packagingExpenses)) {
            throw new \InvalidArgumentException('non-nullable packagingExpenses cannot be null');
        }
        $this->container['packagingExpenses'] = $packagingExpenses;

        return $this;
    }

    /**
     * Gets bankCharges
     *
     * @return float|null
     */
    public function getBankCharges()
    {
        return $this->container['bankCharges'];
    }

    /**
     * Sets bankCharges
     *
     * @param float|null $bankCharges bankCharges
     *
     * @return self
     */
    public function setBankCharges($bankCharges)
    {
        if (is_null($bankCharges)) {
            throw new \InvalidArgumentException('non-nullable bankCharges cannot be null');
        }
        $this->container['bankCharges'] = $bankCharges;

        return $this;
    }

    /**
     * Gets totalInvoiceDiscount
     *
     * @return float|null
     */
    public function getTotalInvoiceDiscount()
    {
        return $this->container['totalInvoiceDiscount'];
    }

    /**
     * Sets totalInvoiceDiscount
     *
     * @param float|null $totalInvoiceDiscount totalInvoiceDiscount
     *
     * @return self
     */
    public function setTotalInvoiceDiscount($totalInvoiceDiscount)
    {
        if (is_null($totalInvoiceDiscount)) {
            throw new \InvalidArgumentException('non-nullable totalInvoiceDiscount cannot be null');
        }
        $this->container['totalInvoiceDiscount'] = $totalInvoiceDiscount;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets rup
     *
     * @return string|null
     */
    public function getRup()
    {
        return $this->container['rup'];
    }

    /**
     * Sets rup
     *
     * @param string|null $rup rup
     *
     * @return self
     */
    public function setRup($rup)
    {
        if (is_null($rup)) {
            array_push($this->openAPINullablesSetToNull, 'rup');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rup', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rup'] = $rup;

        return $this;
    }

    /**
     * Gets dec
     *
     * @return string|null
     */
    public function getDec()
    {
        return $this->container['dec'];
    }

    /**
     * Sets dec
     *
     * @param string|null $dec dec
     *
     * @return self
     */
    public function setDec($dec)
    {
        if (is_null($dec)) {
            array_push($this->openAPINullablesSetToNull, 'dec');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dec', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dec'] = $dec;

        return $this;
    }

    /**
     * Gets includingVat
     *
     * @return bool|null
     */
    public function getIncludingVat()
    {
        return $this->container['includingVat'];
    }

    /**
     * Sets includingVat
     *
     * @param bool|null $includingVat includingVat
     *
     * @return self
     */
    public function setIncludingVat($includingVat)
    {
        if (is_null($includingVat)) {
            array_push($this->openAPINullablesSetToNull, 'includingVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('includingVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['includingVat'] = $includingVat;

        return $this;
    }

    /**
     * Gets invoiceTemplate
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getInvoiceTemplate()
    {
        return $this->container['invoiceTemplate'];
    }

    /**
     * Sets invoiceTemplate
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $invoiceTemplate invoiceTemplate
     *
     * @return self
     */
    public function setInvoiceTemplate($invoiceTemplate)
    {
        if (is_null($invoiceTemplate)) {
            throw new \InvalidArgumentException('non-nullable invoiceTemplate cannot be null');
        }
        $this->container['invoiceTemplate'] = $invoiceTemplate;

        return $this;
    }

    /**
     * Gets shipmentMethod
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getShipmentMethod()
    {
        return $this->container['shipmentMethod'];
    }

    /**
     * Sets shipmentMethod
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $shipmentMethod shipmentMethod
     *
     * @return self
     */
    public function setShipmentMethod($shipmentMethod)
    {
        if (is_null($shipmentMethod)) {
            throw new \InvalidArgumentException('non-nullable shipmentMethod cannot be null');
        }
        $this->container['shipmentMethod'] = $shipmentMethod;

        return $this;
    }

    /**
     * Gets shipmentMedium
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getShipmentMedium()
    {
        return $this->container['shipmentMedium'];
    }

    /**
     * Sets shipmentMedium
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $shipmentMedium shipmentMedium
     *
     * @return self
     */
    public function setShipmentMedium($shipmentMedium)
    {
        if (is_null($shipmentMedium)) {
            throw new \InvalidArgumentException('non-nullable shipmentMedium cannot be null');
        }
        $this->container['shipmentMedium'] = $shipmentMedium;

        return $this;
    }

    /**
     * Gets freighter
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getFreighter()
    {
        return $this->container['freighter'];
    }

    /**
     * Sets freighter
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $freighter freighter
     *
     * @return self
     */
    public function setFreighter($freighter)
    {
        if (is_null($freighter)) {
            throw new \InvalidArgumentException('non-nullable freighter cannot be null');
        }
        $this->container['freighter'] = $freighter;

        return $this;
    }

    /**
     * Gets transportReason
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getTransportReason()
    {
        return $this->container['transportReason'];
    }

    /**
     * Sets transportReason
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $transportReason transportReason
     *
     * @return self
     */
    public function setTransportReason($transportReason)
    {
        if (is_null($transportReason)) {
            throw new \InvalidArgumentException('non-nullable transportReason cannot be null');
        }
        $this->container['transportReason'] = $transportReason;

        return $this;
    }

    /**
     * Gets packagingType
     *
     * @return string|null
     */
    public function getPackagingType()
    {
        return $this->container['packagingType'];
    }

    /**
     * Sets packagingType
     *
     * @param string|null $packagingType packagingType
     *
     * @return self
     */
    public function setPackagingType($packagingType)
    {
        if (is_null($packagingType)) {
            array_push($this->openAPINullablesSetToNull, 'packagingType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packagingType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['packagingType'] = $packagingType;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amountVat
     *
     * @return float|null
     */
    public function getAmountVat()
    {
        return $this->container['amountVat'];
    }

    /**
     * Sets amountVat
     *
     * @param float|null $amountVat amountVat
     *
     * @return self
     */
    public function setAmountVat($amountVat)
    {
        if (is_null($amountVat)) {
            throw new \InvalidArgumentException('non-nullable amountVat cannot be null');
        }
        $this->container['amountVat'] = $amountVat;

        return $this;
    }

    /**
     * Gets amountIncludingVat
     *
     * @return float|null
     */
    public function getAmountIncludingVat()
    {
        return $this->container['amountIncludingVat'];
    }

    /**
     * Sets amountIncludingVat
     *
     * @param float|null $amountIncludingVat amountIncludingVat
     *
     * @return self
     */
    public function setAmountIncludingVat($amountIncludingVat)
    {
        if (is_null($amountIncludingVat)) {
            throw new \InvalidArgumentException('non-nullable amountIncludingVat cannot be null');
        }
        $this->container['amountIncludingVat'] = $amountIncludingVat;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets numberPackages
     *
     * @return int|null
     */
    public function getNumberPackages()
    {
        return $this->container['numberPackages'];
    }

    /**
     * Sets numberPackages
     *
     * @param int|null $numberPackages numberPackages
     *
     * @return self
     */
    public function setNumberPackages($numberPackages)
    {
        if (is_null($numberPackages)) {
            throw new \InvalidArgumentException('non-nullable numberPackages cannot be null');
        }
        $this->container['numberPackages'] = $numberPackages;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weightUnit
     *
     * @return int|null
     */
    public function getWeightUnit()
    {
        return $this->container['weightUnit'];
    }

    /**
     * Sets weightUnit
     *
     * @param int|null $weightUnit weightUnit
     *
     * @return self
     */
    public function setWeightUnit($weightUnit)
    {
        if (is_null($weightUnit)) {
            throw new \InvalidArgumentException('non-nullable weightUnit cannot be null');
        }
        $this->container['weightUnit'] = $weightUnit;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return float|null
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param float|null $volume volume
     *
     * @return self
     */
    public function setVolume($volume)
    {
        if (is_null($volume)) {
            throw new \InvalidArgumentException('non-nullable volume cannot be null');
        }
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets volumeUnit
     *
     * @return int|null
     */
    public function getVolumeUnit()
    {
        return $this->container['volumeUnit'];
    }

    /**
     * Sets volumeUnit
     *
     * @param int|null $volumeUnit volumeUnit
     *
     * @return self
     */
    public function setVolumeUnit($volumeUnit)
    {
        if (is_null($volumeUnit)) {
            throw new \InvalidArgumentException('non-nullable volumeUnit cannot be null');
        }
        $this->container['volumeUnit'] = $volumeUnit;

        return $this;
    }

    /**
     * Gets conversionRate
     *
     * @return float|null
     */
    public function getConversionRate()
    {
        return $this->container['conversionRate'];
    }

    /**
     * Sets conversionRate
     *
     * @param float|null $conversionRate conversionRate
     *
     * @return self
     */
    public function setConversionRate($conversionRate)
    {
        if (is_null($conversionRate)) {
            throw new \InvalidArgumentException('non-nullable conversionRate cannot be null');
        }
        $this->container['conversionRate'] = $conversionRate;

        return $this;
    }

    /**
     * Gets deposit
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getDeposit()
    {
        return $this->container['deposit'];
    }

    /**
     * Sets deposit
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $deposit deposit
     *
     * @return self
     */
    public function setDeposit($deposit)
    {
        if (is_null($deposit)) {
            throw new \InvalidArgumentException('non-nullable deposit cannot be null');
        }
        $this->container['deposit'] = $deposit;

        return $this;
    }

    /**
     * Gets absoluteInvoiceDiscount
     *
     * @return float|null
     */
    public function getAbsoluteInvoiceDiscount()
    {
        return $this->container['absoluteInvoiceDiscount'];
    }

    /**
     * Sets absoluteInvoiceDiscount
     *
     * @param float|null $absoluteInvoiceDiscount absoluteInvoiceDiscount
     *
     * @return self
     */
    public function setAbsoluteInvoiceDiscount($absoluteInvoiceDiscount)
    {
        if (is_null($absoluteInvoiceDiscount)) {
            array_push($this->openAPINullablesSetToNull, 'absoluteInvoiceDiscount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('absoluteInvoiceDiscount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['absoluteInvoiceDiscount'] = $absoluteInvoiceDiscount;

        return $this;
    }

    /**
     * Gets documentGroup
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getDocumentGroup()
    {
        return $this->container['documentGroup'];
    }

    /**
     * Sets documentGroup
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $documentGroup documentGroup
     *
     * @return self
     */
    public function setDocumentGroup($documentGroup)
    {
        if (is_null($documentGroup)) {
            throw new \InvalidArgumentException('non-nullable documentGroup cannot be null');
        }
        $this->container['documentGroup'] = $documentGroup;

        return $this;
    }

    /**
     * Gets priceKey
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getPriceKey()
    {
        return $this->container['priceKey'];
    }

    /**
     * Sets priceKey
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $priceKey priceKey
     *
     * @return self
     */
    public function setPriceKey($priceKey)
    {
        if (is_null($priceKey)) {
            throw new \InvalidArgumentException('non-nullable priceKey cannot be null');
        }
        $this->container['priceKey'] = $priceKey;

        return $this;
    }

    /**
     * Gets deliveryCondition
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getDeliveryCondition()
    {
        return $this->container['deliveryCondition'];
    }

    /**
     * Sets deliveryCondition
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $deliveryCondition deliveryCondition
     *
     * @return self
     */
    public function setDeliveryCondition($deliveryCondition)
    {
        if (is_null($deliveryCondition)) {
            throw new \InvalidArgumentException('non-nullable deliveryCondition cannot be null');
        }
        $this->container['deliveryCondition'] = $deliveryCondition;

        return $this;
    }

    /**
     * Gets deliveryCondition2
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getDeliveryCondition2()
    {
        return $this->container['deliveryCondition2'];
    }

    /**
     * Sets deliveryCondition2
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $deliveryCondition2 deliveryCondition2
     *
     * @return self
     */
    public function setDeliveryCondition2($deliveryCondition2)
    {
        if (is_null($deliveryCondition2)) {
            throw new \InvalidArgumentException('non-nullable deliveryCondition2 cannot be null');
        }
        $this->container['deliveryCondition2'] = $deliveryCondition2;

        return $this;
    }

    /**
     * Gets deliveryConditionAmount
     *
     * @return float|null
     */
    public function getDeliveryConditionAmount()
    {
        return $this->container['deliveryConditionAmount'];
    }

    /**
     * Sets deliveryConditionAmount
     *
     * @param float|null $deliveryConditionAmount deliveryConditionAmount
     *
     * @return self
     */
    public function setDeliveryConditionAmount($deliveryConditionAmount)
    {
        if (is_null($deliveryConditionAmount)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryConditionAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryConditionAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryConditionAmount'] = $deliveryConditionAmount;

        return $this;
    }

    /**
     * Gets deliveryConditionAmount2
     *
     * @return float|null
     */
    public function getDeliveryConditionAmount2()
    {
        return $this->container['deliveryConditionAmount2'];
    }

    /**
     * Sets deliveryConditionAmount2
     *
     * @param float|null $deliveryConditionAmount2 deliveryConditionAmount2
     *
     * @return self
     */
    public function setDeliveryConditionAmount2($deliveryConditionAmount2)
    {
        if (is_null($deliveryConditionAmount2)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryConditionAmount2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryConditionAmount2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryConditionAmount2'] = $deliveryConditionAmount2;

        return $this;
    }

    /**
     * Gets invoiceEuType
     *
     * @return \OpenAPI\Client\Radix\Model\InvoiceEUType|null
     */
    public function getInvoiceEuType()
    {
        return $this->container['invoiceEuType'];
    }

    /**
     * Sets invoiceEuType
     *
     * @param \OpenAPI\Client\Radix\Model\InvoiceEUType|null $invoiceEuType invoiceEuType
     *
     * @return self
     */
    public function setInvoiceEuType($invoiceEuType)
    {
        if (is_null($invoiceEuType)) {
            throw new \InvalidArgumentException('non-nullable invoiceEuType cannot be null');
        }
        $this->container['invoiceEuType'] = $invoiceEuType;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return float|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param float|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            array_push($this->openAPINullablesSetToNull, 'payment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \OpenAPI\Client\Radix\Model\TaxSalesDto[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \OpenAPI\Client\Radix\Model\TaxSalesDto[]|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            array_push($this->openAPINullablesSetToNull, 'taxes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets movements
     *
     * @return \OpenAPI\Client\Radix\Model\DeliveryNoteMovementDto[]|null
     */
    public function getMovements()
    {
        return $this->container['movements'];
    }

    /**
     * Sets movements
     *
     * @param \OpenAPI\Client\Radix\Model\DeliveryNoteMovementDto[]|null $movements movements
     *
     * @return self
     */
    public function setMovements($movements)
    {
        if (is_null($movements)) {
            array_push($this->openAPINullablesSetToNull, 'movements');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('movements', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['movements'] = $movements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


