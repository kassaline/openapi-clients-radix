<?php
/**
 * TipPatchCommand
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Model;

use \ArrayAccess;
use \OpenAPI\Client\Radix\ObjectSerializer;

/**
 * TipPatchCommand Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TipPatchCommand implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TipPatchCommand';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'text' => 'string',
        'position' => 'int',
        'displayed' => 'bool',
        'printing' => 'bool',
        'onlyInRadix' => 'bool',
        'offer' => 'bool',
        'order' => 'bool',
        'packinglist' => 'bool',
        'billing' => 'bool',
        'accounting' => 'bool',
        'purchaseOrder' => 'bool',
        'purchasing' => 'bool',
        'warehouse' => 'bool',
        'production' => 'bool',
        'workOrder' => 'bool',
        'tourPlanning' => 'bool',
        'servicemanagement' => 'bool',
        'info' => 'bool',
        'web' => 'bool',
        'salesDeliveryNote' => 'bool',
        'salesInvoice' => 'bool',
        'cashDocuments' => 'bool',
        'project' => 'bool',
        'request' => 'bool',
        'purchaseDeliveryNote' => 'bool',
        'purchaseInvoice' => 'bool',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'text' => null,
        'position' => 'int32',
        'displayed' => null,
        'printing' => null,
        'onlyInRadix' => null,
        'offer' => null,
        'order' => null,
        'packinglist' => null,
        'billing' => null,
        'accounting' => null,
        'purchaseOrder' => null,
        'purchasing' => null,
        'warehouse' => null,
        'production' => null,
        'workOrder' => null,
        'tourPlanning' => null,
        'servicemanagement' => null,
        'info' => null,
        'web' => null,
        'salesDeliveryNote' => null,
        'salesInvoice' => null,
        'cashDocuments' => null,
        'project' => null,
        'request' => null,
        'purchaseDeliveryNote' => null,
        'purchaseInvoice' => null,
        'id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'text' => true,
        'position' => true,
        'displayed' => true,
        'printing' => true,
        'onlyInRadix' => true,
        'offer' => true,
        'order' => true,
        'packinglist' => true,
        'billing' => true,
        'accounting' => true,
        'purchaseOrder' => true,
        'purchasing' => true,
        'warehouse' => true,
        'production' => true,
        'workOrder' => true,
        'tourPlanning' => true,
        'servicemanagement' => true,
        'info' => true,
        'web' => true,
        'salesDeliveryNote' => true,
        'salesInvoice' => true,
        'cashDocuments' => true,
        'project' => true,
        'request' => true,
        'purchaseDeliveryNote' => true,
        'purchaseInvoice' => true,
        'id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'text' => 'text',
        'position' => 'position',
        'displayed' => 'displayed',
        'printing' => 'printing',
        'onlyInRadix' => 'onlyInRadix',
        'offer' => 'offer',
        'order' => 'order',
        'packinglist' => 'packinglist',
        'billing' => 'billing',
        'accounting' => 'accounting',
        'purchaseOrder' => 'purchaseOrder',
        'purchasing' => 'purchasing',
        'warehouse' => 'warehouse',
        'production' => 'production',
        'workOrder' => 'workOrder',
        'tourPlanning' => 'tourPlanning',
        'servicemanagement' => 'servicemanagement',
        'info' => 'info',
        'web' => 'web',
        'salesDeliveryNote' => 'salesDeliveryNote',
        'salesInvoice' => 'salesInvoice',
        'cashDocuments' => 'cashDocuments',
        'project' => 'project',
        'request' => 'request',
        'purchaseDeliveryNote' => 'purchaseDeliveryNote',
        'purchaseInvoice' => 'purchaseInvoice',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'text' => 'setText',
        'position' => 'setPosition',
        'displayed' => 'setDisplayed',
        'printing' => 'setPrinting',
        'onlyInRadix' => 'setOnlyInRadix',
        'offer' => 'setOffer',
        'order' => 'setOrder',
        'packinglist' => 'setPackinglist',
        'billing' => 'setBilling',
        'accounting' => 'setAccounting',
        'purchaseOrder' => 'setPurchaseOrder',
        'purchasing' => 'setPurchasing',
        'warehouse' => 'setWarehouse',
        'production' => 'setProduction',
        'workOrder' => 'setWorkOrder',
        'tourPlanning' => 'setTourPlanning',
        'servicemanagement' => 'setServicemanagement',
        'info' => 'setInfo',
        'web' => 'setWeb',
        'salesDeliveryNote' => 'setSalesDeliveryNote',
        'salesInvoice' => 'setSalesInvoice',
        'cashDocuments' => 'setCashDocuments',
        'project' => 'setProject',
        'request' => 'setRequest',
        'purchaseDeliveryNote' => 'setPurchaseDeliveryNote',
        'purchaseInvoice' => 'setPurchaseInvoice',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'text' => 'getText',
        'position' => 'getPosition',
        'displayed' => 'getDisplayed',
        'printing' => 'getPrinting',
        'onlyInRadix' => 'getOnlyInRadix',
        'offer' => 'getOffer',
        'order' => 'getOrder',
        'packinglist' => 'getPackinglist',
        'billing' => 'getBilling',
        'accounting' => 'getAccounting',
        'purchaseOrder' => 'getPurchaseOrder',
        'purchasing' => 'getPurchasing',
        'warehouse' => 'getWarehouse',
        'production' => 'getProduction',
        'workOrder' => 'getWorkOrder',
        'tourPlanning' => 'getTourPlanning',
        'servicemanagement' => 'getServicemanagement',
        'info' => 'getInfo',
        'web' => 'getWeb',
        'salesDeliveryNote' => 'getSalesDeliveryNote',
        'salesInvoice' => 'getSalesInvoice',
        'cashDocuments' => 'getCashDocuments',
        'project' => 'getProject',
        'request' => 'getRequest',
        'purchaseDeliveryNote' => 'getPurchaseDeliveryNote',
        'purchaseInvoice' => 'getPurchaseInvoice',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('displayed', $data ?? [], null);
        $this->setIfExists('printing', $data ?? [], null);
        $this->setIfExists('onlyInRadix', $data ?? [], null);
        $this->setIfExists('offer', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('packinglist', $data ?? [], null);
        $this->setIfExists('billing', $data ?? [], null);
        $this->setIfExists('accounting', $data ?? [], null);
        $this->setIfExists('purchaseOrder', $data ?? [], null);
        $this->setIfExists('purchasing', $data ?? [], null);
        $this->setIfExists('warehouse', $data ?? [], null);
        $this->setIfExists('production', $data ?? [], null);
        $this->setIfExists('workOrder', $data ?? [], null);
        $this->setIfExists('tourPlanning', $data ?? [], null);
        $this->setIfExists('servicemanagement', $data ?? [], null);
        $this->setIfExists('info', $data ?? [], null);
        $this->setIfExists('web', $data ?? [], null);
        $this->setIfExists('salesDeliveryNote', $data ?? [], null);
        $this->setIfExists('salesInvoice', $data ?? [], null);
        $this->setIfExists('cashDocuments', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('request', $data ?? [], null);
        $this->setIfExists('purchaseDeliveryNote', $data ?? [], null);
        $this->setIfExists('purchaseInvoice', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            array_push($this->openAPINullablesSetToNull, 'text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            array_push($this->openAPINullablesSetToNull, 'position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets displayed
     *
     * @return bool|null
     */
    public function getDisplayed()
    {
        return $this->container['displayed'];
    }

    /**
     * Sets displayed
     *
     * @param bool|null $displayed displayed
     *
     * @return self
     */
    public function setDisplayed($displayed)
    {
        if (is_null($displayed)) {
            array_push($this->openAPINullablesSetToNull, 'displayed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('displayed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['displayed'] = $displayed;

        return $this;
    }

    /**
     * Gets printing
     *
     * @return bool|null
     */
    public function getPrinting()
    {
        return $this->container['printing'];
    }

    /**
     * Sets printing
     *
     * @param bool|null $printing printing
     *
     * @return self
     */
    public function setPrinting($printing)
    {
        if (is_null($printing)) {
            array_push($this->openAPINullablesSetToNull, 'printing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('printing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['printing'] = $printing;

        return $this;
    }

    /**
     * Gets onlyInRadix
     *
     * @return bool|null
     */
    public function getOnlyInRadix()
    {
        return $this->container['onlyInRadix'];
    }

    /**
     * Sets onlyInRadix
     *
     * @param bool|null $onlyInRadix onlyInRadix
     *
     * @return self
     */
    public function setOnlyInRadix($onlyInRadix)
    {
        if (is_null($onlyInRadix)) {
            array_push($this->openAPINullablesSetToNull, 'onlyInRadix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('onlyInRadix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['onlyInRadix'] = $onlyInRadix;

        return $this;
    }

    /**
     * Gets offer
     *
     * @return bool|null
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     *
     * @param bool|null $offer offer
     *
     * @return self
     */
    public function setOffer($offer)
    {
        if (is_null($offer)) {
            array_push($this->openAPINullablesSetToNull, 'offer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offer'] = $offer;

        return $this;
    }

    /**
     * Gets order
     *
     * @return bool|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param bool|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets packinglist
     *
     * @return bool|null
     */
    public function getPackinglist()
    {
        return $this->container['packinglist'];
    }

    /**
     * Sets packinglist
     *
     * @param bool|null $packinglist packinglist
     *
     * @return self
     */
    public function setPackinglist($packinglist)
    {
        if (is_null($packinglist)) {
            array_push($this->openAPINullablesSetToNull, 'packinglist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packinglist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['packinglist'] = $packinglist;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return bool|null
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param bool|null $billing billing
     *
     * @return self
     */
    public function setBilling($billing)
    {
        if (is_null($billing)) {
            array_push($this->openAPINullablesSetToNull, 'billing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets accounting
     *
     * @return bool|null
     */
    public function getAccounting()
    {
        return $this->container['accounting'];
    }

    /**
     * Sets accounting
     *
     * @param bool|null $accounting accounting
     *
     * @return self
     */
    public function setAccounting($accounting)
    {
        if (is_null($accounting)) {
            array_push($this->openAPINullablesSetToNull, 'accounting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accounting'] = $accounting;

        return $this;
    }

    /**
     * Gets purchaseOrder
     *
     * @return bool|null
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchaseOrder'];
    }

    /**
     * Sets purchaseOrder
     *
     * @param bool|null $purchaseOrder purchaseOrder
     *
     * @return self
     */
    public function setPurchaseOrder($purchaseOrder)
    {
        if (is_null($purchaseOrder)) {
            array_push($this->openAPINullablesSetToNull, 'purchaseOrder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchaseOrder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchaseOrder'] = $purchaseOrder;

        return $this;
    }

    /**
     * Gets purchasing
     *
     * @return bool|null
     */
    public function getPurchasing()
    {
        return $this->container['purchasing'];
    }

    /**
     * Sets purchasing
     *
     * @param bool|null $purchasing purchasing
     *
     * @return self
     */
    public function setPurchasing($purchasing)
    {
        if (is_null($purchasing)) {
            array_push($this->openAPINullablesSetToNull, 'purchasing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchasing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchasing'] = $purchasing;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return bool|null
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param bool|null $warehouse warehouse
     *
     * @return self
     */
    public function setWarehouse($warehouse)
    {
        if (is_null($warehouse)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets production
     *
     * @return bool|null
     */
    public function getProduction()
    {
        return $this->container['production'];
    }

    /**
     * Sets production
     *
     * @param bool|null $production production
     *
     * @return self
     */
    public function setProduction($production)
    {
        if (is_null($production)) {
            array_push($this->openAPINullablesSetToNull, 'production');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('production', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['production'] = $production;

        return $this;
    }

    /**
     * Gets workOrder
     *
     * @return bool|null
     */
    public function getWorkOrder()
    {
        return $this->container['workOrder'];
    }

    /**
     * Sets workOrder
     *
     * @param bool|null $workOrder workOrder
     *
     * @return self
     */
    public function setWorkOrder($workOrder)
    {
        if (is_null($workOrder)) {
            array_push($this->openAPINullablesSetToNull, 'workOrder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workOrder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workOrder'] = $workOrder;

        return $this;
    }

    /**
     * Gets tourPlanning
     *
     * @return bool|null
     */
    public function getTourPlanning()
    {
        return $this->container['tourPlanning'];
    }

    /**
     * Sets tourPlanning
     *
     * @param bool|null $tourPlanning tourPlanning
     *
     * @return self
     */
    public function setTourPlanning($tourPlanning)
    {
        if (is_null($tourPlanning)) {
            array_push($this->openAPINullablesSetToNull, 'tourPlanning');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tourPlanning', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tourPlanning'] = $tourPlanning;

        return $this;
    }

    /**
     * Gets servicemanagement
     *
     * @return bool|null
     */
    public function getServicemanagement()
    {
        return $this->container['servicemanagement'];
    }

    /**
     * Sets servicemanagement
     *
     * @param bool|null $servicemanagement servicemanagement
     *
     * @return self
     */
    public function setServicemanagement($servicemanagement)
    {
        if (is_null($servicemanagement)) {
            array_push($this->openAPINullablesSetToNull, 'servicemanagement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('servicemanagement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['servicemanagement'] = $servicemanagement;

        return $this;
    }

    /**
     * Gets info
     *
     * @return bool|null
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     *
     * @param bool|null $info info
     *
     * @return self
     */
    public function setInfo($info)
    {
        if (is_null($info)) {
            array_push($this->openAPINullablesSetToNull, 'info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['info'] = $info;

        return $this;
    }

    /**
     * Gets web
     *
     * @return bool|null
     */
    public function getWeb()
    {
        return $this->container['web'];
    }

    /**
     * Sets web
     *
     * @param bool|null $web web
     *
     * @return self
     */
    public function setWeb($web)
    {
        if (is_null($web)) {
            array_push($this->openAPINullablesSetToNull, 'web');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('web', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['web'] = $web;

        return $this;
    }

    /**
     * Gets salesDeliveryNote
     *
     * @return bool|null
     */
    public function getSalesDeliveryNote()
    {
        return $this->container['salesDeliveryNote'];
    }

    /**
     * Sets salesDeliveryNote
     *
     * @param bool|null $salesDeliveryNote salesDeliveryNote
     *
     * @return self
     */
    public function setSalesDeliveryNote($salesDeliveryNote)
    {
        if (is_null($salesDeliveryNote)) {
            array_push($this->openAPINullablesSetToNull, 'salesDeliveryNote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('salesDeliveryNote', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['salesDeliveryNote'] = $salesDeliveryNote;

        return $this;
    }

    /**
     * Gets salesInvoice
     *
     * @return bool|null
     */
    public function getSalesInvoice()
    {
        return $this->container['salesInvoice'];
    }

    /**
     * Sets salesInvoice
     *
     * @param bool|null $salesInvoice salesInvoice
     *
     * @return self
     */
    public function setSalesInvoice($salesInvoice)
    {
        if (is_null($salesInvoice)) {
            array_push($this->openAPINullablesSetToNull, 'salesInvoice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('salesInvoice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['salesInvoice'] = $salesInvoice;

        return $this;
    }

    /**
     * Gets cashDocuments
     *
     * @return bool|null
     */
    public function getCashDocuments()
    {
        return $this->container['cashDocuments'];
    }

    /**
     * Sets cashDocuments
     *
     * @param bool|null $cashDocuments cashDocuments
     *
     * @return self
     */
    public function setCashDocuments($cashDocuments)
    {
        if (is_null($cashDocuments)) {
            array_push($this->openAPINullablesSetToNull, 'cashDocuments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cashDocuments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cashDocuments'] = $cashDocuments;

        return $this;
    }

    /**
     * Gets project
     *
     * @return bool|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param bool|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            array_push($this->openAPINullablesSetToNull, 'project');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets request
     *
     * @return bool|null
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param bool|null $request request
     *
     * @return self
     */
    public function setRequest($request)
    {
        if (is_null($request)) {
            array_push($this->openAPINullablesSetToNull, 'request');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets purchaseDeliveryNote
     *
     * @return bool|null
     */
    public function getPurchaseDeliveryNote()
    {
        return $this->container['purchaseDeliveryNote'];
    }

    /**
     * Sets purchaseDeliveryNote
     *
     * @param bool|null $purchaseDeliveryNote purchaseDeliveryNote
     *
     * @return self
     */
    public function setPurchaseDeliveryNote($purchaseDeliveryNote)
    {
        if (is_null($purchaseDeliveryNote)) {
            array_push($this->openAPINullablesSetToNull, 'purchaseDeliveryNote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchaseDeliveryNote', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchaseDeliveryNote'] = $purchaseDeliveryNote;

        return $this;
    }

    /**
     * Gets purchaseInvoice
     *
     * @return bool|null
     */
    public function getPurchaseInvoice()
    {
        return $this->container['purchaseInvoice'];
    }

    /**
     * Sets purchaseInvoice
     *
     * @param bool|null $purchaseInvoice purchaseInvoice
     *
     * @return self
     */
    public function setPurchaseInvoice($purchaseInvoice)
    {
        if (is_null($purchaseInvoice)) {
            array_push($this->openAPINullablesSetToNull, 'purchaseInvoice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchaseInvoice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchaseInvoice'] = $purchaseInvoice;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


