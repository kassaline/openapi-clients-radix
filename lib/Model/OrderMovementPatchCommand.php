<?php
/**
 * OrderMovementPatchCommand
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Model;

use \ArrayAccess;
use \OpenAPI\Client\Radix\ObjectSerializer;

/**
 * OrderMovementPatchCommand Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderMovementPatchCommand implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderMovementPatchCommand';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'position' => 'int',
        'description' => 'string',
        'quantity' => 'float',
        'price' => 'float',
        'priceUnit' => 'int',
        'discount1' => 'float',
        'discount2' => 'float',
        'discount3' => 'float',
        'discount4' => 'float',
        'discount5' => 'float',
        'priceIncludingVat' => 'bool',
        'materialDiscountType' => '\OpenAPI\Client\Radix\Model\MaterialDiscountType',
        'priceOrigin' => 'int',
        'print' => 'bool',
        'printPrice' => 'bool',
        'weight' => 'float',
        'weightUnit' => 'int',
        'vat' => '\OpenAPI\Client\Radix\Model\IdCode',
        'deliveryDate' => '\DateTime',
        'desiredDate' => '\DateTime',
        'confirmationDate' => '\DateTime',
        'documentState' => '\OpenAPI\Client\Radix\Model\IdCode',
        'account' => '\OpenAPI\Client\Radix\Model\IdCode',
        'costLevel' => '\OpenAPI\Client\Radix\Model\IdCode',
        'costType' => '\OpenAPI\Client\Radix\Model\IdCode',
        'costUnit' => '\OpenAPI\Client\Radix\Model\IdCode',
        'sumRow' => 'bool',
        'limitAccrualDateFrom' => '\DateTime',
        'limitAccrualDateUntil' => '\DateTime',
        'note' => 'string',
        'parentSerialNumber' => '\OpenAPI\Client\Radix\Model\IdCode',
        'optionFields' => '\OpenAPI\Client\Radix\Model\OptionfieldDto[]',
        'additionalFields' => '\OpenAPI\Client\Radix\Model\OrderAdditionalField[]',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'position' => 'int32',
        'description' => null,
        'quantity' => 'double',
        'price' => 'double',
        'priceUnit' => 'int32',
        'discount1' => 'double',
        'discount2' => 'double',
        'discount3' => 'double',
        'discount4' => 'double',
        'discount5' => 'double',
        'priceIncludingVat' => null,
        'materialDiscountType' => null,
        'priceOrigin' => 'int32',
        'print' => null,
        'printPrice' => null,
        'weight' => 'double',
        'weightUnit' => 'int32',
        'vat' => null,
        'deliveryDate' => 'date-time',
        'desiredDate' => 'date-time',
        'confirmationDate' => 'date-time',
        'documentState' => null,
        'account' => null,
        'costLevel' => null,
        'costType' => null,
        'costUnit' => null,
        'sumRow' => null,
        'limitAccrualDateFrom' => 'date-time',
        'limitAccrualDateUntil' => 'date-time',
        'note' => null,
        'parentSerialNumber' => null,
        'optionFields' => null,
        'additionalFields' => null,
        'id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'position' => true,
        'description' => true,
        'quantity' => true,
        'price' => true,
        'priceUnit' => true,
        'discount1' => true,
        'discount2' => true,
        'discount3' => true,
        'discount4' => true,
        'discount5' => true,
        'priceIncludingVat' => true,
        'materialDiscountType' => false,
        'priceOrigin' => true,
        'print' => true,
        'printPrice' => true,
        'weight' => true,
        'weightUnit' => true,
        'vat' => false,
        'deliveryDate' => true,
        'desiredDate' => true,
        'confirmationDate' => true,
        'documentState' => false,
        'account' => false,
        'costLevel' => false,
        'costType' => false,
        'costUnit' => false,
        'sumRow' => true,
        'limitAccrualDateFrom' => true,
        'limitAccrualDateUntil' => true,
        'note' => true,
        'parentSerialNumber' => false,
        'optionFields' => true,
        'additionalFields' => true,
        'id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'position' => 'position',
        'description' => 'description',
        'quantity' => 'quantity',
        'price' => 'price',
        'priceUnit' => 'priceUnit',
        'discount1' => 'discount1',
        'discount2' => 'discount2',
        'discount3' => 'discount3',
        'discount4' => 'discount4',
        'discount5' => 'discount5',
        'priceIncludingVat' => 'priceIncludingVat',
        'materialDiscountType' => 'materialDiscountType',
        'priceOrigin' => 'priceOrigin',
        'print' => 'print',
        'printPrice' => 'printPrice',
        'weight' => 'weight',
        'weightUnit' => 'weightUnit',
        'vat' => 'vat',
        'deliveryDate' => 'deliveryDate',
        'desiredDate' => 'desiredDate',
        'confirmationDate' => 'confirmationDate',
        'documentState' => 'documentState',
        'account' => 'account',
        'costLevel' => 'costLevel',
        'costType' => 'costType',
        'costUnit' => 'costUnit',
        'sumRow' => 'sumRow',
        'limitAccrualDateFrom' => 'limitAccrualDateFrom',
        'limitAccrualDateUntil' => 'limitAccrualDateUntil',
        'note' => 'note',
        'parentSerialNumber' => 'parentSerialNumber',
        'optionFields' => 'optionFields',
        'additionalFields' => 'additionalFields',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'position' => 'setPosition',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'price' => 'setPrice',
        'priceUnit' => 'setPriceUnit',
        'discount1' => 'setDiscount1',
        'discount2' => 'setDiscount2',
        'discount3' => 'setDiscount3',
        'discount4' => 'setDiscount4',
        'discount5' => 'setDiscount5',
        'priceIncludingVat' => 'setPriceIncludingVat',
        'materialDiscountType' => 'setMaterialDiscountType',
        'priceOrigin' => 'setPriceOrigin',
        'print' => 'setPrint',
        'printPrice' => 'setPrintPrice',
        'weight' => 'setWeight',
        'weightUnit' => 'setWeightUnit',
        'vat' => 'setVat',
        'deliveryDate' => 'setDeliveryDate',
        'desiredDate' => 'setDesiredDate',
        'confirmationDate' => 'setConfirmationDate',
        'documentState' => 'setDocumentState',
        'account' => 'setAccount',
        'costLevel' => 'setCostLevel',
        'costType' => 'setCostType',
        'costUnit' => 'setCostUnit',
        'sumRow' => 'setSumRow',
        'limitAccrualDateFrom' => 'setLimitAccrualDateFrom',
        'limitAccrualDateUntil' => 'setLimitAccrualDateUntil',
        'note' => 'setNote',
        'parentSerialNumber' => 'setParentSerialNumber',
        'optionFields' => 'setOptionFields',
        'additionalFields' => 'setAdditionalFields',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'position' => 'getPosition',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'price' => 'getPrice',
        'priceUnit' => 'getPriceUnit',
        'discount1' => 'getDiscount1',
        'discount2' => 'getDiscount2',
        'discount3' => 'getDiscount3',
        'discount4' => 'getDiscount4',
        'discount5' => 'getDiscount5',
        'priceIncludingVat' => 'getPriceIncludingVat',
        'materialDiscountType' => 'getMaterialDiscountType',
        'priceOrigin' => 'getPriceOrigin',
        'print' => 'getPrint',
        'printPrice' => 'getPrintPrice',
        'weight' => 'getWeight',
        'weightUnit' => 'getWeightUnit',
        'vat' => 'getVat',
        'deliveryDate' => 'getDeliveryDate',
        'desiredDate' => 'getDesiredDate',
        'confirmationDate' => 'getConfirmationDate',
        'documentState' => 'getDocumentState',
        'account' => 'getAccount',
        'costLevel' => 'getCostLevel',
        'costType' => 'getCostType',
        'costUnit' => 'getCostUnit',
        'sumRow' => 'getSumRow',
        'limitAccrualDateFrom' => 'getLimitAccrualDateFrom',
        'limitAccrualDateUntil' => 'getLimitAccrualDateUntil',
        'note' => 'getNote',
        'parentSerialNumber' => 'getParentSerialNumber',
        'optionFields' => 'getOptionFields',
        'additionalFields' => 'getAdditionalFields',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('priceUnit', $data ?? [], null);
        $this->setIfExists('discount1', $data ?? [], null);
        $this->setIfExists('discount2', $data ?? [], null);
        $this->setIfExists('discount3', $data ?? [], null);
        $this->setIfExists('discount4', $data ?? [], null);
        $this->setIfExists('discount5', $data ?? [], null);
        $this->setIfExists('priceIncludingVat', $data ?? [], null);
        $this->setIfExists('materialDiscountType', $data ?? [], null);
        $this->setIfExists('priceOrigin', $data ?? [], null);
        $this->setIfExists('print', $data ?? [], null);
        $this->setIfExists('printPrice', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weightUnit', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('deliveryDate', $data ?? [], null);
        $this->setIfExists('desiredDate', $data ?? [], null);
        $this->setIfExists('confirmationDate', $data ?? [], null);
        $this->setIfExists('documentState', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('costLevel', $data ?? [], null);
        $this->setIfExists('costType', $data ?? [], null);
        $this->setIfExists('costUnit', $data ?? [], null);
        $this->setIfExists('sumRow', $data ?? [], null);
        $this->setIfExists('limitAccrualDateFrom', $data ?? [], null);
        $this->setIfExists('limitAccrualDateUntil', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('parentSerialNumber', $data ?? [], null);
        $this->setIfExists('optionFields', $data ?? [], null);
        $this->setIfExists('additionalFields', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            array_push($this->openAPINullablesSetToNull, 'position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            array_push($this->openAPINullablesSetToNull, 'quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priceUnit
     *
     * @return int|null
     */
    public function getPriceUnit()
    {
        return $this->container['priceUnit'];
    }

    /**
     * Sets priceUnit
     *
     * @param int|null $priceUnit priceUnit
     *
     * @return self
     */
    public function setPriceUnit($priceUnit)
    {
        if (is_null($priceUnit)) {
            array_push($this->openAPINullablesSetToNull, 'priceUnit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priceUnit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priceUnit'] = $priceUnit;

        return $this;
    }

    /**
     * Gets discount1
     *
     * @return float|null
     */
    public function getDiscount1()
    {
        return $this->container['discount1'];
    }

    /**
     * Sets discount1
     *
     * @param float|null $discount1 discount1
     *
     * @return self
     */
    public function setDiscount1($discount1)
    {
        if (is_null($discount1)) {
            array_push($this->openAPINullablesSetToNull, 'discount1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount1'] = $discount1;

        return $this;
    }

    /**
     * Gets discount2
     *
     * @return float|null
     */
    public function getDiscount2()
    {
        return $this->container['discount2'];
    }

    /**
     * Sets discount2
     *
     * @param float|null $discount2 discount2
     *
     * @return self
     */
    public function setDiscount2($discount2)
    {
        if (is_null($discount2)) {
            array_push($this->openAPINullablesSetToNull, 'discount2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount2'] = $discount2;

        return $this;
    }

    /**
     * Gets discount3
     *
     * @return float|null
     */
    public function getDiscount3()
    {
        return $this->container['discount3'];
    }

    /**
     * Sets discount3
     *
     * @param float|null $discount3 discount3
     *
     * @return self
     */
    public function setDiscount3($discount3)
    {
        if (is_null($discount3)) {
            array_push($this->openAPINullablesSetToNull, 'discount3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount3'] = $discount3;

        return $this;
    }

    /**
     * Gets discount4
     *
     * @return float|null
     */
    public function getDiscount4()
    {
        return $this->container['discount4'];
    }

    /**
     * Sets discount4
     *
     * @param float|null $discount4 discount4
     *
     * @return self
     */
    public function setDiscount4($discount4)
    {
        if (is_null($discount4)) {
            array_push($this->openAPINullablesSetToNull, 'discount4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount4'] = $discount4;

        return $this;
    }

    /**
     * Gets discount5
     *
     * @return float|null
     */
    public function getDiscount5()
    {
        return $this->container['discount5'];
    }

    /**
     * Sets discount5
     *
     * @param float|null $discount5 discount5
     *
     * @return self
     */
    public function setDiscount5($discount5)
    {
        if (is_null($discount5)) {
            array_push($this->openAPINullablesSetToNull, 'discount5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount5'] = $discount5;

        return $this;
    }

    /**
     * Gets priceIncludingVat
     *
     * @return bool|null
     */
    public function getPriceIncludingVat()
    {
        return $this->container['priceIncludingVat'];
    }

    /**
     * Sets priceIncludingVat
     *
     * @param bool|null $priceIncludingVat priceIncludingVat
     *
     * @return self
     */
    public function setPriceIncludingVat($priceIncludingVat)
    {
        if (is_null($priceIncludingVat)) {
            array_push($this->openAPINullablesSetToNull, 'priceIncludingVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priceIncludingVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priceIncludingVat'] = $priceIncludingVat;

        return $this;
    }

    /**
     * Gets materialDiscountType
     *
     * @return \OpenAPI\Client\Radix\Model\MaterialDiscountType|null
     */
    public function getMaterialDiscountType()
    {
        return $this->container['materialDiscountType'];
    }

    /**
     * Sets materialDiscountType
     *
     * @param \OpenAPI\Client\Radix\Model\MaterialDiscountType|null $materialDiscountType materialDiscountType
     *
     * @return self
     */
    public function setMaterialDiscountType($materialDiscountType)
    {
        if (is_null($materialDiscountType)) {
            throw new \InvalidArgumentException('non-nullable materialDiscountType cannot be null');
        }
        $this->container['materialDiscountType'] = $materialDiscountType;

        return $this;
    }

    /**
     * Gets priceOrigin
     *
     * @return int|null
     */
    public function getPriceOrigin()
    {
        return $this->container['priceOrigin'];
    }

    /**
     * Sets priceOrigin
     *
     * @param int|null $priceOrigin priceOrigin
     *
     * @return self
     */
    public function setPriceOrigin($priceOrigin)
    {
        if (is_null($priceOrigin)) {
            array_push($this->openAPINullablesSetToNull, 'priceOrigin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priceOrigin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priceOrigin'] = $priceOrigin;

        return $this;
    }

    /**
     * Gets print
     *
     * @return bool|null
     */
    public function getPrint()
    {
        return $this->container['print'];
    }

    /**
     * Sets print
     *
     * @param bool|null $print print
     *
     * @return self
     */
    public function setPrint($print)
    {
        if (is_null($print)) {
            array_push($this->openAPINullablesSetToNull, 'print');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('print', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['print'] = $print;

        return $this;
    }

    /**
     * Gets printPrice
     *
     * @return bool|null
     */
    public function getPrintPrice()
    {
        return $this->container['printPrice'];
    }

    /**
     * Sets printPrice
     *
     * @param bool|null $printPrice printPrice
     *
     * @return self
     */
    public function setPrintPrice($printPrice)
    {
        if (is_null($printPrice)) {
            array_push($this->openAPINullablesSetToNull, 'printPrice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('printPrice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['printPrice'] = $printPrice;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            array_push($this->openAPINullablesSetToNull, 'weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weightUnit
     *
     * @return int|null
     */
    public function getWeightUnit()
    {
        return $this->container['weightUnit'];
    }

    /**
     * Sets weightUnit
     *
     * @param int|null $weightUnit weightUnit
     *
     * @return self
     */
    public function setWeightUnit($weightUnit)
    {
        if (is_null($weightUnit)) {
            array_push($this->openAPINullablesSetToNull, 'weightUnit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weightUnit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weightUnit'] = $weightUnit;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $vat vat
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets deliveryDate
     *
     * @return \DateTime|null
     */
    public function getDeliveryDate()
    {
        return $this->container['deliveryDate'];
    }

    /**
     * Sets deliveryDate
     *
     * @param \DateTime|null $deliveryDate deliveryDate
     *
     * @return self
     */
    public function setDeliveryDate($deliveryDate)
    {
        if (is_null($deliveryDate)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryDate'] = $deliveryDate;

        return $this;
    }

    /**
     * Gets desiredDate
     *
     * @return \DateTime|null
     */
    public function getDesiredDate()
    {
        return $this->container['desiredDate'];
    }

    /**
     * Sets desiredDate
     *
     * @param \DateTime|null $desiredDate desiredDate
     *
     * @return self
     */
    public function setDesiredDate($desiredDate)
    {
        if (is_null($desiredDate)) {
            array_push($this->openAPINullablesSetToNull, 'desiredDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('desiredDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['desiredDate'] = $desiredDate;

        return $this;
    }

    /**
     * Gets confirmationDate
     *
     * @return \DateTime|null
     */
    public function getConfirmationDate()
    {
        return $this->container['confirmationDate'];
    }

    /**
     * Sets confirmationDate
     *
     * @param \DateTime|null $confirmationDate confirmationDate
     *
     * @return self
     */
    public function setConfirmationDate($confirmationDate)
    {
        if (is_null($confirmationDate)) {
            array_push($this->openAPINullablesSetToNull, 'confirmationDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confirmationDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confirmationDate'] = $confirmationDate;

        return $this;
    }

    /**
     * Gets documentState
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getDocumentState()
    {
        return $this->container['documentState'];
    }

    /**
     * Sets documentState
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $documentState documentState
     *
     * @return self
     */
    public function setDocumentState($documentState)
    {
        if (is_null($documentState)) {
            throw new \InvalidArgumentException('non-nullable documentState cannot be null');
        }
        $this->container['documentState'] = $documentState;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets costLevel
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getCostLevel()
    {
        return $this->container['costLevel'];
    }

    /**
     * Sets costLevel
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $costLevel costLevel
     *
     * @return self
     */
    public function setCostLevel($costLevel)
    {
        if (is_null($costLevel)) {
            throw new \InvalidArgumentException('non-nullable costLevel cannot be null');
        }
        $this->container['costLevel'] = $costLevel;

        return $this;
    }

    /**
     * Gets costType
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getCostType()
    {
        return $this->container['costType'];
    }

    /**
     * Sets costType
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $costType costType
     *
     * @return self
     */
    public function setCostType($costType)
    {
        if (is_null($costType)) {
            throw new \InvalidArgumentException('non-nullable costType cannot be null');
        }
        $this->container['costType'] = $costType;

        return $this;
    }

    /**
     * Gets costUnit
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getCostUnit()
    {
        return $this->container['costUnit'];
    }

    /**
     * Sets costUnit
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $costUnit costUnit
     *
     * @return self
     */
    public function setCostUnit($costUnit)
    {
        if (is_null($costUnit)) {
            throw new \InvalidArgumentException('non-nullable costUnit cannot be null');
        }
        $this->container['costUnit'] = $costUnit;

        return $this;
    }

    /**
     * Gets sumRow
     *
     * @return bool|null
     */
    public function getSumRow()
    {
        return $this->container['sumRow'];
    }

    /**
     * Sets sumRow
     *
     * @param bool|null $sumRow sumRow
     *
     * @return self
     */
    public function setSumRow($sumRow)
    {
        if (is_null($sumRow)) {
            array_push($this->openAPINullablesSetToNull, 'sumRow');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sumRow', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sumRow'] = $sumRow;

        return $this;
    }

    /**
     * Gets limitAccrualDateFrom
     *
     * @return \DateTime|null
     */
    public function getLimitAccrualDateFrom()
    {
        return $this->container['limitAccrualDateFrom'];
    }

    /**
     * Sets limitAccrualDateFrom
     *
     * @param \DateTime|null $limitAccrualDateFrom limitAccrualDateFrom
     *
     * @return self
     */
    public function setLimitAccrualDateFrom($limitAccrualDateFrom)
    {
        if (is_null($limitAccrualDateFrom)) {
            array_push($this->openAPINullablesSetToNull, 'limitAccrualDateFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limitAccrualDateFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['limitAccrualDateFrom'] = $limitAccrualDateFrom;

        return $this;
    }

    /**
     * Gets limitAccrualDateUntil
     *
     * @return \DateTime|null
     */
    public function getLimitAccrualDateUntil()
    {
        return $this->container['limitAccrualDateUntil'];
    }

    /**
     * Sets limitAccrualDateUntil
     *
     * @param \DateTime|null $limitAccrualDateUntil limitAccrualDateUntil
     *
     * @return self
     */
    public function setLimitAccrualDateUntil($limitAccrualDateUntil)
    {
        if (is_null($limitAccrualDateUntil)) {
            array_push($this->openAPINullablesSetToNull, 'limitAccrualDateUntil');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limitAccrualDateUntil', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['limitAccrualDateUntil'] = $limitAccrualDateUntil;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets parentSerialNumber
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getParentSerialNumber()
    {
        return $this->container['parentSerialNumber'];
    }

    /**
     * Sets parentSerialNumber
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $parentSerialNumber parentSerialNumber
     *
     * @return self
     */
    public function setParentSerialNumber($parentSerialNumber)
    {
        if (is_null($parentSerialNumber)) {
            throw new \InvalidArgumentException('non-nullable parentSerialNumber cannot be null');
        }
        $this->container['parentSerialNumber'] = $parentSerialNumber;

        return $this;
    }

    /**
     * Gets optionFields
     *
     * @return \OpenAPI\Client\Radix\Model\OptionfieldDto[]|null
     */
    public function getOptionFields()
    {
        return $this->container['optionFields'];
    }

    /**
     * Sets optionFields
     *
     * @param \OpenAPI\Client\Radix\Model\OptionfieldDto[]|null $optionFields optionFields
     *
     * @return self
     */
    public function setOptionFields($optionFields)
    {
        if (is_null($optionFields)) {
            array_push($this->openAPINullablesSetToNull, 'optionFields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('optionFields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['optionFields'] = $optionFields;

        return $this;
    }

    /**
     * Gets additionalFields
     *
     * @return \OpenAPI\Client\Radix\Model\OrderAdditionalField[]|null
     */
    public function getAdditionalFields()
    {
        return $this->container['additionalFields'];
    }

    /**
     * Sets additionalFields
     *
     * @param \OpenAPI\Client\Radix\Model\OrderAdditionalField[]|null $additionalFields additionalFields
     *
     * @return self
     */
    public function setAdditionalFields($additionalFields)
    {
        if (is_null($additionalFields)) {
            array_push($this->openAPINullablesSetToNull, 'additionalFields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additionalFields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additionalFields'] = $additionalFields;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


