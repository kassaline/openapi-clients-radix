<?php
/**
 * SupplierShippingAddressDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Model;

use \ArrayAccess;
use \OpenAPI\Client\Radix\ObjectSerializer;

/**
 * SupplierShippingAddressDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupplierShippingAddressDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SupplierShippingAddressDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'companyId' => 'string',
        'defaultShippingAddress' => 'bool',
        'addressId' => 'string',
        'description' => 'string',
        'description2' => 'string',
        'salutation' => 'string',
        'letterSalutation' => 'string',
        'street' => 'string',
        'streetNumber' => 'string',
        'postalCode' => 'string',
        'town' => 'string',
        'province' => 'string',
        'country' => 'string',
        'phone' => '\OpenAPI\Client\Radix\Model\Phonenumber[]',
        'fax' => '\OpenAPI\Client\Radix\Model\Faxnumber[]',
        'email' => '\OpenAPI\Client\Radix\Model\Email[]',
        'emailPEC' => 'string',
        'url' => 'string',
        'language' => 'string',
        'isoVatNumber' => '\OpenAPI\Client\Radix\Model\IsoVatnumber',
        'taxNumber' => 'string',
        'freighter' => '\OpenAPI\Client\Radix\Model\IdCode',
        'note' => 'string',
        'mapLat' => 'float',
        'mapLong' => 'float',
        'area' => '\OpenAPI\Client\Radix\Model\IdCode',
        'inactive' => 'bool',
        'lockedSince' => '\DateTime',
        'supplierId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'companyId' => null,
        'defaultShippingAddress' => null,
        'addressId' => null,
        'description' => null,
        'description2' => null,
        'salutation' => null,
        'letterSalutation' => null,
        'street' => null,
        'streetNumber' => null,
        'postalCode' => null,
        'town' => null,
        'province' => null,
        'country' => null,
        'phone' => null,
        'fax' => null,
        'email' => null,
        'emailPEC' => null,
        'url' => null,
        'language' => null,
        'isoVatNumber' => null,
        'taxNumber' => null,
        'freighter' => null,
        'note' => null,
        'mapLat' => 'double',
        'mapLong' => 'double',
        'area' => null,
        'inactive' => null,
        'lockedSince' => 'date-time',
        'supplierId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'companyId' => true,
        'defaultShippingAddress' => false,
        'addressId' => true,
        'description' => true,
        'description2' => true,
        'salutation' => true,
        'letterSalutation' => true,
        'street' => true,
        'streetNumber' => true,
        'postalCode' => true,
        'town' => true,
        'province' => true,
        'country' => true,
        'phone' => true,
        'fax' => true,
        'email' => true,
        'emailPEC' => true,
        'url' => true,
        'language' => true,
        'isoVatNumber' => false,
        'taxNumber' => true,
        'freighter' => false,
        'note' => true,
        'mapLat' => false,
        'mapLong' => false,
        'area' => false,
        'inactive' => false,
        'lockedSince' => true,
        'supplierId' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'companyId' => 'companyId',
        'defaultShippingAddress' => 'defaultShippingAddress',
        'addressId' => 'addressId',
        'description' => 'description',
        'description2' => 'description2',
        'salutation' => 'salutation',
        'letterSalutation' => 'letterSalutation',
        'street' => 'street',
        'streetNumber' => 'streetNumber',
        'postalCode' => 'postalCode',
        'town' => 'town',
        'province' => 'province',
        'country' => 'country',
        'phone' => 'phone',
        'fax' => 'fax',
        'email' => 'email',
        'emailPEC' => 'emailPEC',
        'url' => 'url',
        'language' => 'language',
        'isoVatNumber' => 'isoVatNumber',
        'taxNumber' => 'taxNumber',
        'freighter' => 'freighter',
        'note' => 'note',
        'mapLat' => 'mapLat',
        'mapLong' => 'mapLong',
        'area' => 'area',
        'inactive' => 'inactive',
        'lockedSince' => 'lockedSince',
        'supplierId' => 'supplierId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'companyId' => 'setCompanyId',
        'defaultShippingAddress' => 'setDefaultShippingAddress',
        'addressId' => 'setAddressId',
        'description' => 'setDescription',
        'description2' => 'setDescription2',
        'salutation' => 'setSalutation',
        'letterSalutation' => 'setLetterSalutation',
        'street' => 'setStreet',
        'streetNumber' => 'setStreetNumber',
        'postalCode' => 'setPostalCode',
        'town' => 'setTown',
        'province' => 'setProvince',
        'country' => 'setCountry',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'email' => 'setEmail',
        'emailPEC' => 'setEmailPEC',
        'url' => 'setUrl',
        'language' => 'setLanguage',
        'isoVatNumber' => 'setIsoVatNumber',
        'taxNumber' => 'setTaxNumber',
        'freighter' => 'setFreighter',
        'note' => 'setNote',
        'mapLat' => 'setMapLat',
        'mapLong' => 'setMapLong',
        'area' => 'setArea',
        'inactive' => 'setInactive',
        'lockedSince' => 'setLockedSince',
        'supplierId' => 'setSupplierId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'companyId' => 'getCompanyId',
        'defaultShippingAddress' => 'getDefaultShippingAddress',
        'addressId' => 'getAddressId',
        'description' => 'getDescription',
        'description2' => 'getDescription2',
        'salutation' => 'getSalutation',
        'letterSalutation' => 'getLetterSalutation',
        'street' => 'getStreet',
        'streetNumber' => 'getStreetNumber',
        'postalCode' => 'getPostalCode',
        'town' => 'getTown',
        'province' => 'getProvince',
        'country' => 'getCountry',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'email' => 'getEmail',
        'emailPEC' => 'getEmailPEC',
        'url' => 'getUrl',
        'language' => 'getLanguage',
        'isoVatNumber' => 'getIsoVatNumber',
        'taxNumber' => 'getTaxNumber',
        'freighter' => 'getFreighter',
        'note' => 'getNote',
        'mapLat' => 'getMapLat',
        'mapLong' => 'getMapLong',
        'area' => 'getArea',
        'inactive' => 'getInactive',
        'lockedSince' => 'getLockedSince',
        'supplierId' => 'getSupplierId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('companyId', $data ?? [], null);
        $this->setIfExists('defaultShippingAddress', $data ?? [], null);
        $this->setIfExists('addressId', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('description2', $data ?? [], null);
        $this->setIfExists('salutation', $data ?? [], null);
        $this->setIfExists('letterSalutation', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('streetNumber', $data ?? [], null);
        $this->setIfExists('postalCode', $data ?? [], null);
        $this->setIfExists('town', $data ?? [], null);
        $this->setIfExists('province', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('emailPEC', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('isoVatNumber', $data ?? [], null);
        $this->setIfExists('taxNumber', $data ?? [], null);
        $this->setIfExists('freighter', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('mapLat', $data ?? [], null);
        $this->setIfExists('mapLong', $data ?? [], null);
        $this->setIfExists('area', $data ?? [], null);
        $this->setIfExists('inactive', $data ?? [], null);
        $this->setIfExists('lockedSince', $data ?? [], null);
        $this->setIfExists('supplierId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets companyId
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['companyId'];
    }

    /**
     * Sets companyId
     *
     * @param string|null $companyId companyId
     *
     * @return self
     */
    public function setCompanyId($companyId)
    {
        if (is_null($companyId)) {
            array_push($this->openAPINullablesSetToNull, 'companyId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyId'] = $companyId;

        return $this;
    }

    /**
     * Gets defaultShippingAddress
     *
     * @return bool|null
     */
    public function getDefaultShippingAddress()
    {
        return $this->container['defaultShippingAddress'];
    }

    /**
     * Sets defaultShippingAddress
     *
     * @param bool|null $defaultShippingAddress defaultShippingAddress
     *
     * @return self
     */
    public function setDefaultShippingAddress($defaultShippingAddress)
    {
        if (is_null($defaultShippingAddress)) {
            throw new \InvalidArgumentException('non-nullable defaultShippingAddress cannot be null');
        }
        $this->container['defaultShippingAddress'] = $defaultShippingAddress;

        return $this;
    }

    /**
     * Gets addressId
     *
     * @return string|null
     */
    public function getAddressId()
    {
        return $this->container['addressId'];
    }

    /**
     * Sets addressId
     *
     * @param string|null $addressId addressId
     *
     * @return self
     */
    public function setAddressId($addressId)
    {
        if (is_null($addressId)) {
            array_push($this->openAPINullablesSetToNull, 'addressId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addressId'] = $addressId;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description2
     *
     * @return string|null
     */
    public function getDescription2()
    {
        return $this->container['description2'];
    }

    /**
     * Sets description2
     *
     * @param string|null $description2 description2
     *
     * @return self
     */
    public function setDescription2($description2)
    {
        if (is_null($description2)) {
            array_push($this->openAPINullablesSetToNull, 'description2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description2'] = $description2;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string|null
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string|null $salutation salutation
     *
     * @return self
     */
    public function setSalutation($salutation)
    {
        if (is_null($salutation)) {
            array_push($this->openAPINullablesSetToNull, 'salutation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('salutation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets letterSalutation
     *
     * @return string|null
     */
    public function getLetterSalutation()
    {
        return $this->container['letterSalutation'];
    }

    /**
     * Sets letterSalutation
     *
     * @param string|null $letterSalutation letterSalutation
     *
     * @return self
     */
    public function setLetterSalutation($letterSalutation)
    {
        if (is_null($letterSalutation)) {
            array_push($this->openAPINullablesSetToNull, 'letterSalutation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('letterSalutation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['letterSalutation'] = $letterSalutation;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            array_push($this->openAPINullablesSetToNull, 'street');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets streetNumber
     *
     * @return string|null
     */
    public function getStreetNumber()
    {
        return $this->container['streetNumber'];
    }

    /**
     * Sets streetNumber
     *
     * @param string|null $streetNumber streetNumber
     *
     * @return self
     */
    public function setStreetNumber($streetNumber)
    {
        if (is_null($streetNumber)) {
            array_push($this->openAPINullablesSetToNull, 'streetNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('streetNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['streetNumber'] = $streetNumber;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode postalCode
     *
     * @return self
     */
    public function setPostalCode($postalCode)
    {
        if (is_null($postalCode)) {
            array_push($this->openAPINullablesSetToNull, 'postalCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postalCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string|null
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string|null $town town
     *
     * @return self
     */
    public function setTown($town)
    {
        if (is_null($town)) {
            array_push($this->openAPINullablesSetToNull, 'town');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('town', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string|null
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string|null $province province
     *
     * @return self
     */
    public function setProvince($province)
    {
        if (is_null($province)) {
            array_push($this->openAPINullablesSetToNull, 'province');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('province', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \OpenAPI\Client\Radix\Model\Phonenumber[]|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \OpenAPI\Client\Radix\Model\Phonenumber[]|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return \OpenAPI\Client\Radix\Model\Faxnumber[]|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param \OpenAPI\Client\Radix\Model\Faxnumber[]|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            array_push($this->openAPINullablesSetToNull, 'fax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \OpenAPI\Client\Radix\Model\Email[]|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \OpenAPI\Client\Radix\Model\Email[]|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets emailPEC
     *
     * @return string|null
     */
    public function getEmailPEC()
    {
        return $this->container['emailPEC'];
    }

    /**
     * Sets emailPEC
     *
     * @param string|null $emailPEC emailPEC
     *
     * @return self
     */
    public function setEmailPEC($emailPEC)
    {
        if (is_null($emailPEC)) {
            array_push($this->openAPINullablesSetToNull, 'emailPEC');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emailPEC', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emailPEC'] = $emailPEC;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets isoVatNumber
     *
     * @return \OpenAPI\Client\Radix\Model\IsoVatnumber|null
     */
    public function getIsoVatNumber()
    {
        return $this->container['isoVatNumber'];
    }

    /**
     * Sets isoVatNumber
     *
     * @param \OpenAPI\Client\Radix\Model\IsoVatnumber|null $isoVatNumber isoVatNumber
     *
     * @return self
     */
    public function setIsoVatNumber($isoVatNumber)
    {
        if (is_null($isoVatNumber)) {
            throw new \InvalidArgumentException('non-nullable isoVatNumber cannot be null');
        }
        $this->container['isoVatNumber'] = $isoVatNumber;

        return $this;
    }

    /**
     * Gets taxNumber
     *
     * @return string|null
     */
    public function getTaxNumber()
    {
        return $this->container['taxNumber'];
    }

    /**
     * Sets taxNumber
     *
     * @param string|null $taxNumber taxNumber
     *
     * @return self
     */
    public function setTaxNumber($taxNumber)
    {
        if (is_null($taxNumber)) {
            array_push($this->openAPINullablesSetToNull, 'taxNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxNumber'] = $taxNumber;

        return $this;
    }

    /**
     * Gets freighter
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getFreighter()
    {
        return $this->container['freighter'];
    }

    /**
     * Sets freighter
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $freighter freighter
     *
     * @return self
     */
    public function setFreighter($freighter)
    {
        if (is_null($freighter)) {
            throw new \InvalidArgumentException('non-nullable freighter cannot be null');
        }
        $this->container['freighter'] = $freighter;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets mapLat
     *
     * @return float|null
     */
    public function getMapLat()
    {
        return $this->container['mapLat'];
    }

    /**
     * Sets mapLat
     *
     * @param float|null $mapLat mapLat
     *
     * @return self
     */
    public function setMapLat($mapLat)
    {
        if (is_null($mapLat)) {
            throw new \InvalidArgumentException('non-nullable mapLat cannot be null');
        }
        $this->container['mapLat'] = $mapLat;

        return $this;
    }

    /**
     * Gets mapLong
     *
     * @return float|null
     */
    public function getMapLong()
    {
        return $this->container['mapLong'];
    }

    /**
     * Sets mapLong
     *
     * @param float|null $mapLong mapLong
     *
     * @return self
     */
    public function setMapLong($mapLong)
    {
        if (is_null($mapLong)) {
            throw new \InvalidArgumentException('non-nullable mapLong cannot be null');
        }
        $this->container['mapLong'] = $mapLong;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            throw new \InvalidArgumentException('non-nullable area cannot be null');
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool|null
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool|null $inactive inactive
     *
     * @return self
     */
    public function setInactive($inactive)
    {
        if (is_null($inactive)) {
            throw new \InvalidArgumentException('non-nullable inactive cannot be null');
        }
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets lockedSince
     *
     * @return \DateTime|null
     */
    public function getLockedSince()
    {
        return $this->container['lockedSince'];
    }

    /**
     * Sets lockedSince
     *
     * @param \DateTime|null $lockedSince lockedSince
     *
     * @return self
     */
    public function setLockedSince($lockedSince)
    {
        if (is_null($lockedSince)) {
            array_push($this->openAPINullablesSetToNull, 'lockedSince');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lockedSince', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lockedSince'] = $lockedSince;

        return $this;
    }

    /**
     * Gets supplierId
     *
     * @return string|null
     */
    public function getSupplierId()
    {
        return $this->container['supplierId'];
    }

    /**
     * Sets supplierId
     *
     * @param string|null $supplierId supplierId
     *
     * @return self
     */
    public function setSupplierId($supplierId)
    {
        if (is_null($supplierId)) {
            array_push($this->openAPINullablesSetToNull, 'supplierId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplierId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplierId'] = $supplierId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


