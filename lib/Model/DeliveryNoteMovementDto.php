<?php
/**
 * DeliveryNoteMovementDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Model;

use \ArrayAccess;
use \OpenAPI\Client\Radix\ObjectSerializer;

/**
 * DeliveryNoteMovementDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeliveryNoteMovementDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeliveryNoteMovementDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'deliveryNoteId' => 'string',
        'position' => 'int',
        'article' => '\OpenAPI\Client\Radix\Model\IdCode',
        'measurementUnit' => '\OpenAPI\Client\Radix\Model\IdCode',
        'description' => 'string',
        'quantity' => 'float',
        'price' => 'float',
        'priceUnit' => 'int',
        'discount1' => 'float',
        'discount2' => 'float',
        'discount3' => 'float',
        'discount4' => 'float',
        'discount5' => 'float',
        'amount' => 'float',
        'amountIncludingVat' => 'float',
        'vat' => '\OpenAPI\Client\Radix\Model\IdCode',
        'comment' => 'string',
        'print' => 'bool',
        'printPrice' => 'bool',
        'weight' => 'float',
        'weightUnit' => 'int',
        'materialDiscountType' => '\OpenAPI\Client\Radix\Model\MaterialDiscountType',
        'accountId' => 'string',
        'costLevelId' => 'string',
        'costTypeId' => 'string',
        'costUnitId' => 'string',
        'sumRow' => 'bool',
        'limitAccrualDateFrom' => '\DateTime',
        'limitAccrualDateUntil' => '\DateTime',
        'parentSerialNumber' => '\OpenAPI\Client\Radix\Model\IdCode',
        'optionFields' => '\OpenAPI\Client\Radix\Model\OptionfieldDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'deliveryNoteId' => null,
        'position' => 'int32',
        'article' => null,
        'measurementUnit' => null,
        'description' => null,
        'quantity' => 'double',
        'price' => 'double',
        'priceUnit' => 'int32',
        'discount1' => 'double',
        'discount2' => 'double',
        'discount3' => 'double',
        'discount4' => 'double',
        'discount5' => 'double',
        'amount' => 'double',
        'amountIncludingVat' => 'double',
        'vat' => null,
        'comment' => null,
        'print' => null,
        'printPrice' => null,
        'weight' => 'double',
        'weightUnit' => 'int32',
        'materialDiscountType' => null,
        'accountId' => null,
        'costLevelId' => null,
        'costTypeId' => null,
        'costUnitId' => null,
        'sumRow' => null,
        'limitAccrualDateFrom' => 'date-time',
        'limitAccrualDateUntil' => 'date-time',
        'parentSerialNumber' => null,
        'optionFields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'deliveryNoteId' => true,
        'position' => false,
        'article' => false,
        'measurementUnit' => false,
        'description' => true,
        'quantity' => false,
        'price' => false,
        'priceUnit' => false,
        'discount1' => false,
        'discount2' => false,
        'discount3' => false,
        'discount4' => false,
        'discount5' => false,
        'amount' => false,
        'amountIncludingVat' => false,
        'vat' => false,
        'comment' => true,
        'print' => false,
        'printPrice' => false,
        'weight' => false,
        'weightUnit' => false,
        'materialDiscountType' => false,
        'accountId' => true,
        'costLevelId' => true,
        'costTypeId' => true,
        'costUnitId' => true,
        'sumRow' => false,
        'limitAccrualDateFrom' => true,
        'limitAccrualDateUntil' => true,
        'parentSerialNumber' => false,
        'optionFields' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'deliveryNoteId' => 'deliveryNoteId',
        'position' => 'position',
        'article' => 'article',
        'measurementUnit' => 'measurementUnit',
        'description' => 'description',
        'quantity' => 'quantity',
        'price' => 'price',
        'priceUnit' => 'priceUnit',
        'discount1' => 'discount1',
        'discount2' => 'discount2',
        'discount3' => 'discount3',
        'discount4' => 'discount4',
        'discount5' => 'discount5',
        'amount' => 'amount',
        'amountIncludingVat' => 'amountIncludingVat',
        'vat' => 'vat',
        'comment' => 'comment',
        'print' => 'print',
        'printPrice' => 'printPrice',
        'weight' => 'weight',
        'weightUnit' => 'weightUnit',
        'materialDiscountType' => 'materialDiscountType',
        'accountId' => 'accountId',
        'costLevelId' => 'costLevelId',
        'costTypeId' => 'costTypeId',
        'costUnitId' => 'costUnitId',
        'sumRow' => 'sumRow',
        'limitAccrualDateFrom' => 'limitAccrualDateFrom',
        'limitAccrualDateUntil' => 'limitAccrualDateUntil',
        'parentSerialNumber' => 'parentSerialNumber',
        'optionFields' => 'optionFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'deliveryNoteId' => 'setDeliveryNoteId',
        'position' => 'setPosition',
        'article' => 'setArticle',
        'measurementUnit' => 'setMeasurementUnit',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'price' => 'setPrice',
        'priceUnit' => 'setPriceUnit',
        'discount1' => 'setDiscount1',
        'discount2' => 'setDiscount2',
        'discount3' => 'setDiscount3',
        'discount4' => 'setDiscount4',
        'discount5' => 'setDiscount5',
        'amount' => 'setAmount',
        'amountIncludingVat' => 'setAmountIncludingVat',
        'vat' => 'setVat',
        'comment' => 'setComment',
        'print' => 'setPrint',
        'printPrice' => 'setPrintPrice',
        'weight' => 'setWeight',
        'weightUnit' => 'setWeightUnit',
        'materialDiscountType' => 'setMaterialDiscountType',
        'accountId' => 'setAccountId',
        'costLevelId' => 'setCostLevelId',
        'costTypeId' => 'setCostTypeId',
        'costUnitId' => 'setCostUnitId',
        'sumRow' => 'setSumRow',
        'limitAccrualDateFrom' => 'setLimitAccrualDateFrom',
        'limitAccrualDateUntil' => 'setLimitAccrualDateUntil',
        'parentSerialNumber' => 'setParentSerialNumber',
        'optionFields' => 'setOptionFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'deliveryNoteId' => 'getDeliveryNoteId',
        'position' => 'getPosition',
        'article' => 'getArticle',
        'measurementUnit' => 'getMeasurementUnit',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'price' => 'getPrice',
        'priceUnit' => 'getPriceUnit',
        'discount1' => 'getDiscount1',
        'discount2' => 'getDiscount2',
        'discount3' => 'getDiscount3',
        'discount4' => 'getDiscount4',
        'discount5' => 'getDiscount5',
        'amount' => 'getAmount',
        'amountIncludingVat' => 'getAmountIncludingVat',
        'vat' => 'getVat',
        'comment' => 'getComment',
        'print' => 'getPrint',
        'printPrice' => 'getPrintPrice',
        'weight' => 'getWeight',
        'weightUnit' => 'getWeightUnit',
        'materialDiscountType' => 'getMaterialDiscountType',
        'accountId' => 'getAccountId',
        'costLevelId' => 'getCostLevelId',
        'costTypeId' => 'getCostTypeId',
        'costUnitId' => 'getCostUnitId',
        'sumRow' => 'getSumRow',
        'limitAccrualDateFrom' => 'getLimitAccrualDateFrom',
        'limitAccrualDateUntil' => 'getLimitAccrualDateUntil',
        'parentSerialNumber' => 'getParentSerialNumber',
        'optionFields' => 'getOptionFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('deliveryNoteId', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('article', $data ?? [], null);
        $this->setIfExists('measurementUnit', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('priceUnit', $data ?? [], null);
        $this->setIfExists('discount1', $data ?? [], null);
        $this->setIfExists('discount2', $data ?? [], null);
        $this->setIfExists('discount3', $data ?? [], null);
        $this->setIfExists('discount4', $data ?? [], null);
        $this->setIfExists('discount5', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amountIncludingVat', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('print', $data ?? [], null);
        $this->setIfExists('printPrice', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weightUnit', $data ?? [], null);
        $this->setIfExists('materialDiscountType', $data ?? [], null);
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('costLevelId', $data ?? [], null);
        $this->setIfExists('costTypeId', $data ?? [], null);
        $this->setIfExists('costUnitId', $data ?? [], null);
        $this->setIfExists('sumRow', $data ?? [], null);
        $this->setIfExists('limitAccrualDateFrom', $data ?? [], null);
        $this->setIfExists('limitAccrualDateUntil', $data ?? [], null);
        $this->setIfExists('parentSerialNumber', $data ?? [], null);
        $this->setIfExists('optionFields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets deliveryNoteId
     *
     * @return string|null
     */
    public function getDeliveryNoteId()
    {
        return $this->container['deliveryNoteId'];
    }

    /**
     * Sets deliveryNoteId
     *
     * @param string|null $deliveryNoteId deliveryNoteId
     *
     * @return self
     */
    public function setDeliveryNoteId($deliveryNoteId)
    {
        if (is_null($deliveryNoteId)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryNoteId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryNoteId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryNoteId'] = $deliveryNoteId;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets article
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getArticle()
    {
        return $this->container['article'];
    }

    /**
     * Sets article
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $article article
     *
     * @return self
     */
    public function setArticle($article)
    {
        if (is_null($article)) {
            throw new \InvalidArgumentException('non-nullable article cannot be null');
        }
        $this->container['article'] = $article;

        return $this;
    }

    /**
     * Gets measurementUnit
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getMeasurementUnit()
    {
        return $this->container['measurementUnit'];
    }

    /**
     * Sets measurementUnit
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $measurementUnit measurementUnit
     *
     * @return self
     */
    public function setMeasurementUnit($measurementUnit)
    {
        if (is_null($measurementUnit)) {
            throw new \InvalidArgumentException('non-nullable measurementUnit cannot be null');
        }
        $this->container['measurementUnit'] = $measurementUnit;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priceUnit
     *
     * @return int|null
     */
    public function getPriceUnit()
    {
        return $this->container['priceUnit'];
    }

    /**
     * Sets priceUnit
     *
     * @param int|null $priceUnit priceUnit
     *
     * @return self
     */
    public function setPriceUnit($priceUnit)
    {
        if (is_null($priceUnit)) {
            throw new \InvalidArgumentException('non-nullable priceUnit cannot be null');
        }
        $this->container['priceUnit'] = $priceUnit;

        return $this;
    }

    /**
     * Gets discount1
     *
     * @return float|null
     */
    public function getDiscount1()
    {
        return $this->container['discount1'];
    }

    /**
     * Sets discount1
     *
     * @param float|null $discount1 discount1
     *
     * @return self
     */
    public function setDiscount1($discount1)
    {
        if (is_null($discount1)) {
            throw new \InvalidArgumentException('non-nullable discount1 cannot be null');
        }
        $this->container['discount1'] = $discount1;

        return $this;
    }

    /**
     * Gets discount2
     *
     * @return float|null
     */
    public function getDiscount2()
    {
        return $this->container['discount2'];
    }

    /**
     * Sets discount2
     *
     * @param float|null $discount2 discount2
     *
     * @return self
     */
    public function setDiscount2($discount2)
    {
        if (is_null($discount2)) {
            throw new \InvalidArgumentException('non-nullable discount2 cannot be null');
        }
        $this->container['discount2'] = $discount2;

        return $this;
    }

    /**
     * Gets discount3
     *
     * @return float|null
     */
    public function getDiscount3()
    {
        return $this->container['discount3'];
    }

    /**
     * Sets discount3
     *
     * @param float|null $discount3 discount3
     *
     * @return self
     */
    public function setDiscount3($discount3)
    {
        if (is_null($discount3)) {
            throw new \InvalidArgumentException('non-nullable discount3 cannot be null');
        }
        $this->container['discount3'] = $discount3;

        return $this;
    }

    /**
     * Gets discount4
     *
     * @return float|null
     */
    public function getDiscount4()
    {
        return $this->container['discount4'];
    }

    /**
     * Sets discount4
     *
     * @param float|null $discount4 discount4
     *
     * @return self
     */
    public function setDiscount4($discount4)
    {
        if (is_null($discount4)) {
            throw new \InvalidArgumentException('non-nullable discount4 cannot be null');
        }
        $this->container['discount4'] = $discount4;

        return $this;
    }

    /**
     * Gets discount5
     *
     * @return float|null
     */
    public function getDiscount5()
    {
        return $this->container['discount5'];
    }

    /**
     * Sets discount5
     *
     * @param float|null $discount5 discount5
     *
     * @return self
     */
    public function setDiscount5($discount5)
    {
        if (is_null($discount5)) {
            throw new \InvalidArgumentException('non-nullable discount5 cannot be null');
        }
        $this->container['discount5'] = $discount5;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amountIncludingVat
     *
     * @return float|null
     */
    public function getAmountIncludingVat()
    {
        return $this->container['amountIncludingVat'];
    }

    /**
     * Sets amountIncludingVat
     *
     * @param float|null $amountIncludingVat amountIncludingVat
     *
     * @return self
     */
    public function setAmountIncludingVat($amountIncludingVat)
    {
        if (is_null($amountIncludingVat)) {
            throw new \InvalidArgumentException('non-nullable amountIncludingVat cannot be null');
        }
        $this->container['amountIncludingVat'] = $amountIncludingVat;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $vat vat
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets print
     *
     * @return bool|null
     */
    public function getPrint()
    {
        return $this->container['print'];
    }

    /**
     * Sets print
     *
     * @param bool|null $print print
     *
     * @return self
     */
    public function setPrint($print)
    {
        if (is_null($print)) {
            throw new \InvalidArgumentException('non-nullable print cannot be null');
        }
        $this->container['print'] = $print;

        return $this;
    }

    /**
     * Gets printPrice
     *
     * @return bool|null
     */
    public function getPrintPrice()
    {
        return $this->container['printPrice'];
    }

    /**
     * Sets printPrice
     *
     * @param bool|null $printPrice printPrice
     *
     * @return self
     */
    public function setPrintPrice($printPrice)
    {
        if (is_null($printPrice)) {
            throw new \InvalidArgumentException('non-nullable printPrice cannot be null');
        }
        $this->container['printPrice'] = $printPrice;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weightUnit
     *
     * @return int|null
     */
    public function getWeightUnit()
    {
        return $this->container['weightUnit'];
    }

    /**
     * Sets weightUnit
     *
     * @param int|null $weightUnit weightUnit
     *
     * @return self
     */
    public function setWeightUnit($weightUnit)
    {
        if (is_null($weightUnit)) {
            throw new \InvalidArgumentException('non-nullable weightUnit cannot be null');
        }
        $this->container['weightUnit'] = $weightUnit;

        return $this;
    }

    /**
     * Gets materialDiscountType
     *
     * @return \OpenAPI\Client\Radix\Model\MaterialDiscountType|null
     */
    public function getMaterialDiscountType()
    {
        return $this->container['materialDiscountType'];
    }

    /**
     * Sets materialDiscountType
     *
     * @param \OpenAPI\Client\Radix\Model\MaterialDiscountType|null $materialDiscountType materialDiscountType
     *
     * @return self
     */
    public function setMaterialDiscountType($materialDiscountType)
    {
        if (is_null($materialDiscountType)) {
            throw new \InvalidArgumentException('non-nullable materialDiscountType cannot be null');
        }
        $this->container['materialDiscountType'] = $materialDiscountType;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string|null $accountId accountId
     *
     * @return self
     */
    public function setAccountId($accountId)
    {
        if (is_null($accountId)) {
            array_push($this->openAPINullablesSetToNull, 'accountId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets costLevelId
     *
     * @return string|null
     */
    public function getCostLevelId()
    {
        return $this->container['costLevelId'];
    }

    /**
     * Sets costLevelId
     *
     * @param string|null $costLevelId costLevelId
     *
     * @return self
     */
    public function setCostLevelId($costLevelId)
    {
        if (is_null($costLevelId)) {
            array_push($this->openAPINullablesSetToNull, 'costLevelId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costLevelId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costLevelId'] = $costLevelId;

        return $this;
    }

    /**
     * Gets costTypeId
     *
     * @return string|null
     */
    public function getCostTypeId()
    {
        return $this->container['costTypeId'];
    }

    /**
     * Sets costTypeId
     *
     * @param string|null $costTypeId costTypeId
     *
     * @return self
     */
    public function setCostTypeId($costTypeId)
    {
        if (is_null($costTypeId)) {
            array_push($this->openAPINullablesSetToNull, 'costTypeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costTypeId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costTypeId'] = $costTypeId;

        return $this;
    }

    /**
     * Gets costUnitId
     *
     * @return string|null
     */
    public function getCostUnitId()
    {
        return $this->container['costUnitId'];
    }

    /**
     * Sets costUnitId
     *
     * @param string|null $costUnitId costUnitId
     *
     * @return self
     */
    public function setCostUnitId($costUnitId)
    {
        if (is_null($costUnitId)) {
            array_push($this->openAPINullablesSetToNull, 'costUnitId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('costUnitId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['costUnitId'] = $costUnitId;

        return $this;
    }

    /**
     * Gets sumRow
     *
     * @return bool|null
     */
    public function getSumRow()
    {
        return $this->container['sumRow'];
    }

    /**
     * Sets sumRow
     *
     * @param bool|null $sumRow sumRow
     *
     * @return self
     */
    public function setSumRow($sumRow)
    {
        if (is_null($sumRow)) {
            throw new \InvalidArgumentException('non-nullable sumRow cannot be null');
        }
        $this->container['sumRow'] = $sumRow;

        return $this;
    }

    /**
     * Gets limitAccrualDateFrom
     *
     * @return \DateTime|null
     */
    public function getLimitAccrualDateFrom()
    {
        return $this->container['limitAccrualDateFrom'];
    }

    /**
     * Sets limitAccrualDateFrom
     *
     * @param \DateTime|null $limitAccrualDateFrom limitAccrualDateFrom
     *
     * @return self
     */
    public function setLimitAccrualDateFrom($limitAccrualDateFrom)
    {
        if (is_null($limitAccrualDateFrom)) {
            array_push($this->openAPINullablesSetToNull, 'limitAccrualDateFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limitAccrualDateFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['limitAccrualDateFrom'] = $limitAccrualDateFrom;

        return $this;
    }

    /**
     * Gets limitAccrualDateUntil
     *
     * @return \DateTime|null
     */
    public function getLimitAccrualDateUntil()
    {
        return $this->container['limitAccrualDateUntil'];
    }

    /**
     * Sets limitAccrualDateUntil
     *
     * @param \DateTime|null $limitAccrualDateUntil limitAccrualDateUntil
     *
     * @return self
     */
    public function setLimitAccrualDateUntil($limitAccrualDateUntil)
    {
        if (is_null($limitAccrualDateUntil)) {
            array_push($this->openAPINullablesSetToNull, 'limitAccrualDateUntil');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limitAccrualDateUntil', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['limitAccrualDateUntil'] = $limitAccrualDateUntil;

        return $this;
    }

    /**
     * Gets parentSerialNumber
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getParentSerialNumber()
    {
        return $this->container['parentSerialNumber'];
    }

    /**
     * Sets parentSerialNumber
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $parentSerialNumber parentSerialNumber
     *
     * @return self
     */
    public function setParentSerialNumber($parentSerialNumber)
    {
        if (is_null($parentSerialNumber)) {
            throw new \InvalidArgumentException('non-nullable parentSerialNumber cannot be null');
        }
        $this->container['parentSerialNumber'] = $parentSerialNumber;

        return $this;
    }

    /**
     * Gets optionFields
     *
     * @return \OpenAPI\Client\Radix\Model\OptionfieldDto[]|null
     */
    public function getOptionFields()
    {
        return $this->container['optionFields'];
    }

    /**
     * Sets optionFields
     *
     * @param \OpenAPI\Client\Radix\Model\OptionfieldDto[]|null $optionFields optionFields
     *
     * @return self
     */
    public function setOptionFields($optionFields)
    {
        if (is_null($optionFields)) {
            array_push($this->openAPINullablesSetToNull, 'optionFields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('optionFields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['optionFields'] = $optionFields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


