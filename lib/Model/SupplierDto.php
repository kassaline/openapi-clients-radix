<?php
/**
 * SupplierDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Model;

use \ArrayAccess;
use \OpenAPI\Client\Radix\ObjectSerializer;

/**
 * SupplierDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupplierDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SupplierDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'supplierId' => 'string',
        'addressId' => 'string',
        'number' => 'int',
        'description' => 'string',
        'description2' => 'string',
        'street' => 'string',
        'streetNumber' => 'string',
        'postalCode' => 'string',
        'town' => 'string',
        'province' => 'string',
        'country' => 'string',
        'salutation' => 'string',
        'currency' => 'string',
        'language' => 'string',
        'isoVatNumber' => '\OpenAPI\Client\Radix\Model\IsoVatnumber',
        'taxNumber' => 'string',
        'email' => '\OpenAPI\Client\Radix\Model\Email[]',
        'phone' => '\OpenAPI\Client\Radix\Model\Phonenumber[]',
        'fax' => '\OpenAPI\Client\Radix\Model\Faxnumber[]',
        'legalForm' => '\OpenAPI\Client\Radix\Model\Legalformtype',
        'origin' => '\OpenAPI\Client\Radix\Model\Origintype',
        'vatCalculation' => '\OpenAPI\Client\Radix\Model\VatCalculationtype',
        'bank' => '\OpenAPI\Client\Radix\Model\IdCodeDescription',
        'iban' => 'string',
        'mod770PhysicalPerson' => 'bool',
        'mod770NonResident' => 'bool',
        'mod770CountryOfBirth' => 'string',
        'mod770Lastname' => 'string',
        'mod770Name' => 'string',
        'mod770Gender' => '\OpenAPI\Client\Radix\Model\Gendertype',
        'mod770Birthdate' => '\DateTime',
        'mod770Birthplace' => 'string',
        'mod770ProvinceOfBirth' => 'string',
        'mod770Street' => 'string',
        'mod770PostalCode' => 'string',
        'mod770Town' => 'string',
        'mod770Province' => 'string',
        'mod770Country' => 'string',
        'mod770CountryFiscalCode' => 'string',
        'mod770CollaborationType' => '\OpenAPI\Client\Radix\Model\Collaborationtype',
        'mod770InputTaxType' => '\OpenAPI\Client\Radix\Model\Inputtaxtype',
        'mod770Reason' => 'string',
        'mod770Code' => 'string',
        'mod770CompulsoryContributionType' => '\OpenAPI\Client\Radix\Model\CompulsoryContributiontype',
        'emailPEC' => 'string',
        'url' => 'string',
        'paymentMethod' => '\OpenAPI\Client\Radix\Model\IdCode',
        'note' => 'string',
        'abc' => 'string',
        'since' => '\DateTime',
        'minimalAmountOfPurchase' => 'float',
        'deliveryDays' => 'int',
        'deliveryBufferDays' => 'int',
        'lockedSince' => '\DateTime',
        'inactive' => 'bool',
        'createDate' => '\DateTime',
        'updateDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'supplierId' => null,
        'addressId' => null,
        'number' => 'int64',
        'description' => null,
        'description2' => null,
        'street' => null,
        'streetNumber' => null,
        'postalCode' => null,
        'town' => null,
        'province' => null,
        'country' => null,
        'salutation' => null,
        'currency' => null,
        'language' => null,
        'isoVatNumber' => null,
        'taxNumber' => null,
        'email' => null,
        'phone' => null,
        'fax' => null,
        'legalForm' => null,
        'origin' => null,
        'vatCalculation' => null,
        'bank' => null,
        'iban' => null,
        'mod770PhysicalPerson' => null,
        'mod770NonResident' => null,
        'mod770CountryOfBirth' => null,
        'mod770Lastname' => null,
        'mod770Name' => null,
        'mod770Gender' => null,
        'mod770Birthdate' => 'date-time',
        'mod770Birthplace' => null,
        'mod770ProvinceOfBirth' => null,
        'mod770Street' => null,
        'mod770PostalCode' => null,
        'mod770Town' => null,
        'mod770Province' => null,
        'mod770Country' => null,
        'mod770CountryFiscalCode' => null,
        'mod770CollaborationType' => null,
        'mod770InputTaxType' => null,
        'mod770Reason' => null,
        'mod770Code' => null,
        'mod770CompulsoryContributionType' => null,
        'emailPEC' => null,
        'url' => null,
        'paymentMethod' => null,
        'note' => null,
        'abc' => null,
        'since' => 'date-time',
        'minimalAmountOfPurchase' => 'double',
        'deliveryDays' => 'int32',
        'deliveryBufferDays' => 'int32',
        'lockedSince' => 'date-time',
        'inactive' => null,
        'createDate' => 'date-time',
        'updateDate' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'supplierId' => true,
        'addressId' => true,
        'number' => false,
        'description' => true,
        'description2' => true,
        'street' => true,
        'streetNumber' => true,
        'postalCode' => true,
        'town' => true,
        'province' => true,
        'country' => true,
        'salutation' => true,
        'currency' => true,
        'language' => true,
        'isoVatNumber' => false,
        'taxNumber' => true,
        'email' => true,
        'phone' => true,
        'fax' => true,
        'legalForm' => false,
        'origin' => false,
        'vatCalculation' => false,
        'bank' => false,
        'iban' => true,
        'mod770PhysicalPerson' => false,
        'mod770NonResident' => false,
        'mod770CountryOfBirth' => true,
        'mod770Lastname' => true,
        'mod770Name' => true,
        'mod770Gender' => false,
        'mod770Birthdate' => true,
        'mod770Birthplace' => true,
        'mod770ProvinceOfBirth' => true,
        'mod770Street' => true,
        'mod770PostalCode' => true,
        'mod770Town' => true,
        'mod770Province' => true,
        'mod770Country' => true,
        'mod770CountryFiscalCode' => true,
        'mod770CollaborationType' => false,
        'mod770InputTaxType' => false,
        'mod770Reason' => true,
        'mod770Code' => true,
        'mod770CompulsoryContributionType' => false,
        'emailPEC' => true,
        'url' => true,
        'paymentMethod' => false,
        'note' => true,
        'abc' => true,
        'since' => true,
        'minimalAmountOfPurchase' => true,
        'deliveryDays' => true,
        'deliveryBufferDays' => true,
        'lockedSince' => true,
        'inactive' => true,
        'createDate' => true,
        'updateDate' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supplierId' => 'supplierId',
        'addressId' => 'addressId',
        'number' => 'number',
        'description' => 'description',
        'description2' => 'description2',
        'street' => 'street',
        'streetNumber' => 'streetNumber',
        'postalCode' => 'postalCode',
        'town' => 'town',
        'province' => 'province',
        'country' => 'country',
        'salutation' => 'salutation',
        'currency' => 'currency',
        'language' => 'language',
        'isoVatNumber' => 'isoVatNumber',
        'taxNumber' => 'taxNumber',
        'email' => 'email',
        'phone' => 'phone',
        'fax' => 'fax',
        'legalForm' => 'legalForm',
        'origin' => 'origin',
        'vatCalculation' => 'vatCalculation',
        'bank' => 'bank',
        'iban' => 'iban',
        'mod770PhysicalPerson' => 'mod770PhysicalPerson',
        'mod770NonResident' => 'mod770NonResident',
        'mod770CountryOfBirth' => 'mod770CountryOfBirth',
        'mod770Lastname' => 'mod770Lastname',
        'mod770Name' => 'mod770Name',
        'mod770Gender' => 'mod770Gender',
        'mod770Birthdate' => 'mod770Birthdate',
        'mod770Birthplace' => 'mod770Birthplace',
        'mod770ProvinceOfBirth' => 'mod770ProvinceOfBirth',
        'mod770Street' => 'mod770Street',
        'mod770PostalCode' => 'mod770PostalCode',
        'mod770Town' => 'mod770Town',
        'mod770Province' => 'mod770Province',
        'mod770Country' => 'mod770Country',
        'mod770CountryFiscalCode' => 'mod770CountryFiscalCode',
        'mod770CollaborationType' => 'mod770CollaborationType',
        'mod770InputTaxType' => 'mod770InputTaxType',
        'mod770Reason' => 'mod770Reason',
        'mod770Code' => 'mod770Code',
        'mod770CompulsoryContributionType' => 'mod770CompulsoryContributionType',
        'emailPEC' => 'emailPEC',
        'url' => 'url',
        'paymentMethod' => 'paymentMethod',
        'note' => 'note',
        'abc' => 'abc',
        'since' => 'since',
        'minimalAmountOfPurchase' => 'minimalAmountOfPurchase',
        'deliveryDays' => 'deliveryDays',
        'deliveryBufferDays' => 'deliveryBufferDays',
        'lockedSince' => 'lockedSince',
        'inactive' => 'inactive',
        'createDate' => 'createDate',
        'updateDate' => 'updateDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supplierId' => 'setSupplierId',
        'addressId' => 'setAddressId',
        'number' => 'setNumber',
        'description' => 'setDescription',
        'description2' => 'setDescription2',
        'street' => 'setStreet',
        'streetNumber' => 'setStreetNumber',
        'postalCode' => 'setPostalCode',
        'town' => 'setTown',
        'province' => 'setProvince',
        'country' => 'setCountry',
        'salutation' => 'setSalutation',
        'currency' => 'setCurrency',
        'language' => 'setLanguage',
        'isoVatNumber' => 'setIsoVatNumber',
        'taxNumber' => 'setTaxNumber',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'legalForm' => 'setLegalForm',
        'origin' => 'setOrigin',
        'vatCalculation' => 'setVatCalculation',
        'bank' => 'setBank',
        'iban' => 'setIban',
        'mod770PhysicalPerson' => 'setMod770PhysicalPerson',
        'mod770NonResident' => 'setMod770NonResident',
        'mod770CountryOfBirth' => 'setMod770CountryOfBirth',
        'mod770Lastname' => 'setMod770Lastname',
        'mod770Name' => 'setMod770Name',
        'mod770Gender' => 'setMod770Gender',
        'mod770Birthdate' => 'setMod770Birthdate',
        'mod770Birthplace' => 'setMod770Birthplace',
        'mod770ProvinceOfBirth' => 'setMod770ProvinceOfBirth',
        'mod770Street' => 'setMod770Street',
        'mod770PostalCode' => 'setMod770PostalCode',
        'mod770Town' => 'setMod770Town',
        'mod770Province' => 'setMod770Province',
        'mod770Country' => 'setMod770Country',
        'mod770CountryFiscalCode' => 'setMod770CountryFiscalCode',
        'mod770CollaborationType' => 'setMod770CollaborationType',
        'mod770InputTaxType' => 'setMod770InputTaxType',
        'mod770Reason' => 'setMod770Reason',
        'mod770Code' => 'setMod770Code',
        'mod770CompulsoryContributionType' => 'setMod770CompulsoryContributionType',
        'emailPEC' => 'setEmailPEC',
        'url' => 'setUrl',
        'paymentMethod' => 'setPaymentMethod',
        'note' => 'setNote',
        'abc' => 'setAbc',
        'since' => 'setSince',
        'minimalAmountOfPurchase' => 'setMinimalAmountOfPurchase',
        'deliveryDays' => 'setDeliveryDays',
        'deliveryBufferDays' => 'setDeliveryBufferDays',
        'lockedSince' => 'setLockedSince',
        'inactive' => 'setInactive',
        'createDate' => 'setCreateDate',
        'updateDate' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supplierId' => 'getSupplierId',
        'addressId' => 'getAddressId',
        'number' => 'getNumber',
        'description' => 'getDescription',
        'description2' => 'getDescription2',
        'street' => 'getStreet',
        'streetNumber' => 'getStreetNumber',
        'postalCode' => 'getPostalCode',
        'town' => 'getTown',
        'province' => 'getProvince',
        'country' => 'getCountry',
        'salutation' => 'getSalutation',
        'currency' => 'getCurrency',
        'language' => 'getLanguage',
        'isoVatNumber' => 'getIsoVatNumber',
        'taxNumber' => 'getTaxNumber',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'legalForm' => 'getLegalForm',
        'origin' => 'getOrigin',
        'vatCalculation' => 'getVatCalculation',
        'bank' => 'getBank',
        'iban' => 'getIban',
        'mod770PhysicalPerson' => 'getMod770PhysicalPerson',
        'mod770NonResident' => 'getMod770NonResident',
        'mod770CountryOfBirth' => 'getMod770CountryOfBirth',
        'mod770Lastname' => 'getMod770Lastname',
        'mod770Name' => 'getMod770Name',
        'mod770Gender' => 'getMod770Gender',
        'mod770Birthdate' => 'getMod770Birthdate',
        'mod770Birthplace' => 'getMod770Birthplace',
        'mod770ProvinceOfBirth' => 'getMod770ProvinceOfBirth',
        'mod770Street' => 'getMod770Street',
        'mod770PostalCode' => 'getMod770PostalCode',
        'mod770Town' => 'getMod770Town',
        'mod770Province' => 'getMod770Province',
        'mod770Country' => 'getMod770Country',
        'mod770CountryFiscalCode' => 'getMod770CountryFiscalCode',
        'mod770CollaborationType' => 'getMod770CollaborationType',
        'mod770InputTaxType' => 'getMod770InputTaxType',
        'mod770Reason' => 'getMod770Reason',
        'mod770Code' => 'getMod770Code',
        'mod770CompulsoryContributionType' => 'getMod770CompulsoryContributionType',
        'emailPEC' => 'getEmailPEC',
        'url' => 'getUrl',
        'paymentMethod' => 'getPaymentMethod',
        'note' => 'getNote',
        'abc' => 'getAbc',
        'since' => 'getSince',
        'minimalAmountOfPurchase' => 'getMinimalAmountOfPurchase',
        'deliveryDays' => 'getDeliveryDays',
        'deliveryBufferDays' => 'getDeliveryBufferDays',
        'lockedSince' => 'getLockedSince',
        'inactive' => 'getInactive',
        'createDate' => 'getCreateDate',
        'updateDate' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('supplierId', $data ?? [], null);
        $this->setIfExists('addressId', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('description2', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('streetNumber', $data ?? [], null);
        $this->setIfExists('postalCode', $data ?? [], null);
        $this->setIfExists('town', $data ?? [], null);
        $this->setIfExists('province', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('salutation', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('isoVatNumber', $data ?? [], null);
        $this->setIfExists('taxNumber', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('legalForm', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('vatCalculation', $data ?? [], null);
        $this->setIfExists('bank', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('mod770PhysicalPerson', $data ?? [], null);
        $this->setIfExists('mod770NonResident', $data ?? [], null);
        $this->setIfExists('mod770CountryOfBirth', $data ?? [], null);
        $this->setIfExists('mod770Lastname', $data ?? [], null);
        $this->setIfExists('mod770Name', $data ?? [], null);
        $this->setIfExists('mod770Gender', $data ?? [], null);
        $this->setIfExists('mod770Birthdate', $data ?? [], null);
        $this->setIfExists('mod770Birthplace', $data ?? [], null);
        $this->setIfExists('mod770ProvinceOfBirth', $data ?? [], null);
        $this->setIfExists('mod770Street', $data ?? [], null);
        $this->setIfExists('mod770PostalCode', $data ?? [], null);
        $this->setIfExists('mod770Town', $data ?? [], null);
        $this->setIfExists('mod770Province', $data ?? [], null);
        $this->setIfExists('mod770Country', $data ?? [], null);
        $this->setIfExists('mod770CountryFiscalCode', $data ?? [], null);
        $this->setIfExists('mod770CollaborationType', $data ?? [], null);
        $this->setIfExists('mod770InputTaxType', $data ?? [], null);
        $this->setIfExists('mod770Reason', $data ?? [], null);
        $this->setIfExists('mod770Code', $data ?? [], null);
        $this->setIfExists('mod770CompulsoryContributionType', $data ?? [], null);
        $this->setIfExists('emailPEC', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('abc', $data ?? [], null);
        $this->setIfExists('since', $data ?? [], null);
        $this->setIfExists('minimalAmountOfPurchase', $data ?? [], null);
        $this->setIfExists('deliveryDays', $data ?? [], null);
        $this->setIfExists('deliveryBufferDays', $data ?? [], null);
        $this->setIfExists('lockedSince', $data ?? [], null);
        $this->setIfExists('inactive', $data ?? [], null);
        $this->setIfExists('createDate', $data ?? [], null);
        $this->setIfExists('updateDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supplierId
     *
     * @return string|null
     */
    public function getSupplierId()
    {
        return $this->container['supplierId'];
    }

    /**
     * Sets supplierId
     *
     * @param string|null $supplierId supplierId
     *
     * @return self
     */
    public function setSupplierId($supplierId)
    {
        if (is_null($supplierId)) {
            array_push($this->openAPINullablesSetToNull, 'supplierId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplierId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplierId'] = $supplierId;

        return $this;
    }

    /**
     * Gets addressId
     *
     * @return string|null
     */
    public function getAddressId()
    {
        return $this->container['addressId'];
    }

    /**
     * Sets addressId
     *
     * @param string|null $addressId addressId
     *
     * @return self
     */
    public function setAddressId($addressId)
    {
        if (is_null($addressId)) {
            array_push($this->openAPINullablesSetToNull, 'addressId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addressId'] = $addressId;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description2
     *
     * @return string|null
     */
    public function getDescription2()
    {
        return $this->container['description2'];
    }

    /**
     * Sets description2
     *
     * @param string|null $description2 description2
     *
     * @return self
     */
    public function setDescription2($description2)
    {
        if (is_null($description2)) {
            array_push($this->openAPINullablesSetToNull, 'description2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description2'] = $description2;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            array_push($this->openAPINullablesSetToNull, 'street');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets streetNumber
     *
     * @return string|null
     */
    public function getStreetNumber()
    {
        return $this->container['streetNumber'];
    }

    /**
     * Sets streetNumber
     *
     * @param string|null $streetNumber streetNumber
     *
     * @return self
     */
    public function setStreetNumber($streetNumber)
    {
        if (is_null($streetNumber)) {
            array_push($this->openAPINullablesSetToNull, 'streetNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('streetNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['streetNumber'] = $streetNumber;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode postalCode
     *
     * @return self
     */
    public function setPostalCode($postalCode)
    {
        if (is_null($postalCode)) {
            array_push($this->openAPINullablesSetToNull, 'postalCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postalCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string|null
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string|null $town town
     *
     * @return self
     */
    public function setTown($town)
    {
        if (is_null($town)) {
            array_push($this->openAPINullablesSetToNull, 'town');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('town', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string|null
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string|null $province province
     *
     * @return self
     */
    public function setProvince($province)
    {
        if (is_null($province)) {
            array_push($this->openAPINullablesSetToNull, 'province');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('province', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string|null
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string|null $salutation salutation
     *
     * @return self
     */
    public function setSalutation($salutation)
    {
        if (is_null($salutation)) {
            array_push($this->openAPINullablesSetToNull, 'salutation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('salutation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets isoVatNumber
     *
     * @return \OpenAPI\Client\Radix\Model\IsoVatnumber|null
     */
    public function getIsoVatNumber()
    {
        return $this->container['isoVatNumber'];
    }

    /**
     * Sets isoVatNumber
     *
     * @param \OpenAPI\Client\Radix\Model\IsoVatnumber|null $isoVatNumber isoVatNumber
     *
     * @return self
     */
    public function setIsoVatNumber($isoVatNumber)
    {
        if (is_null($isoVatNumber)) {
            throw new \InvalidArgumentException('non-nullable isoVatNumber cannot be null');
        }
        $this->container['isoVatNumber'] = $isoVatNumber;

        return $this;
    }

    /**
     * Gets taxNumber
     *
     * @return string|null
     */
    public function getTaxNumber()
    {
        return $this->container['taxNumber'];
    }

    /**
     * Sets taxNumber
     *
     * @param string|null $taxNumber taxNumber
     *
     * @return self
     */
    public function setTaxNumber($taxNumber)
    {
        if (is_null($taxNumber)) {
            array_push($this->openAPINullablesSetToNull, 'taxNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxNumber'] = $taxNumber;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \OpenAPI\Client\Radix\Model\Email[]|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \OpenAPI\Client\Radix\Model\Email[]|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \OpenAPI\Client\Radix\Model\Phonenumber[]|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \OpenAPI\Client\Radix\Model\Phonenumber[]|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return \OpenAPI\Client\Radix\Model\Faxnumber[]|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param \OpenAPI\Client\Radix\Model\Faxnumber[]|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            array_push($this->openAPINullablesSetToNull, 'fax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets legalForm
     *
     * @return \OpenAPI\Client\Radix\Model\Legalformtype|null
     */
    public function getLegalForm()
    {
        return $this->container['legalForm'];
    }

    /**
     * Sets legalForm
     *
     * @param \OpenAPI\Client\Radix\Model\Legalformtype|null $legalForm legalForm
     *
     * @return self
     */
    public function setLegalForm($legalForm)
    {
        if (is_null($legalForm)) {
            throw new \InvalidArgumentException('non-nullable legalForm cannot be null');
        }
        $this->container['legalForm'] = $legalForm;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \OpenAPI\Client\Radix\Model\Origintype|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \OpenAPI\Client\Radix\Model\Origintype|null $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets vatCalculation
     *
     * @return \OpenAPI\Client\Radix\Model\VatCalculationtype|null
     */
    public function getVatCalculation()
    {
        return $this->container['vatCalculation'];
    }

    /**
     * Sets vatCalculation
     *
     * @param \OpenAPI\Client\Radix\Model\VatCalculationtype|null $vatCalculation vatCalculation
     *
     * @return self
     */
    public function setVatCalculation($vatCalculation)
    {
        if (is_null($vatCalculation)) {
            throw new \InvalidArgumentException('non-nullable vatCalculation cannot be null');
        }
        $this->container['vatCalculation'] = $vatCalculation;

        return $this;
    }

    /**
     * Gets bank
     *
     * @return \OpenAPI\Client\Radix\Model\IdCodeDescription|null
     */
    public function getBank()
    {
        return $this->container['bank'];
    }

    /**
     * Sets bank
     *
     * @param \OpenAPI\Client\Radix\Model\IdCodeDescription|null $bank bank
     *
     * @return self
     */
    public function setBank($bank)
    {
        if (is_null($bank)) {
            throw new \InvalidArgumentException('non-nullable bank cannot be null');
        }
        $this->container['bank'] = $bank;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban iban
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            array_push($this->openAPINullablesSetToNull, 'iban');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iban', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets mod770PhysicalPerson
     *
     * @return bool|null
     */
    public function getMod770PhysicalPerson()
    {
        return $this->container['mod770PhysicalPerson'];
    }

    /**
     * Sets mod770PhysicalPerson
     *
     * @param bool|null $mod770PhysicalPerson mod770PhysicalPerson
     *
     * @return self
     */
    public function setMod770PhysicalPerson($mod770PhysicalPerson)
    {
        if (is_null($mod770PhysicalPerson)) {
            throw new \InvalidArgumentException('non-nullable mod770PhysicalPerson cannot be null');
        }
        $this->container['mod770PhysicalPerson'] = $mod770PhysicalPerson;

        return $this;
    }

    /**
     * Gets mod770NonResident
     *
     * @return bool|null
     */
    public function getMod770NonResident()
    {
        return $this->container['mod770NonResident'];
    }

    /**
     * Sets mod770NonResident
     *
     * @param bool|null $mod770NonResident mod770NonResident
     *
     * @return self
     */
    public function setMod770NonResident($mod770NonResident)
    {
        if (is_null($mod770NonResident)) {
            throw new \InvalidArgumentException('non-nullable mod770NonResident cannot be null');
        }
        $this->container['mod770NonResident'] = $mod770NonResident;

        return $this;
    }

    /**
     * Gets mod770CountryOfBirth
     *
     * @return string|null
     */
    public function getMod770CountryOfBirth()
    {
        return $this->container['mod770CountryOfBirth'];
    }

    /**
     * Sets mod770CountryOfBirth
     *
     * @param string|null $mod770CountryOfBirth mod770CountryOfBirth
     *
     * @return self
     */
    public function setMod770CountryOfBirth($mod770CountryOfBirth)
    {
        if (is_null($mod770CountryOfBirth)) {
            array_push($this->openAPINullablesSetToNull, 'mod770CountryOfBirth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770CountryOfBirth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770CountryOfBirth'] = $mod770CountryOfBirth;

        return $this;
    }

    /**
     * Gets mod770Lastname
     *
     * @return string|null
     */
    public function getMod770Lastname()
    {
        return $this->container['mod770Lastname'];
    }

    /**
     * Sets mod770Lastname
     *
     * @param string|null $mod770Lastname mod770Lastname
     *
     * @return self
     */
    public function setMod770Lastname($mod770Lastname)
    {
        if (is_null($mod770Lastname)) {
            array_push($this->openAPINullablesSetToNull, 'mod770Lastname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770Lastname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770Lastname'] = $mod770Lastname;

        return $this;
    }

    /**
     * Gets mod770Name
     *
     * @return string|null
     */
    public function getMod770Name()
    {
        return $this->container['mod770Name'];
    }

    /**
     * Sets mod770Name
     *
     * @param string|null $mod770Name mod770Name
     *
     * @return self
     */
    public function setMod770Name($mod770Name)
    {
        if (is_null($mod770Name)) {
            array_push($this->openAPINullablesSetToNull, 'mod770Name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770Name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770Name'] = $mod770Name;

        return $this;
    }

    /**
     * Gets mod770Gender
     *
     * @return \OpenAPI\Client\Radix\Model\Gendertype|null
     */
    public function getMod770Gender()
    {
        return $this->container['mod770Gender'];
    }

    /**
     * Sets mod770Gender
     *
     * @param \OpenAPI\Client\Radix\Model\Gendertype|null $mod770Gender mod770Gender
     *
     * @return self
     */
    public function setMod770Gender($mod770Gender)
    {
        if (is_null($mod770Gender)) {
            throw new \InvalidArgumentException('non-nullable mod770Gender cannot be null');
        }
        $this->container['mod770Gender'] = $mod770Gender;

        return $this;
    }

    /**
     * Gets mod770Birthdate
     *
     * @return \DateTime|null
     */
    public function getMod770Birthdate()
    {
        return $this->container['mod770Birthdate'];
    }

    /**
     * Sets mod770Birthdate
     *
     * @param \DateTime|null $mod770Birthdate mod770Birthdate
     *
     * @return self
     */
    public function setMod770Birthdate($mod770Birthdate)
    {
        if (is_null($mod770Birthdate)) {
            array_push($this->openAPINullablesSetToNull, 'mod770Birthdate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770Birthdate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770Birthdate'] = $mod770Birthdate;

        return $this;
    }

    /**
     * Gets mod770Birthplace
     *
     * @return string|null
     */
    public function getMod770Birthplace()
    {
        return $this->container['mod770Birthplace'];
    }

    /**
     * Sets mod770Birthplace
     *
     * @param string|null $mod770Birthplace mod770Birthplace
     *
     * @return self
     */
    public function setMod770Birthplace($mod770Birthplace)
    {
        if (is_null($mod770Birthplace)) {
            array_push($this->openAPINullablesSetToNull, 'mod770Birthplace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770Birthplace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770Birthplace'] = $mod770Birthplace;

        return $this;
    }

    /**
     * Gets mod770ProvinceOfBirth
     *
     * @return string|null
     */
    public function getMod770ProvinceOfBirth()
    {
        return $this->container['mod770ProvinceOfBirth'];
    }

    /**
     * Sets mod770ProvinceOfBirth
     *
     * @param string|null $mod770ProvinceOfBirth mod770ProvinceOfBirth
     *
     * @return self
     */
    public function setMod770ProvinceOfBirth($mod770ProvinceOfBirth)
    {
        if (is_null($mod770ProvinceOfBirth)) {
            array_push($this->openAPINullablesSetToNull, 'mod770ProvinceOfBirth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770ProvinceOfBirth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770ProvinceOfBirth'] = $mod770ProvinceOfBirth;

        return $this;
    }

    /**
     * Gets mod770Street
     *
     * @return string|null
     */
    public function getMod770Street()
    {
        return $this->container['mod770Street'];
    }

    /**
     * Sets mod770Street
     *
     * @param string|null $mod770Street mod770Street
     *
     * @return self
     */
    public function setMod770Street($mod770Street)
    {
        if (is_null($mod770Street)) {
            array_push($this->openAPINullablesSetToNull, 'mod770Street');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770Street', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770Street'] = $mod770Street;

        return $this;
    }

    /**
     * Gets mod770PostalCode
     *
     * @return string|null
     */
    public function getMod770PostalCode()
    {
        return $this->container['mod770PostalCode'];
    }

    /**
     * Sets mod770PostalCode
     *
     * @param string|null $mod770PostalCode mod770PostalCode
     *
     * @return self
     */
    public function setMod770PostalCode($mod770PostalCode)
    {
        if (is_null($mod770PostalCode)) {
            array_push($this->openAPINullablesSetToNull, 'mod770PostalCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770PostalCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770PostalCode'] = $mod770PostalCode;

        return $this;
    }

    /**
     * Gets mod770Town
     *
     * @return string|null
     */
    public function getMod770Town()
    {
        return $this->container['mod770Town'];
    }

    /**
     * Sets mod770Town
     *
     * @param string|null $mod770Town mod770Town
     *
     * @return self
     */
    public function setMod770Town($mod770Town)
    {
        if (is_null($mod770Town)) {
            array_push($this->openAPINullablesSetToNull, 'mod770Town');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770Town', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770Town'] = $mod770Town;

        return $this;
    }

    /**
     * Gets mod770Province
     *
     * @return string|null
     */
    public function getMod770Province()
    {
        return $this->container['mod770Province'];
    }

    /**
     * Sets mod770Province
     *
     * @param string|null $mod770Province mod770Province
     *
     * @return self
     */
    public function setMod770Province($mod770Province)
    {
        if (is_null($mod770Province)) {
            array_push($this->openAPINullablesSetToNull, 'mod770Province');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770Province', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770Province'] = $mod770Province;

        return $this;
    }

    /**
     * Gets mod770Country
     *
     * @return string|null
     */
    public function getMod770Country()
    {
        return $this->container['mod770Country'];
    }

    /**
     * Sets mod770Country
     *
     * @param string|null $mod770Country mod770Country
     *
     * @return self
     */
    public function setMod770Country($mod770Country)
    {
        if (is_null($mod770Country)) {
            array_push($this->openAPINullablesSetToNull, 'mod770Country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770Country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770Country'] = $mod770Country;

        return $this;
    }

    /**
     * Gets mod770CountryFiscalCode
     *
     * @return string|null
     */
    public function getMod770CountryFiscalCode()
    {
        return $this->container['mod770CountryFiscalCode'];
    }

    /**
     * Sets mod770CountryFiscalCode
     *
     * @param string|null $mod770CountryFiscalCode mod770CountryFiscalCode
     *
     * @return self
     */
    public function setMod770CountryFiscalCode($mod770CountryFiscalCode)
    {
        if (is_null($mod770CountryFiscalCode)) {
            array_push($this->openAPINullablesSetToNull, 'mod770CountryFiscalCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770CountryFiscalCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770CountryFiscalCode'] = $mod770CountryFiscalCode;

        return $this;
    }

    /**
     * Gets mod770CollaborationType
     *
     * @return \OpenAPI\Client\Radix\Model\Collaborationtype|null
     */
    public function getMod770CollaborationType()
    {
        return $this->container['mod770CollaborationType'];
    }

    /**
     * Sets mod770CollaborationType
     *
     * @param \OpenAPI\Client\Radix\Model\Collaborationtype|null $mod770CollaborationType mod770CollaborationType
     *
     * @return self
     */
    public function setMod770CollaborationType($mod770CollaborationType)
    {
        if (is_null($mod770CollaborationType)) {
            throw new \InvalidArgumentException('non-nullable mod770CollaborationType cannot be null');
        }
        $this->container['mod770CollaborationType'] = $mod770CollaborationType;

        return $this;
    }

    /**
     * Gets mod770InputTaxType
     *
     * @return \OpenAPI\Client\Radix\Model\Inputtaxtype|null
     */
    public function getMod770InputTaxType()
    {
        return $this->container['mod770InputTaxType'];
    }

    /**
     * Sets mod770InputTaxType
     *
     * @param \OpenAPI\Client\Radix\Model\Inputtaxtype|null $mod770InputTaxType mod770InputTaxType
     *
     * @return self
     */
    public function setMod770InputTaxType($mod770InputTaxType)
    {
        if (is_null($mod770InputTaxType)) {
            throw new \InvalidArgumentException('non-nullable mod770InputTaxType cannot be null');
        }
        $this->container['mod770InputTaxType'] = $mod770InputTaxType;

        return $this;
    }

    /**
     * Gets mod770Reason
     *
     * @return string|null
     */
    public function getMod770Reason()
    {
        return $this->container['mod770Reason'];
    }

    /**
     * Sets mod770Reason
     *
     * @param string|null $mod770Reason mod770Reason
     *
     * @return self
     */
    public function setMod770Reason($mod770Reason)
    {
        if (is_null($mod770Reason)) {
            array_push($this->openAPINullablesSetToNull, 'mod770Reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770Reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770Reason'] = $mod770Reason;

        return $this;
    }

    /**
     * Gets mod770Code
     *
     * @return string|null
     */
    public function getMod770Code()
    {
        return $this->container['mod770Code'];
    }

    /**
     * Sets mod770Code
     *
     * @param string|null $mod770Code mod770Code
     *
     * @return self
     */
    public function setMod770Code($mod770Code)
    {
        if (is_null($mod770Code)) {
            array_push($this->openAPINullablesSetToNull, 'mod770Code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod770Code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod770Code'] = $mod770Code;

        return $this;
    }

    /**
     * Gets mod770CompulsoryContributionType
     *
     * @return \OpenAPI\Client\Radix\Model\CompulsoryContributiontype|null
     */
    public function getMod770CompulsoryContributionType()
    {
        return $this->container['mod770CompulsoryContributionType'];
    }

    /**
     * Sets mod770CompulsoryContributionType
     *
     * @param \OpenAPI\Client\Radix\Model\CompulsoryContributiontype|null $mod770CompulsoryContributionType mod770CompulsoryContributionType
     *
     * @return self
     */
    public function setMod770CompulsoryContributionType($mod770CompulsoryContributionType)
    {
        if (is_null($mod770CompulsoryContributionType)) {
            throw new \InvalidArgumentException('non-nullable mod770CompulsoryContributionType cannot be null');
        }
        $this->container['mod770CompulsoryContributionType'] = $mod770CompulsoryContributionType;

        return $this;
    }

    /**
     * Gets emailPEC
     *
     * @return string|null
     */
    public function getEmailPEC()
    {
        return $this->container['emailPEC'];
    }

    /**
     * Sets emailPEC
     *
     * @param string|null $emailPEC emailPEC
     *
     * @return self
     */
    public function setEmailPEC($emailPEC)
    {
        if (is_null($emailPEC)) {
            array_push($this->openAPINullablesSetToNull, 'emailPEC');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emailPEC', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emailPEC'] = $emailPEC;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $paymentMethod paymentMethod
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        if (is_null($paymentMethod)) {
            throw new \InvalidArgumentException('non-nullable paymentMethod cannot be null');
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets abc
     *
     * @return string|null
     */
    public function getAbc()
    {
        return $this->container['abc'];
    }

    /**
     * Sets abc
     *
     * @param string|null $abc abc
     *
     * @return self
     */
    public function setAbc($abc)
    {
        if (is_null($abc)) {
            array_push($this->openAPINullablesSetToNull, 'abc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['abc'] = $abc;

        return $this;
    }

    /**
     * Gets since
     *
     * @return \DateTime|null
     */
    public function getSince()
    {
        return $this->container['since'];
    }

    /**
     * Sets since
     *
     * @param \DateTime|null $since since
     *
     * @return self
     */
    public function setSince($since)
    {
        if (is_null($since)) {
            array_push($this->openAPINullablesSetToNull, 'since');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('since', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['since'] = $since;

        return $this;
    }

    /**
     * Gets minimalAmountOfPurchase
     *
     * @return float|null
     */
    public function getMinimalAmountOfPurchase()
    {
        return $this->container['minimalAmountOfPurchase'];
    }

    /**
     * Sets minimalAmountOfPurchase
     *
     * @param float|null $minimalAmountOfPurchase minimalAmountOfPurchase
     *
     * @return self
     */
    public function setMinimalAmountOfPurchase($minimalAmountOfPurchase)
    {
        if (is_null($minimalAmountOfPurchase)) {
            array_push($this->openAPINullablesSetToNull, 'minimalAmountOfPurchase');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimalAmountOfPurchase', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minimalAmountOfPurchase'] = $minimalAmountOfPurchase;

        return $this;
    }

    /**
     * Gets deliveryDays
     *
     * @return int|null
     */
    public function getDeliveryDays()
    {
        return $this->container['deliveryDays'];
    }

    /**
     * Sets deliveryDays
     *
     * @param int|null $deliveryDays deliveryDays
     *
     * @return self
     */
    public function setDeliveryDays($deliveryDays)
    {
        if (is_null($deliveryDays)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryDays');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryDays', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryDays'] = $deliveryDays;

        return $this;
    }

    /**
     * Gets deliveryBufferDays
     *
     * @return int|null
     */
    public function getDeliveryBufferDays()
    {
        return $this->container['deliveryBufferDays'];
    }

    /**
     * Sets deliveryBufferDays
     *
     * @param int|null $deliveryBufferDays deliveryBufferDays
     *
     * @return self
     */
    public function setDeliveryBufferDays($deliveryBufferDays)
    {
        if (is_null($deliveryBufferDays)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryBufferDays');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryBufferDays', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryBufferDays'] = $deliveryBufferDays;

        return $this;
    }

    /**
     * Gets lockedSince
     *
     * @return \DateTime|null
     */
    public function getLockedSince()
    {
        return $this->container['lockedSince'];
    }

    /**
     * Sets lockedSince
     *
     * @param \DateTime|null $lockedSince lockedSince
     *
     * @return self
     */
    public function setLockedSince($lockedSince)
    {
        if (is_null($lockedSince)) {
            array_push($this->openAPINullablesSetToNull, 'lockedSince');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lockedSince', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lockedSince'] = $lockedSince;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool|null
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool|null $inactive inactive
     *
     * @return self
     */
    public function setInactive($inactive)
    {
        if (is_null($inactive)) {
            array_push($this->openAPINullablesSetToNull, 'inactive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inactive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets createDate
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['createDate'];
    }

    /**
     * Sets createDate
     *
     * @param \DateTime|null $createDate createDate
     *
     * @return self
     */
    public function setCreateDate($createDate)
    {
        if (is_null($createDate)) {
            array_push($this->openAPINullablesSetToNull, 'createDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createDate'] = $createDate;

        return $this;
    }

    /**
     * Gets updateDate
     *
     * @return \DateTime|null
     */
    public function getUpdateDate()
    {
        return $this->container['updateDate'];
    }

    /**
     * Sets updateDate
     *
     * @param \DateTime|null $updateDate updateDate
     *
     * @return self
     */
    public function setUpdateDate($updateDate)
    {
        if (is_null($updateDate)) {
            array_push($this->openAPINullablesSetToNull, 'updateDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updateDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updateDate'] = $updateDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


