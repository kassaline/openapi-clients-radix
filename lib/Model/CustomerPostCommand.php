<?php
/**
 * CustomerPostCommand
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Model;

use \ArrayAccess;
use \OpenAPI\Client\Radix\ObjectSerializer;

/**
 * CustomerPostCommand Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerPostCommand implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerPostCommand';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'searchtext' => 'string',
        'description' => 'string',
        'description2' => 'string',
        'salutation' => 'string',
        'letterSalutation' => 'string',
        'street' => 'string',
        'streetNumber' => 'string',
        'postalCode' => 'string',
        'town' => 'string',
        'province' => 'string',
        'district' => 'string',
        'building' => 'string',
        'provinceInternational' => 'string',
        'country' => 'string',
        'phone' => '\OpenAPI\Client\Radix\Model\Phonenumber[]',
        'fax' => '\OpenAPI\Client\Radix\Model\Faxnumber[]',
        'email' => '\OpenAPI\Client\Radix\Model\Email[]',
        'emailPEC' => 'string',
        'url' => 'string',
        'language' => 'string',
        'isoVatnumber' => '\OpenAPI\Client\Radix\Model\IsoVatnumber',
        'taxnumber' => 'string',
        'mapLat' => 'float',
        'mapLong' => 'float',
        'number' => 'int',
        'addressId' => 'string',
        'legalform' => '\OpenAPI\Client\Radix\Model\Legalformtype',
        'origin' => '\OpenAPI\Client\Radix\Model\Origintype',
        'vatCalculation' => '\OpenAPI\Client\Radix\Model\VatCalculationtype',
        'agent' => '\OpenAPI\Client\Radix\Model\IdCode',
        'agent2' => '\OpenAPI\Client\Radix\Model\IdCode',
        'agent3' => '\OpenAPI\Client\Radix\Model\IdCode',
        'agent4' => '\OpenAPI\Client\Radix\Model\IdCode',
        'agent5' => '\OpenAPI\Client\Radix\Model\IdCode',
        'currency' => 'string',
        'paymentMethod' => '\OpenAPI\Client\Radix\Model\IdCode',
        'shipmentMethod' => '\OpenAPI\Client\Radix\Model\IdCode',
        'shipmentMedium' => '\OpenAPI\Client\Radix\Model\IdCode',
        'vat' => '\OpenAPI\Client\Radix\Model\IdCode',
        'taxGroup' => '\OpenAPI\Client\Radix\Model\IdCode',
        'customerIdInvoice' => 'string',
        'numberInvoiceCopies' => 'int',
        'customerAccountNumber' => 'string',
        'account' => '\OpenAPI\Client\Radix\Model\IdCode',
        'recipientCodePA' => 'string',
        'recipientCodeB2B' => 'string',
        'recipientCodeB2BPECMail' => 'string',
        'referenceAdministration' => 'string',
        'splitPayment' => 'bool',
        'recipientSendElectronically' => '\OpenAPI\Client\Radix\Model\RecipientSendElectronicallytype',
        'invoiceSendElectronically' => 'bool',
        'invoiceSendElectronicallyViaPec' => 'bool',
        'invoiceSendElectronicallyEmail' => 'string',
        'sendDemandsForPayments' => 'bool',
        'sendDemandsForPaymentsEmail' => 'string',
        'sendDunnings' => 'bool',
        'sendDunningsEmail' => 'string',
        'birthday' => '\DateTime',
        'iban' => 'string',
        'note' => 'string',
        'abbreviation' => 'string',
        'codeOld' => 'string',
        'abc' => 'string',
        'since' => '\DateTime',
        'priceprintOnBillOfDelivery' => '\OpenAPI\Client\Radix\Model\PriceprintOnBillOfDeliverytype',
        'printRemainingOnInvoiceOrBill' => 'int',
        'partialDeliveryAllowed' => 'int',
        'dunningGroup' => '\OpenAPI\Client\Radix\Model\IdCode',
        'creditLimit' => 'float',
        'noteOfFidoControl' => 'string',
        'freighter' => '\OpenAPI\Client\Radix\Model\IdCode',
        'priceKey' => '\OpenAPI\Client\Radix\Model\IdCode',
        'priceList' => 'string',
        'deliveryCondition' => '\OpenAPI\Client\Radix\Model\IdCode',
        'proposalDocument' => '\OpenAPI\Client\Radix\Model\ProposalDocumentType',
        'firstname' => 'string',
        'surname' => 'string',
        'displayLineDiscounts' => 'bool',
        'inactive' => 'bool',
        'lockedSince' => '\DateTime',
        'openingHours' => 'string',
        'invoiceDiscount1' => 'float',
        'invoiceDiscount2' => 'float',
        'invoiceDiscount3' => 'float',
        'invoiceDiscount4' => 'float',
        'invoiceDiscount5' => 'float',
        'reverseCharge' => 'bool',
        'xInvoiceReferenceId' => 'string',
        'xInvoiceEmail' => 'string',
        'bank' => '\OpenAPI\Client\Radix\Model\IdCode',
        'saleBlockedFrom' => '\DateTime',
        'createDeliveryNoteBlocked' => 'bool',
        'createOfferBlocked' => 'bool',
        'createOrderBlocked' => 'bool',
        'createInvoiceBlocked' => 'bool',
        'createTicketBlocked' => 'bool',
        'createPackingListBlocked' => 'bool',
        'createCashReceiptBlocked' => 'bool',
        'priceIncludingVat' => 'bool',
        'numberMin' => 'int',
        'numberMax' => 'int',
        'additionalFields' => '\OpenAPI\Client\Radix\Model\AdditionalFieldBase[]',
        'classifications' => '\OpenAPI\Client\Radix\Model\ClassificationV1Base[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'searchtext' => null,
        'description' => null,
        'description2' => null,
        'salutation' => null,
        'letterSalutation' => null,
        'street' => null,
        'streetNumber' => null,
        'postalCode' => null,
        'town' => null,
        'province' => null,
        'district' => null,
        'building' => null,
        'provinceInternational' => null,
        'country' => null,
        'phone' => null,
        'fax' => null,
        'email' => null,
        'emailPEC' => null,
        'url' => null,
        'language' => null,
        'isoVatnumber' => null,
        'taxnumber' => null,
        'mapLat' => 'double',
        'mapLong' => 'double',
        'number' => 'int64',
        'addressId' => null,
        'legalform' => null,
        'origin' => null,
        'vatCalculation' => null,
        'agent' => null,
        'agent2' => null,
        'agent3' => null,
        'agent4' => null,
        'agent5' => null,
        'currency' => null,
        'paymentMethod' => null,
        'shipmentMethod' => null,
        'shipmentMedium' => null,
        'vat' => null,
        'taxGroup' => null,
        'customerIdInvoice' => null,
        'numberInvoiceCopies' => 'int32',
        'customerAccountNumber' => null,
        'account' => null,
        'recipientCodePA' => null,
        'recipientCodeB2B' => null,
        'recipientCodeB2BPECMail' => null,
        'referenceAdministration' => null,
        'splitPayment' => null,
        'recipientSendElectronically' => null,
        'invoiceSendElectronically' => null,
        'invoiceSendElectronicallyViaPec' => null,
        'invoiceSendElectronicallyEmail' => null,
        'sendDemandsForPayments' => null,
        'sendDemandsForPaymentsEmail' => null,
        'sendDunnings' => null,
        'sendDunningsEmail' => null,
        'birthday' => 'date-time',
        'iban' => null,
        'note' => null,
        'abbreviation' => null,
        'codeOld' => null,
        'abc' => null,
        'since' => 'date-time',
        'priceprintOnBillOfDelivery' => null,
        'printRemainingOnInvoiceOrBill' => 'int32',
        'partialDeliveryAllowed' => 'int32',
        'dunningGroup' => null,
        'creditLimit' => 'double',
        'noteOfFidoControl' => null,
        'freighter' => null,
        'priceKey' => null,
        'priceList' => null,
        'deliveryCondition' => null,
        'proposalDocument' => null,
        'firstname' => null,
        'surname' => null,
        'displayLineDiscounts' => null,
        'inactive' => null,
        'lockedSince' => 'date-time',
        'openingHours' => null,
        'invoiceDiscount1' => 'double',
        'invoiceDiscount2' => 'double',
        'invoiceDiscount3' => 'double',
        'invoiceDiscount4' => 'double',
        'invoiceDiscount5' => 'double',
        'reverseCharge' => null,
        'xInvoiceReferenceId' => null,
        'xInvoiceEmail' => null,
        'bank' => null,
        'saleBlockedFrom' => 'date-time',
        'createDeliveryNoteBlocked' => null,
        'createOfferBlocked' => null,
        'createOrderBlocked' => null,
        'createInvoiceBlocked' => null,
        'createTicketBlocked' => null,
        'createPackingListBlocked' => null,
        'createCashReceiptBlocked' => null,
        'priceIncludingVat' => null,
        'numberMin' => 'int64',
        'numberMax' => 'int64',
        'additionalFields' => null,
        'classifications' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'searchtext' => true,
        'description' => true,
        'description2' => true,
        'salutation' => true,
        'letterSalutation' => true,
        'street' => true,
        'streetNumber' => true,
        'postalCode' => true,
        'town' => true,
        'province' => true,
        'district' => true,
        'building' => true,
        'provinceInternational' => true,
        'country' => true,
        'phone' => true,
        'fax' => true,
        'email' => true,
        'emailPEC' => true,
        'url' => true,
        'language' => true,
        'isoVatnumber' => false,
        'taxnumber' => true,
        'mapLat' => true,
        'mapLong' => true,
        'number' => true,
        'addressId' => true,
        'legalform' => false,
        'origin' => false,
        'vatCalculation' => false,
        'agent' => false,
        'agent2' => false,
        'agent3' => false,
        'agent4' => false,
        'agent5' => false,
        'currency' => true,
        'paymentMethod' => false,
        'shipmentMethod' => false,
        'shipmentMedium' => false,
        'vat' => false,
        'taxGroup' => false,
        'customerIdInvoice' => true,
        'numberInvoiceCopies' => true,
        'customerAccountNumber' => true,
        'account' => false,
        'recipientCodePA' => true,
        'recipientCodeB2B' => true,
        'recipientCodeB2BPECMail' => true,
        'referenceAdministration' => true,
        'splitPayment' => true,
        'recipientSendElectronically' => false,
        'invoiceSendElectronically' => true,
        'invoiceSendElectronicallyViaPec' => true,
        'invoiceSendElectronicallyEmail' => true,
        'sendDemandsForPayments' => true,
        'sendDemandsForPaymentsEmail' => true,
        'sendDunnings' => true,
        'sendDunningsEmail' => true,
        'birthday' => true,
        'iban' => true,
        'note' => true,
        'abbreviation' => true,
        'codeOld' => true,
        'abc' => true,
        'since' => true,
        'priceprintOnBillOfDelivery' => false,
        'printRemainingOnInvoiceOrBill' => true,
        'partialDeliveryAllowed' => true,
        'dunningGroup' => false,
        'creditLimit' => true,
        'noteOfFidoControl' => true,
        'freighter' => false,
        'priceKey' => false,
        'priceList' => true,
        'deliveryCondition' => false,
        'proposalDocument' => false,
        'firstname' => true,
        'surname' => true,
        'displayLineDiscounts' => true,
        'inactive' => true,
        'lockedSince' => true,
        'openingHours' => true,
        'invoiceDiscount1' => true,
        'invoiceDiscount2' => true,
        'invoiceDiscount3' => true,
        'invoiceDiscount4' => true,
        'invoiceDiscount5' => true,
        'reverseCharge' => true,
        'xInvoiceReferenceId' => true,
        'xInvoiceEmail' => true,
        'bank' => false,
        'saleBlockedFrom' => true,
        'createDeliveryNoteBlocked' => true,
        'createOfferBlocked' => true,
        'createOrderBlocked' => true,
        'createInvoiceBlocked' => true,
        'createTicketBlocked' => true,
        'createPackingListBlocked' => true,
        'createCashReceiptBlocked' => true,
        'priceIncludingVat' => true,
        'numberMin' => true,
        'numberMax' => true,
        'additionalFields' => true,
        'classifications' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'searchtext' => 'searchtext',
        'description' => 'description',
        'description2' => 'description2',
        'salutation' => 'salutation',
        'letterSalutation' => 'letterSalutation',
        'street' => 'street',
        'streetNumber' => 'streetNumber',
        'postalCode' => 'postalCode',
        'town' => 'town',
        'province' => 'province',
        'district' => 'district',
        'building' => 'building',
        'provinceInternational' => 'provinceInternational',
        'country' => 'country',
        'phone' => 'phone',
        'fax' => 'fax',
        'email' => 'email',
        'emailPEC' => 'emailPEC',
        'url' => 'url',
        'language' => 'language',
        'isoVatnumber' => 'isoVatnumber',
        'taxnumber' => 'taxnumber',
        'mapLat' => 'mapLat',
        'mapLong' => 'mapLong',
        'number' => 'number',
        'addressId' => 'addressId',
        'legalform' => 'legalform',
        'origin' => 'origin',
        'vatCalculation' => 'vatCalculation',
        'agent' => 'agent',
        'agent2' => 'agent2',
        'agent3' => 'agent3',
        'agent4' => 'agent4',
        'agent5' => 'agent5',
        'currency' => 'currency',
        'paymentMethod' => 'paymentMethod',
        'shipmentMethod' => 'shipmentMethod',
        'shipmentMedium' => 'shipmentMedium',
        'vat' => 'vat',
        'taxGroup' => 'taxGroup',
        'customerIdInvoice' => 'customerIdInvoice',
        'numberInvoiceCopies' => 'numberInvoiceCopies',
        'customerAccountNumber' => 'customerAccountNumber',
        'account' => 'account',
        'recipientCodePA' => 'recipientCodePA',
        'recipientCodeB2B' => 'recipientCodeB2B',
        'recipientCodeB2BPECMail' => 'recipientCodeB2BPECMail',
        'referenceAdministration' => 'referenceAdministration',
        'splitPayment' => 'splitPayment',
        'recipientSendElectronically' => 'recipientSendElectronically',
        'invoiceSendElectronically' => 'invoiceSendElectronically',
        'invoiceSendElectronicallyViaPec' => 'invoiceSendElectronicallyViaPec',
        'invoiceSendElectronicallyEmail' => 'invoiceSendElectronicallyEmail',
        'sendDemandsForPayments' => 'sendDemandsForPayments',
        'sendDemandsForPaymentsEmail' => 'sendDemandsForPaymentsEmail',
        'sendDunnings' => 'sendDunnings',
        'sendDunningsEmail' => 'sendDunningsEmail',
        'birthday' => 'birthday',
        'iban' => 'iban',
        'note' => 'note',
        'abbreviation' => 'abbreviation',
        'codeOld' => 'codeOld',
        'abc' => 'abc',
        'since' => 'since',
        'priceprintOnBillOfDelivery' => 'priceprintOnBillOfDelivery',
        'printRemainingOnInvoiceOrBill' => 'printRemainingOnInvoiceOrBill',
        'partialDeliveryAllowed' => 'partialDeliveryAllowed',
        'dunningGroup' => 'dunningGroup',
        'creditLimit' => 'creditLimit',
        'noteOfFidoControl' => 'noteOfFidoControl',
        'freighter' => 'freighter',
        'priceKey' => 'priceKey',
        'priceList' => 'priceList',
        'deliveryCondition' => 'deliveryCondition',
        'proposalDocument' => 'proposalDocument',
        'firstname' => 'firstname',
        'surname' => 'surname',
        'displayLineDiscounts' => 'displayLineDiscounts',
        'inactive' => 'inactive',
        'lockedSince' => 'lockedSince',
        'openingHours' => 'openingHours',
        'invoiceDiscount1' => 'invoiceDiscount1',
        'invoiceDiscount2' => 'invoiceDiscount2',
        'invoiceDiscount3' => 'invoiceDiscount3',
        'invoiceDiscount4' => 'invoiceDiscount4',
        'invoiceDiscount5' => 'invoiceDiscount5',
        'reverseCharge' => 'reverseCharge',
        'xInvoiceReferenceId' => 'xInvoiceReferenceId',
        'xInvoiceEmail' => 'xInvoiceEmail',
        'bank' => 'bank',
        'saleBlockedFrom' => 'saleBlockedFrom',
        'createDeliveryNoteBlocked' => 'createDeliveryNoteBlocked',
        'createOfferBlocked' => 'createOfferBlocked',
        'createOrderBlocked' => 'createOrderBlocked',
        'createInvoiceBlocked' => 'createInvoiceBlocked',
        'createTicketBlocked' => 'createTicketBlocked',
        'createPackingListBlocked' => 'createPackingListBlocked',
        'createCashReceiptBlocked' => 'createCashReceiptBlocked',
        'priceIncludingVat' => 'priceIncludingVat',
        'numberMin' => 'numberMin',
        'numberMax' => 'numberMax',
        'additionalFields' => 'additionalFields',
        'classifications' => 'classifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'searchtext' => 'setSearchtext',
        'description' => 'setDescription',
        'description2' => 'setDescription2',
        'salutation' => 'setSalutation',
        'letterSalutation' => 'setLetterSalutation',
        'street' => 'setStreet',
        'streetNumber' => 'setStreetNumber',
        'postalCode' => 'setPostalCode',
        'town' => 'setTown',
        'province' => 'setProvince',
        'district' => 'setDistrict',
        'building' => 'setBuilding',
        'provinceInternational' => 'setProvinceInternational',
        'country' => 'setCountry',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'email' => 'setEmail',
        'emailPEC' => 'setEmailPEC',
        'url' => 'setUrl',
        'language' => 'setLanguage',
        'isoVatnumber' => 'setIsoVatnumber',
        'taxnumber' => 'setTaxnumber',
        'mapLat' => 'setMapLat',
        'mapLong' => 'setMapLong',
        'number' => 'setNumber',
        'addressId' => 'setAddressId',
        'legalform' => 'setLegalform',
        'origin' => 'setOrigin',
        'vatCalculation' => 'setVatCalculation',
        'agent' => 'setAgent',
        'agent2' => 'setAgent2',
        'agent3' => 'setAgent3',
        'agent4' => 'setAgent4',
        'agent5' => 'setAgent5',
        'currency' => 'setCurrency',
        'paymentMethod' => 'setPaymentMethod',
        'shipmentMethod' => 'setShipmentMethod',
        'shipmentMedium' => 'setShipmentMedium',
        'vat' => 'setVat',
        'taxGroup' => 'setTaxGroup',
        'customerIdInvoice' => 'setCustomerIdInvoice',
        'numberInvoiceCopies' => 'setNumberInvoiceCopies',
        'customerAccountNumber' => 'setCustomerAccountNumber',
        'account' => 'setAccount',
        'recipientCodePA' => 'setRecipientCodePA',
        'recipientCodeB2B' => 'setRecipientCodeB2B',
        'recipientCodeB2BPECMail' => 'setRecipientCodeB2BPECMail',
        'referenceAdministration' => 'setReferenceAdministration',
        'splitPayment' => 'setSplitPayment',
        'recipientSendElectronically' => 'setRecipientSendElectronically',
        'invoiceSendElectronically' => 'setInvoiceSendElectronically',
        'invoiceSendElectronicallyViaPec' => 'setInvoiceSendElectronicallyViaPec',
        'invoiceSendElectronicallyEmail' => 'setInvoiceSendElectronicallyEmail',
        'sendDemandsForPayments' => 'setSendDemandsForPayments',
        'sendDemandsForPaymentsEmail' => 'setSendDemandsForPaymentsEmail',
        'sendDunnings' => 'setSendDunnings',
        'sendDunningsEmail' => 'setSendDunningsEmail',
        'birthday' => 'setBirthday',
        'iban' => 'setIban',
        'note' => 'setNote',
        'abbreviation' => 'setAbbreviation',
        'codeOld' => 'setCodeOld',
        'abc' => 'setAbc',
        'since' => 'setSince',
        'priceprintOnBillOfDelivery' => 'setPriceprintOnBillOfDelivery',
        'printRemainingOnInvoiceOrBill' => 'setPrintRemainingOnInvoiceOrBill',
        'partialDeliveryAllowed' => 'setPartialDeliveryAllowed',
        'dunningGroup' => 'setDunningGroup',
        'creditLimit' => 'setCreditLimit',
        'noteOfFidoControl' => 'setNoteOfFidoControl',
        'freighter' => 'setFreighter',
        'priceKey' => 'setPriceKey',
        'priceList' => 'setPriceList',
        'deliveryCondition' => 'setDeliveryCondition',
        'proposalDocument' => 'setProposalDocument',
        'firstname' => 'setFirstname',
        'surname' => 'setSurname',
        'displayLineDiscounts' => 'setDisplayLineDiscounts',
        'inactive' => 'setInactive',
        'lockedSince' => 'setLockedSince',
        'openingHours' => 'setOpeningHours',
        'invoiceDiscount1' => 'setInvoiceDiscount1',
        'invoiceDiscount2' => 'setInvoiceDiscount2',
        'invoiceDiscount3' => 'setInvoiceDiscount3',
        'invoiceDiscount4' => 'setInvoiceDiscount4',
        'invoiceDiscount5' => 'setInvoiceDiscount5',
        'reverseCharge' => 'setReverseCharge',
        'xInvoiceReferenceId' => 'setXInvoiceReferenceId',
        'xInvoiceEmail' => 'setXInvoiceEmail',
        'bank' => 'setBank',
        'saleBlockedFrom' => 'setSaleBlockedFrom',
        'createDeliveryNoteBlocked' => 'setCreateDeliveryNoteBlocked',
        'createOfferBlocked' => 'setCreateOfferBlocked',
        'createOrderBlocked' => 'setCreateOrderBlocked',
        'createInvoiceBlocked' => 'setCreateInvoiceBlocked',
        'createTicketBlocked' => 'setCreateTicketBlocked',
        'createPackingListBlocked' => 'setCreatePackingListBlocked',
        'createCashReceiptBlocked' => 'setCreateCashReceiptBlocked',
        'priceIncludingVat' => 'setPriceIncludingVat',
        'numberMin' => 'setNumberMin',
        'numberMax' => 'setNumberMax',
        'additionalFields' => 'setAdditionalFields',
        'classifications' => 'setClassifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'searchtext' => 'getSearchtext',
        'description' => 'getDescription',
        'description2' => 'getDescription2',
        'salutation' => 'getSalutation',
        'letterSalutation' => 'getLetterSalutation',
        'street' => 'getStreet',
        'streetNumber' => 'getStreetNumber',
        'postalCode' => 'getPostalCode',
        'town' => 'getTown',
        'province' => 'getProvince',
        'district' => 'getDistrict',
        'building' => 'getBuilding',
        'provinceInternational' => 'getProvinceInternational',
        'country' => 'getCountry',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'email' => 'getEmail',
        'emailPEC' => 'getEmailPEC',
        'url' => 'getUrl',
        'language' => 'getLanguage',
        'isoVatnumber' => 'getIsoVatnumber',
        'taxnumber' => 'getTaxnumber',
        'mapLat' => 'getMapLat',
        'mapLong' => 'getMapLong',
        'number' => 'getNumber',
        'addressId' => 'getAddressId',
        'legalform' => 'getLegalform',
        'origin' => 'getOrigin',
        'vatCalculation' => 'getVatCalculation',
        'agent' => 'getAgent',
        'agent2' => 'getAgent2',
        'agent3' => 'getAgent3',
        'agent4' => 'getAgent4',
        'agent5' => 'getAgent5',
        'currency' => 'getCurrency',
        'paymentMethod' => 'getPaymentMethod',
        'shipmentMethod' => 'getShipmentMethod',
        'shipmentMedium' => 'getShipmentMedium',
        'vat' => 'getVat',
        'taxGroup' => 'getTaxGroup',
        'customerIdInvoice' => 'getCustomerIdInvoice',
        'numberInvoiceCopies' => 'getNumberInvoiceCopies',
        'customerAccountNumber' => 'getCustomerAccountNumber',
        'account' => 'getAccount',
        'recipientCodePA' => 'getRecipientCodePA',
        'recipientCodeB2B' => 'getRecipientCodeB2B',
        'recipientCodeB2BPECMail' => 'getRecipientCodeB2BPECMail',
        'referenceAdministration' => 'getReferenceAdministration',
        'splitPayment' => 'getSplitPayment',
        'recipientSendElectronically' => 'getRecipientSendElectronically',
        'invoiceSendElectronically' => 'getInvoiceSendElectronically',
        'invoiceSendElectronicallyViaPec' => 'getInvoiceSendElectronicallyViaPec',
        'invoiceSendElectronicallyEmail' => 'getInvoiceSendElectronicallyEmail',
        'sendDemandsForPayments' => 'getSendDemandsForPayments',
        'sendDemandsForPaymentsEmail' => 'getSendDemandsForPaymentsEmail',
        'sendDunnings' => 'getSendDunnings',
        'sendDunningsEmail' => 'getSendDunningsEmail',
        'birthday' => 'getBirthday',
        'iban' => 'getIban',
        'note' => 'getNote',
        'abbreviation' => 'getAbbreviation',
        'codeOld' => 'getCodeOld',
        'abc' => 'getAbc',
        'since' => 'getSince',
        'priceprintOnBillOfDelivery' => 'getPriceprintOnBillOfDelivery',
        'printRemainingOnInvoiceOrBill' => 'getPrintRemainingOnInvoiceOrBill',
        'partialDeliveryAllowed' => 'getPartialDeliveryAllowed',
        'dunningGroup' => 'getDunningGroup',
        'creditLimit' => 'getCreditLimit',
        'noteOfFidoControl' => 'getNoteOfFidoControl',
        'freighter' => 'getFreighter',
        'priceKey' => 'getPriceKey',
        'priceList' => 'getPriceList',
        'deliveryCondition' => 'getDeliveryCondition',
        'proposalDocument' => 'getProposalDocument',
        'firstname' => 'getFirstname',
        'surname' => 'getSurname',
        'displayLineDiscounts' => 'getDisplayLineDiscounts',
        'inactive' => 'getInactive',
        'lockedSince' => 'getLockedSince',
        'openingHours' => 'getOpeningHours',
        'invoiceDiscount1' => 'getInvoiceDiscount1',
        'invoiceDiscount2' => 'getInvoiceDiscount2',
        'invoiceDiscount3' => 'getInvoiceDiscount3',
        'invoiceDiscount4' => 'getInvoiceDiscount4',
        'invoiceDiscount5' => 'getInvoiceDiscount5',
        'reverseCharge' => 'getReverseCharge',
        'xInvoiceReferenceId' => 'getXInvoiceReferenceId',
        'xInvoiceEmail' => 'getXInvoiceEmail',
        'bank' => 'getBank',
        'saleBlockedFrom' => 'getSaleBlockedFrom',
        'createDeliveryNoteBlocked' => 'getCreateDeliveryNoteBlocked',
        'createOfferBlocked' => 'getCreateOfferBlocked',
        'createOrderBlocked' => 'getCreateOrderBlocked',
        'createInvoiceBlocked' => 'getCreateInvoiceBlocked',
        'createTicketBlocked' => 'getCreateTicketBlocked',
        'createPackingListBlocked' => 'getCreatePackingListBlocked',
        'createCashReceiptBlocked' => 'getCreateCashReceiptBlocked',
        'priceIncludingVat' => 'getPriceIncludingVat',
        'numberMin' => 'getNumberMin',
        'numberMax' => 'getNumberMax',
        'additionalFields' => 'getAdditionalFields',
        'classifications' => 'getClassifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('searchtext', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('description2', $data ?? [], null);
        $this->setIfExists('salutation', $data ?? [], null);
        $this->setIfExists('letterSalutation', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('streetNumber', $data ?? [], null);
        $this->setIfExists('postalCode', $data ?? [], null);
        $this->setIfExists('town', $data ?? [], null);
        $this->setIfExists('province', $data ?? [], null);
        $this->setIfExists('district', $data ?? [], null);
        $this->setIfExists('building', $data ?? [], null);
        $this->setIfExists('provinceInternational', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('emailPEC', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('isoVatnumber', $data ?? [], null);
        $this->setIfExists('taxnumber', $data ?? [], null);
        $this->setIfExists('mapLat', $data ?? [], null);
        $this->setIfExists('mapLong', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('addressId', $data ?? [], null);
        $this->setIfExists('legalform', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('vatCalculation', $data ?? [], null);
        $this->setIfExists('agent', $data ?? [], null);
        $this->setIfExists('agent2', $data ?? [], null);
        $this->setIfExists('agent3', $data ?? [], null);
        $this->setIfExists('agent4', $data ?? [], null);
        $this->setIfExists('agent5', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('shipmentMethod', $data ?? [], null);
        $this->setIfExists('shipmentMedium', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('taxGroup', $data ?? [], null);
        $this->setIfExists('customerIdInvoice', $data ?? [], null);
        $this->setIfExists('numberInvoiceCopies', $data ?? [], null);
        $this->setIfExists('customerAccountNumber', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('recipientCodePA', $data ?? [], null);
        $this->setIfExists('recipientCodeB2B', $data ?? [], null);
        $this->setIfExists('recipientCodeB2BPECMail', $data ?? [], null);
        $this->setIfExists('referenceAdministration', $data ?? [], null);
        $this->setIfExists('splitPayment', $data ?? [], null);
        $this->setIfExists('recipientSendElectronically', $data ?? [], null);
        $this->setIfExists('invoiceSendElectronically', $data ?? [], null);
        $this->setIfExists('invoiceSendElectronicallyViaPec', $data ?? [], null);
        $this->setIfExists('invoiceSendElectronicallyEmail', $data ?? [], null);
        $this->setIfExists('sendDemandsForPayments', $data ?? [], null);
        $this->setIfExists('sendDemandsForPaymentsEmail', $data ?? [], null);
        $this->setIfExists('sendDunnings', $data ?? [], null);
        $this->setIfExists('sendDunningsEmail', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('abbreviation', $data ?? [], null);
        $this->setIfExists('codeOld', $data ?? [], null);
        $this->setIfExists('abc', $data ?? [], null);
        $this->setIfExists('since', $data ?? [], null);
        $this->setIfExists('priceprintOnBillOfDelivery', $data ?? [], null);
        $this->setIfExists('printRemainingOnInvoiceOrBill', $data ?? [], null);
        $this->setIfExists('partialDeliveryAllowed', $data ?? [], null);
        $this->setIfExists('dunningGroup', $data ?? [], null);
        $this->setIfExists('creditLimit', $data ?? [], null);
        $this->setIfExists('noteOfFidoControl', $data ?? [], null);
        $this->setIfExists('freighter', $data ?? [], null);
        $this->setIfExists('priceKey', $data ?? [], null);
        $this->setIfExists('priceList', $data ?? [], null);
        $this->setIfExists('deliveryCondition', $data ?? [], null);
        $this->setIfExists('proposalDocument', $data ?? [], null);
        $this->setIfExists('firstname', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('displayLineDiscounts', $data ?? [], null);
        $this->setIfExists('inactive', $data ?? [], null);
        $this->setIfExists('lockedSince', $data ?? [], null);
        $this->setIfExists('openingHours', $data ?? [], null);
        $this->setIfExists('invoiceDiscount1', $data ?? [], null);
        $this->setIfExists('invoiceDiscount2', $data ?? [], null);
        $this->setIfExists('invoiceDiscount3', $data ?? [], null);
        $this->setIfExists('invoiceDiscount4', $data ?? [], null);
        $this->setIfExists('invoiceDiscount5', $data ?? [], null);
        $this->setIfExists('reverseCharge', $data ?? [], null);
        $this->setIfExists('xInvoiceReferenceId', $data ?? [], null);
        $this->setIfExists('xInvoiceEmail', $data ?? [], null);
        $this->setIfExists('bank', $data ?? [], null);
        $this->setIfExists('saleBlockedFrom', $data ?? [], null);
        $this->setIfExists('createDeliveryNoteBlocked', $data ?? [], null);
        $this->setIfExists('createOfferBlocked', $data ?? [], null);
        $this->setIfExists('createOrderBlocked', $data ?? [], null);
        $this->setIfExists('createInvoiceBlocked', $data ?? [], null);
        $this->setIfExists('createTicketBlocked', $data ?? [], null);
        $this->setIfExists('createPackingListBlocked', $data ?? [], null);
        $this->setIfExists('createCashReceiptBlocked', $data ?? [], null);
        $this->setIfExists('priceIncludingVat', $data ?? [], null);
        $this->setIfExists('numberMin', $data ?? [], null);
        $this->setIfExists('numberMax', $data ?? [], null);
        $this->setIfExists('additionalFields', $data ?? [], null);
        $this->setIfExists('classifications', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets searchtext
     *
     * @return string|null
     */
    public function getSearchtext()
    {
        return $this->container['searchtext'];
    }

    /**
     * Sets searchtext
     *
     * @param string|null $searchtext searchtext
     *
     * @return self
     */
    public function setSearchtext($searchtext)
    {
        if (is_null($searchtext)) {
            array_push($this->openAPINullablesSetToNull, 'searchtext');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('searchtext', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['searchtext'] = $searchtext;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description2
     *
     * @return string|null
     */
    public function getDescription2()
    {
        return $this->container['description2'];
    }

    /**
     * Sets description2
     *
     * @param string|null $description2 description2
     *
     * @return self
     */
    public function setDescription2($description2)
    {
        if (is_null($description2)) {
            array_push($this->openAPINullablesSetToNull, 'description2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description2'] = $description2;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string|null
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string|null $salutation salutation
     *
     * @return self
     */
    public function setSalutation($salutation)
    {
        if (is_null($salutation)) {
            array_push($this->openAPINullablesSetToNull, 'salutation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('salutation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets letterSalutation
     *
     * @return string|null
     */
    public function getLetterSalutation()
    {
        return $this->container['letterSalutation'];
    }

    /**
     * Sets letterSalutation
     *
     * @param string|null $letterSalutation letterSalutation
     *
     * @return self
     */
    public function setLetterSalutation($letterSalutation)
    {
        if (is_null($letterSalutation)) {
            array_push($this->openAPINullablesSetToNull, 'letterSalutation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('letterSalutation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['letterSalutation'] = $letterSalutation;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            array_push($this->openAPINullablesSetToNull, 'street');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets streetNumber
     *
     * @return string|null
     */
    public function getStreetNumber()
    {
        return $this->container['streetNumber'];
    }

    /**
     * Sets streetNumber
     *
     * @param string|null $streetNumber streetNumber
     *
     * @return self
     */
    public function setStreetNumber($streetNumber)
    {
        if (is_null($streetNumber)) {
            array_push($this->openAPINullablesSetToNull, 'streetNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('streetNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['streetNumber'] = $streetNumber;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode postalCode
     *
     * @return self
     */
    public function setPostalCode($postalCode)
    {
        if (is_null($postalCode)) {
            array_push($this->openAPINullablesSetToNull, 'postalCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postalCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string|null
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string|null $town town
     *
     * @return self
     */
    public function setTown($town)
    {
        if (is_null($town)) {
            array_push($this->openAPINullablesSetToNull, 'town');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('town', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string|null
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string|null $province province
     *
     * @return self
     */
    public function setProvince($province)
    {
        if (is_null($province)) {
            array_push($this->openAPINullablesSetToNull, 'province');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('province', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets district
     *
     * @return string|null
     */
    public function getDistrict()
    {
        return $this->container['district'];
    }

    /**
     * Sets district
     *
     * @param string|null $district district
     *
     * @return self
     */
    public function setDistrict($district)
    {
        if (is_null($district)) {
            array_push($this->openAPINullablesSetToNull, 'district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['district'] = $district;

        return $this;
    }

    /**
     * Gets building
     *
     * @return string|null
     */
    public function getBuilding()
    {
        return $this->container['building'];
    }

    /**
     * Sets building
     *
     * @param string|null $building building
     *
     * @return self
     */
    public function setBuilding($building)
    {
        if (is_null($building)) {
            array_push($this->openAPINullablesSetToNull, 'building');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building'] = $building;

        return $this;
    }

    /**
     * Gets provinceInternational
     *
     * @return string|null
     */
    public function getProvinceInternational()
    {
        return $this->container['provinceInternational'];
    }

    /**
     * Sets provinceInternational
     *
     * @param string|null $provinceInternational provinceInternational
     *
     * @return self
     */
    public function setProvinceInternational($provinceInternational)
    {
        if (is_null($provinceInternational)) {
            array_push($this->openAPINullablesSetToNull, 'provinceInternational');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provinceInternational', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provinceInternational'] = $provinceInternational;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \OpenAPI\Client\Radix\Model\Phonenumber[]|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \OpenAPI\Client\Radix\Model\Phonenumber[]|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return \OpenAPI\Client\Radix\Model\Faxnumber[]|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param \OpenAPI\Client\Radix\Model\Faxnumber[]|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            array_push($this->openAPINullablesSetToNull, 'fax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \OpenAPI\Client\Radix\Model\Email[]|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \OpenAPI\Client\Radix\Model\Email[]|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets emailPEC
     *
     * @return string|null
     */
    public function getEmailPEC()
    {
        return $this->container['emailPEC'];
    }

    /**
     * Sets emailPEC
     *
     * @param string|null $emailPEC emailPEC
     *
     * @return self
     */
    public function setEmailPEC($emailPEC)
    {
        if (is_null($emailPEC)) {
            array_push($this->openAPINullablesSetToNull, 'emailPEC');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emailPEC', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emailPEC'] = $emailPEC;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets isoVatnumber
     *
     * @return \OpenAPI\Client\Radix\Model\IsoVatnumber|null
     */
    public function getIsoVatnumber()
    {
        return $this->container['isoVatnumber'];
    }

    /**
     * Sets isoVatnumber
     *
     * @param \OpenAPI\Client\Radix\Model\IsoVatnumber|null $isoVatnumber isoVatnumber
     *
     * @return self
     */
    public function setIsoVatnumber($isoVatnumber)
    {
        if (is_null($isoVatnumber)) {
            throw new \InvalidArgumentException('non-nullable isoVatnumber cannot be null');
        }
        $this->container['isoVatnumber'] = $isoVatnumber;

        return $this;
    }

    /**
     * Gets taxnumber
     *
     * @return string|null
     */
    public function getTaxnumber()
    {
        return $this->container['taxnumber'];
    }

    /**
     * Sets taxnumber
     *
     * @param string|null $taxnumber taxnumber
     *
     * @return self
     */
    public function setTaxnumber($taxnumber)
    {
        if (is_null($taxnumber)) {
            array_push($this->openAPINullablesSetToNull, 'taxnumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxnumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxnumber'] = $taxnumber;

        return $this;
    }

    /**
     * Gets mapLat
     *
     * @return float|null
     */
    public function getMapLat()
    {
        return $this->container['mapLat'];
    }

    /**
     * Sets mapLat
     *
     * @param float|null $mapLat mapLat
     *
     * @return self
     */
    public function setMapLat($mapLat)
    {
        if (is_null($mapLat)) {
            array_push($this->openAPINullablesSetToNull, 'mapLat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mapLat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mapLat'] = $mapLat;

        return $this;
    }

    /**
     * Gets mapLong
     *
     * @return float|null
     */
    public function getMapLong()
    {
        return $this->container['mapLong'];
    }

    /**
     * Sets mapLong
     *
     * @param float|null $mapLong mapLong
     *
     * @return self
     */
    public function setMapLong($mapLong)
    {
        if (is_null($mapLong)) {
            array_push($this->openAPINullablesSetToNull, 'mapLong');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mapLong', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mapLong'] = $mapLong;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets addressId
     *
     * @return string|null
     */
    public function getAddressId()
    {
        return $this->container['addressId'];
    }

    /**
     * Sets addressId
     *
     * @param string|null $addressId addressId
     *
     * @return self
     */
    public function setAddressId($addressId)
    {
        if (is_null($addressId)) {
            array_push($this->openAPINullablesSetToNull, 'addressId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addressId'] = $addressId;

        return $this;
    }

    /**
     * Gets legalform
     *
     * @return \OpenAPI\Client\Radix\Model\Legalformtype|null
     */
    public function getLegalform()
    {
        return $this->container['legalform'];
    }

    /**
     * Sets legalform
     *
     * @param \OpenAPI\Client\Radix\Model\Legalformtype|null $legalform legalform
     *
     * @return self
     */
    public function setLegalform($legalform)
    {
        if (is_null($legalform)) {
            throw new \InvalidArgumentException('non-nullable legalform cannot be null');
        }
        $this->container['legalform'] = $legalform;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \OpenAPI\Client\Radix\Model\Origintype|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \OpenAPI\Client\Radix\Model\Origintype|null $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets vatCalculation
     *
     * @return \OpenAPI\Client\Radix\Model\VatCalculationtype|null
     */
    public function getVatCalculation()
    {
        return $this->container['vatCalculation'];
    }

    /**
     * Sets vatCalculation
     *
     * @param \OpenAPI\Client\Radix\Model\VatCalculationtype|null $vatCalculation vatCalculation
     *
     * @return self
     */
    public function setVatCalculation($vatCalculation)
    {
        if (is_null($vatCalculation)) {
            throw new \InvalidArgumentException('non-nullable vatCalculation cannot be null');
        }
        $this->container['vatCalculation'] = $vatCalculation;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $agent agent
     *
     * @return self
     */
    public function setAgent($agent)
    {
        if (is_null($agent)) {
            throw new \InvalidArgumentException('non-nullable agent cannot be null');
        }
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets agent2
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getAgent2()
    {
        return $this->container['agent2'];
    }

    /**
     * Sets agent2
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $agent2 agent2
     *
     * @return self
     */
    public function setAgent2($agent2)
    {
        if (is_null($agent2)) {
            throw new \InvalidArgumentException('non-nullable agent2 cannot be null');
        }
        $this->container['agent2'] = $agent2;

        return $this;
    }

    /**
     * Gets agent3
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getAgent3()
    {
        return $this->container['agent3'];
    }

    /**
     * Sets agent3
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $agent3 agent3
     *
     * @return self
     */
    public function setAgent3($agent3)
    {
        if (is_null($agent3)) {
            throw new \InvalidArgumentException('non-nullable agent3 cannot be null');
        }
        $this->container['agent3'] = $agent3;

        return $this;
    }

    /**
     * Gets agent4
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getAgent4()
    {
        return $this->container['agent4'];
    }

    /**
     * Sets agent4
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $agent4 agent4
     *
     * @return self
     */
    public function setAgent4($agent4)
    {
        if (is_null($agent4)) {
            throw new \InvalidArgumentException('non-nullable agent4 cannot be null');
        }
        $this->container['agent4'] = $agent4;

        return $this;
    }

    /**
     * Gets agent5
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getAgent5()
    {
        return $this->container['agent5'];
    }

    /**
     * Sets agent5
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $agent5 agent5
     *
     * @return self
     */
    public function setAgent5($agent5)
    {
        if (is_null($agent5)) {
            throw new \InvalidArgumentException('non-nullable agent5 cannot be null');
        }
        $this->container['agent5'] = $agent5;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $paymentMethod paymentMethod
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        if (is_null($paymentMethod)) {
            throw new \InvalidArgumentException('non-nullable paymentMethod cannot be null');
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets shipmentMethod
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getShipmentMethod()
    {
        return $this->container['shipmentMethod'];
    }

    /**
     * Sets shipmentMethod
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $shipmentMethod shipmentMethod
     *
     * @return self
     */
    public function setShipmentMethod($shipmentMethod)
    {
        if (is_null($shipmentMethod)) {
            throw new \InvalidArgumentException('non-nullable shipmentMethod cannot be null');
        }
        $this->container['shipmentMethod'] = $shipmentMethod;

        return $this;
    }

    /**
     * Gets shipmentMedium
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getShipmentMedium()
    {
        return $this->container['shipmentMedium'];
    }

    /**
     * Sets shipmentMedium
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $shipmentMedium shipmentMedium
     *
     * @return self
     */
    public function setShipmentMedium($shipmentMedium)
    {
        if (is_null($shipmentMedium)) {
            throw new \InvalidArgumentException('non-nullable shipmentMedium cannot be null');
        }
        $this->container['shipmentMedium'] = $shipmentMedium;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $vat vat
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets taxGroup
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getTaxGroup()
    {
        return $this->container['taxGroup'];
    }

    /**
     * Sets taxGroup
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $taxGroup taxGroup
     *
     * @return self
     */
    public function setTaxGroup($taxGroup)
    {
        if (is_null($taxGroup)) {
            throw new \InvalidArgumentException('non-nullable taxGroup cannot be null');
        }
        $this->container['taxGroup'] = $taxGroup;

        return $this;
    }

    /**
     * Gets customerIdInvoice
     *
     * @return string|null
     */
    public function getCustomerIdInvoice()
    {
        return $this->container['customerIdInvoice'];
    }

    /**
     * Sets customerIdInvoice
     *
     * @param string|null $customerIdInvoice customerIdInvoice
     *
     * @return self
     */
    public function setCustomerIdInvoice($customerIdInvoice)
    {
        if (is_null($customerIdInvoice)) {
            array_push($this->openAPINullablesSetToNull, 'customerIdInvoice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerIdInvoice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customerIdInvoice'] = $customerIdInvoice;

        return $this;
    }

    /**
     * Gets numberInvoiceCopies
     *
     * @return int|null
     */
    public function getNumberInvoiceCopies()
    {
        return $this->container['numberInvoiceCopies'];
    }

    /**
     * Sets numberInvoiceCopies
     *
     * @param int|null $numberInvoiceCopies numberInvoiceCopies
     *
     * @return self
     */
    public function setNumberInvoiceCopies($numberInvoiceCopies)
    {
        if (is_null($numberInvoiceCopies)) {
            array_push($this->openAPINullablesSetToNull, 'numberInvoiceCopies');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('numberInvoiceCopies', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['numberInvoiceCopies'] = $numberInvoiceCopies;

        return $this;
    }

    /**
     * Gets customerAccountNumber
     *
     * @return string|null
     */
    public function getCustomerAccountNumber()
    {
        return $this->container['customerAccountNumber'];
    }

    /**
     * Sets customerAccountNumber
     *
     * @param string|null $customerAccountNumber customerAccountNumber
     *
     * @return self
     */
    public function setCustomerAccountNumber($customerAccountNumber)
    {
        if (is_null($customerAccountNumber)) {
            array_push($this->openAPINullablesSetToNull, 'customerAccountNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerAccountNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customerAccountNumber'] = $customerAccountNumber;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets recipientCodePA
     *
     * @return string|null
     */
    public function getRecipientCodePA()
    {
        return $this->container['recipientCodePA'];
    }

    /**
     * Sets recipientCodePA
     *
     * @param string|null $recipientCodePA recipientCodePA
     *
     * @return self
     */
    public function setRecipientCodePA($recipientCodePA)
    {
        if (is_null($recipientCodePA)) {
            array_push($this->openAPINullablesSetToNull, 'recipientCodePA');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipientCodePA', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipientCodePA'] = $recipientCodePA;

        return $this;
    }

    /**
     * Gets recipientCodeB2B
     *
     * @return string|null
     */
    public function getRecipientCodeB2B()
    {
        return $this->container['recipientCodeB2B'];
    }

    /**
     * Sets recipientCodeB2B
     *
     * @param string|null $recipientCodeB2B recipientCodeB2B
     *
     * @return self
     */
    public function setRecipientCodeB2B($recipientCodeB2B)
    {
        if (is_null($recipientCodeB2B)) {
            array_push($this->openAPINullablesSetToNull, 'recipientCodeB2B');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipientCodeB2B', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipientCodeB2B'] = $recipientCodeB2B;

        return $this;
    }

    /**
     * Gets recipientCodeB2BPECMail
     *
     * @return string|null
     */
    public function getRecipientCodeB2BPECMail()
    {
        return $this->container['recipientCodeB2BPECMail'];
    }

    /**
     * Sets recipientCodeB2BPECMail
     *
     * @param string|null $recipientCodeB2BPECMail recipientCodeB2BPECMail
     *
     * @return self
     */
    public function setRecipientCodeB2BPECMail($recipientCodeB2BPECMail)
    {
        if (is_null($recipientCodeB2BPECMail)) {
            array_push($this->openAPINullablesSetToNull, 'recipientCodeB2BPECMail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipientCodeB2BPECMail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipientCodeB2BPECMail'] = $recipientCodeB2BPECMail;

        return $this;
    }

    /**
     * Gets referenceAdministration
     *
     * @return string|null
     */
    public function getReferenceAdministration()
    {
        return $this->container['referenceAdministration'];
    }

    /**
     * Sets referenceAdministration
     *
     * @param string|null $referenceAdministration referenceAdministration
     *
     * @return self
     */
    public function setReferenceAdministration($referenceAdministration)
    {
        if (is_null($referenceAdministration)) {
            array_push($this->openAPINullablesSetToNull, 'referenceAdministration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referenceAdministration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referenceAdministration'] = $referenceAdministration;

        return $this;
    }

    /**
     * Gets splitPayment
     *
     * @return bool|null
     */
    public function getSplitPayment()
    {
        return $this->container['splitPayment'];
    }

    /**
     * Sets splitPayment
     *
     * @param bool|null $splitPayment splitPayment
     *
     * @return self
     */
    public function setSplitPayment($splitPayment)
    {
        if (is_null($splitPayment)) {
            array_push($this->openAPINullablesSetToNull, 'splitPayment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('splitPayment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['splitPayment'] = $splitPayment;

        return $this;
    }

    /**
     * Gets recipientSendElectronically
     *
     * @return \OpenAPI\Client\Radix\Model\RecipientSendElectronicallytype|null
     */
    public function getRecipientSendElectronically()
    {
        return $this->container['recipientSendElectronically'];
    }

    /**
     * Sets recipientSendElectronically
     *
     * @param \OpenAPI\Client\Radix\Model\RecipientSendElectronicallytype|null $recipientSendElectronically recipientSendElectronically
     *
     * @return self
     */
    public function setRecipientSendElectronically($recipientSendElectronically)
    {
        if (is_null($recipientSendElectronically)) {
            throw new \InvalidArgumentException('non-nullable recipientSendElectronically cannot be null');
        }
        $this->container['recipientSendElectronically'] = $recipientSendElectronically;

        return $this;
    }

    /**
     * Gets invoiceSendElectronically
     *
     * @return bool|null
     */
    public function getInvoiceSendElectronically()
    {
        return $this->container['invoiceSendElectronically'];
    }

    /**
     * Sets invoiceSendElectronically
     *
     * @param bool|null $invoiceSendElectronically invoiceSendElectronically
     *
     * @return self
     */
    public function setInvoiceSendElectronically($invoiceSendElectronically)
    {
        if (is_null($invoiceSendElectronically)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceSendElectronically');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceSendElectronically', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceSendElectronically'] = $invoiceSendElectronically;

        return $this;
    }

    /**
     * Gets invoiceSendElectronicallyViaPec
     *
     * @return bool|null
     */
    public function getInvoiceSendElectronicallyViaPec()
    {
        return $this->container['invoiceSendElectronicallyViaPec'];
    }

    /**
     * Sets invoiceSendElectronicallyViaPec
     *
     * @param bool|null $invoiceSendElectronicallyViaPec invoiceSendElectronicallyViaPec
     *
     * @return self
     */
    public function setInvoiceSendElectronicallyViaPec($invoiceSendElectronicallyViaPec)
    {
        if (is_null($invoiceSendElectronicallyViaPec)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceSendElectronicallyViaPec');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceSendElectronicallyViaPec', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceSendElectronicallyViaPec'] = $invoiceSendElectronicallyViaPec;

        return $this;
    }

    /**
     * Gets invoiceSendElectronicallyEmail
     *
     * @return string|null
     */
    public function getInvoiceSendElectronicallyEmail()
    {
        return $this->container['invoiceSendElectronicallyEmail'];
    }

    /**
     * Sets invoiceSendElectronicallyEmail
     *
     * @param string|null $invoiceSendElectronicallyEmail invoiceSendElectronicallyEmail
     *
     * @return self
     */
    public function setInvoiceSendElectronicallyEmail($invoiceSendElectronicallyEmail)
    {
        if (is_null($invoiceSendElectronicallyEmail)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceSendElectronicallyEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceSendElectronicallyEmail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceSendElectronicallyEmail'] = $invoiceSendElectronicallyEmail;

        return $this;
    }

    /**
     * Gets sendDemandsForPayments
     *
     * @return bool|null
     */
    public function getSendDemandsForPayments()
    {
        return $this->container['sendDemandsForPayments'];
    }

    /**
     * Sets sendDemandsForPayments
     *
     * @param bool|null $sendDemandsForPayments sendDemandsForPayments
     *
     * @return self
     */
    public function setSendDemandsForPayments($sendDemandsForPayments)
    {
        if (is_null($sendDemandsForPayments)) {
            array_push($this->openAPINullablesSetToNull, 'sendDemandsForPayments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendDemandsForPayments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sendDemandsForPayments'] = $sendDemandsForPayments;

        return $this;
    }

    /**
     * Gets sendDemandsForPaymentsEmail
     *
     * @return string|null
     */
    public function getSendDemandsForPaymentsEmail()
    {
        return $this->container['sendDemandsForPaymentsEmail'];
    }

    /**
     * Sets sendDemandsForPaymentsEmail
     *
     * @param string|null $sendDemandsForPaymentsEmail sendDemandsForPaymentsEmail
     *
     * @return self
     */
    public function setSendDemandsForPaymentsEmail($sendDemandsForPaymentsEmail)
    {
        if (is_null($sendDemandsForPaymentsEmail)) {
            array_push($this->openAPINullablesSetToNull, 'sendDemandsForPaymentsEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendDemandsForPaymentsEmail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sendDemandsForPaymentsEmail'] = $sendDemandsForPaymentsEmail;

        return $this;
    }

    /**
     * Gets sendDunnings
     *
     * @return bool|null
     */
    public function getSendDunnings()
    {
        return $this->container['sendDunnings'];
    }

    /**
     * Sets sendDunnings
     *
     * @param bool|null $sendDunnings sendDunnings
     *
     * @return self
     */
    public function setSendDunnings($sendDunnings)
    {
        if (is_null($sendDunnings)) {
            array_push($this->openAPINullablesSetToNull, 'sendDunnings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendDunnings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sendDunnings'] = $sendDunnings;

        return $this;
    }

    /**
     * Gets sendDunningsEmail
     *
     * @return string|null
     */
    public function getSendDunningsEmail()
    {
        return $this->container['sendDunningsEmail'];
    }

    /**
     * Sets sendDunningsEmail
     *
     * @param string|null $sendDunningsEmail sendDunningsEmail
     *
     * @return self
     */
    public function setSendDunningsEmail($sendDunningsEmail)
    {
        if (is_null($sendDunningsEmail)) {
            array_push($this->openAPINullablesSetToNull, 'sendDunningsEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendDunningsEmail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sendDunningsEmail'] = $sendDunningsEmail;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime|null $birthday birthday
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        if (is_null($birthday)) {
            array_push($this->openAPINullablesSetToNull, 'birthday');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birthday', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban iban
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            array_push($this->openAPINullablesSetToNull, 'iban');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iban', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets abbreviation
     *
     * @return string|null
     */
    public function getAbbreviation()
    {
        return $this->container['abbreviation'];
    }

    /**
     * Sets abbreviation
     *
     * @param string|null $abbreviation abbreviation
     *
     * @return self
     */
    public function setAbbreviation($abbreviation)
    {
        if (is_null($abbreviation)) {
            array_push($this->openAPINullablesSetToNull, 'abbreviation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abbreviation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['abbreviation'] = $abbreviation;

        return $this;
    }

    /**
     * Gets codeOld
     *
     * @return string|null
     */
    public function getCodeOld()
    {
        return $this->container['codeOld'];
    }

    /**
     * Sets codeOld
     *
     * @param string|null $codeOld codeOld
     *
     * @return self
     */
    public function setCodeOld($codeOld)
    {
        if (is_null($codeOld)) {
            array_push($this->openAPINullablesSetToNull, 'codeOld');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codeOld', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['codeOld'] = $codeOld;

        return $this;
    }

    /**
     * Gets abc
     *
     * @return string|null
     */
    public function getAbc()
    {
        return $this->container['abc'];
    }

    /**
     * Sets abc
     *
     * @param string|null $abc abc
     *
     * @return self
     */
    public function setAbc($abc)
    {
        if (is_null($abc)) {
            array_push($this->openAPINullablesSetToNull, 'abc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['abc'] = $abc;

        return $this;
    }

    /**
     * Gets since
     *
     * @return \DateTime|null
     */
    public function getSince()
    {
        return $this->container['since'];
    }

    /**
     * Sets since
     *
     * @param \DateTime|null $since since
     *
     * @return self
     */
    public function setSince($since)
    {
        if (is_null($since)) {
            array_push($this->openAPINullablesSetToNull, 'since');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('since', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['since'] = $since;

        return $this;
    }

    /**
     * Gets priceprintOnBillOfDelivery
     *
     * @return \OpenAPI\Client\Radix\Model\PriceprintOnBillOfDeliverytype|null
     */
    public function getPriceprintOnBillOfDelivery()
    {
        return $this->container['priceprintOnBillOfDelivery'];
    }

    /**
     * Sets priceprintOnBillOfDelivery
     *
     * @param \OpenAPI\Client\Radix\Model\PriceprintOnBillOfDeliverytype|null $priceprintOnBillOfDelivery priceprintOnBillOfDelivery
     *
     * @return self
     */
    public function setPriceprintOnBillOfDelivery($priceprintOnBillOfDelivery)
    {
        if (is_null($priceprintOnBillOfDelivery)) {
            throw new \InvalidArgumentException('non-nullable priceprintOnBillOfDelivery cannot be null');
        }
        $this->container['priceprintOnBillOfDelivery'] = $priceprintOnBillOfDelivery;

        return $this;
    }

    /**
     * Gets printRemainingOnInvoiceOrBill
     *
     * @return int|null
     */
    public function getPrintRemainingOnInvoiceOrBill()
    {
        return $this->container['printRemainingOnInvoiceOrBill'];
    }

    /**
     * Sets printRemainingOnInvoiceOrBill
     *
     * @param int|null $printRemainingOnInvoiceOrBill printRemainingOnInvoiceOrBill
     *
     * @return self
     */
    public function setPrintRemainingOnInvoiceOrBill($printRemainingOnInvoiceOrBill)
    {
        if (is_null($printRemainingOnInvoiceOrBill)) {
            array_push($this->openAPINullablesSetToNull, 'printRemainingOnInvoiceOrBill');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('printRemainingOnInvoiceOrBill', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['printRemainingOnInvoiceOrBill'] = $printRemainingOnInvoiceOrBill;

        return $this;
    }

    /**
     * Gets partialDeliveryAllowed
     *
     * @return int|null
     */
    public function getPartialDeliveryAllowed()
    {
        return $this->container['partialDeliveryAllowed'];
    }

    /**
     * Sets partialDeliveryAllowed
     *
     * @param int|null $partialDeliveryAllowed partialDeliveryAllowed
     *
     * @return self
     */
    public function setPartialDeliveryAllowed($partialDeliveryAllowed)
    {
        if (is_null($partialDeliveryAllowed)) {
            array_push($this->openAPINullablesSetToNull, 'partialDeliveryAllowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('partialDeliveryAllowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['partialDeliveryAllowed'] = $partialDeliveryAllowed;

        return $this;
    }

    /**
     * Gets dunningGroup
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getDunningGroup()
    {
        return $this->container['dunningGroup'];
    }

    /**
     * Sets dunningGroup
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $dunningGroup dunningGroup
     *
     * @return self
     */
    public function setDunningGroup($dunningGroup)
    {
        if (is_null($dunningGroup)) {
            throw new \InvalidArgumentException('non-nullable dunningGroup cannot be null');
        }
        $this->container['dunningGroup'] = $dunningGroup;

        return $this;
    }

    /**
     * Gets creditLimit
     *
     * @return float|null
     */
    public function getCreditLimit()
    {
        return $this->container['creditLimit'];
    }

    /**
     * Sets creditLimit
     *
     * @param float|null $creditLimit creditLimit
     *
     * @return self
     */
    public function setCreditLimit($creditLimit)
    {
        if (is_null($creditLimit)) {
            array_push($this->openAPINullablesSetToNull, 'creditLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creditLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creditLimit'] = $creditLimit;

        return $this;
    }

    /**
     * Gets noteOfFidoControl
     *
     * @return string|null
     */
    public function getNoteOfFidoControl()
    {
        return $this->container['noteOfFidoControl'];
    }

    /**
     * Sets noteOfFidoControl
     *
     * @param string|null $noteOfFidoControl noteOfFidoControl
     *
     * @return self
     */
    public function setNoteOfFidoControl($noteOfFidoControl)
    {
        if (is_null($noteOfFidoControl)) {
            array_push($this->openAPINullablesSetToNull, 'noteOfFidoControl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('noteOfFidoControl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['noteOfFidoControl'] = $noteOfFidoControl;

        return $this;
    }

    /**
     * Gets freighter
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getFreighter()
    {
        return $this->container['freighter'];
    }

    /**
     * Sets freighter
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $freighter freighter
     *
     * @return self
     */
    public function setFreighter($freighter)
    {
        if (is_null($freighter)) {
            throw new \InvalidArgumentException('non-nullable freighter cannot be null');
        }
        $this->container['freighter'] = $freighter;

        return $this;
    }

    /**
     * Gets priceKey
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getPriceKey()
    {
        return $this->container['priceKey'];
    }

    /**
     * Sets priceKey
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $priceKey priceKey
     *
     * @return self
     */
    public function setPriceKey($priceKey)
    {
        if (is_null($priceKey)) {
            throw new \InvalidArgumentException('non-nullable priceKey cannot be null');
        }
        $this->container['priceKey'] = $priceKey;

        return $this;
    }

    /**
     * Gets priceList
     *
     * @return string|null
     */
    public function getPriceList()
    {
        return $this->container['priceList'];
    }

    /**
     * Sets priceList
     *
     * @param string|null $priceList priceList
     *
     * @return self
     */
    public function setPriceList($priceList)
    {
        if (is_null($priceList)) {
            array_push($this->openAPINullablesSetToNull, 'priceList');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priceList', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priceList'] = $priceList;

        return $this;
    }

    /**
     * Gets deliveryCondition
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getDeliveryCondition()
    {
        return $this->container['deliveryCondition'];
    }

    /**
     * Sets deliveryCondition
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $deliveryCondition deliveryCondition
     *
     * @return self
     */
    public function setDeliveryCondition($deliveryCondition)
    {
        if (is_null($deliveryCondition)) {
            throw new \InvalidArgumentException('non-nullable deliveryCondition cannot be null');
        }
        $this->container['deliveryCondition'] = $deliveryCondition;

        return $this;
    }

    /**
     * Gets proposalDocument
     *
     * @return \OpenAPI\Client\Radix\Model\ProposalDocumentType|null
     */
    public function getProposalDocument()
    {
        return $this->container['proposalDocument'];
    }

    /**
     * Sets proposalDocument
     *
     * @param \OpenAPI\Client\Radix\Model\ProposalDocumentType|null $proposalDocument proposalDocument
     *
     * @return self
     */
    public function setProposalDocument($proposalDocument)
    {
        if (is_null($proposalDocument)) {
            throw new \InvalidArgumentException('non-nullable proposalDocument cannot be null');
        }
        $this->container['proposalDocument'] = $proposalDocument;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname firstname
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        if (is_null($firstname)) {
            array_push($this->openAPINullablesSetToNull, 'firstname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname surname
     *
     * @return self
     */
    public function setSurname($surname)
    {
        if (is_null($surname)) {
            array_push($this->openAPINullablesSetToNull, 'surname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('surname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets displayLineDiscounts
     *
     * @return bool|null
     */
    public function getDisplayLineDiscounts()
    {
        return $this->container['displayLineDiscounts'];
    }

    /**
     * Sets displayLineDiscounts
     *
     * @param bool|null $displayLineDiscounts displayLineDiscounts
     *
     * @return self
     */
    public function setDisplayLineDiscounts($displayLineDiscounts)
    {
        if (is_null($displayLineDiscounts)) {
            array_push($this->openAPINullablesSetToNull, 'displayLineDiscounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('displayLineDiscounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['displayLineDiscounts'] = $displayLineDiscounts;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool|null
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool|null $inactive inactive
     *
     * @return self
     */
    public function setInactive($inactive)
    {
        if (is_null($inactive)) {
            array_push($this->openAPINullablesSetToNull, 'inactive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inactive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets lockedSince
     *
     * @return \DateTime|null
     */
    public function getLockedSince()
    {
        return $this->container['lockedSince'];
    }

    /**
     * Sets lockedSince
     *
     * @param \DateTime|null $lockedSince lockedSince
     *
     * @return self
     */
    public function setLockedSince($lockedSince)
    {
        if (is_null($lockedSince)) {
            array_push($this->openAPINullablesSetToNull, 'lockedSince');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lockedSince', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lockedSince'] = $lockedSince;

        return $this;
    }

    /**
     * Gets openingHours
     *
     * @return string|null
     */
    public function getOpeningHours()
    {
        return $this->container['openingHours'];
    }

    /**
     * Sets openingHours
     *
     * @param string|null $openingHours openingHours
     *
     * @return self
     */
    public function setOpeningHours($openingHours)
    {
        if (is_null($openingHours)) {
            array_push($this->openAPINullablesSetToNull, 'openingHours');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('openingHours', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['openingHours'] = $openingHours;

        return $this;
    }

    /**
     * Gets invoiceDiscount1
     *
     * @return float|null
     */
    public function getInvoiceDiscount1()
    {
        return $this->container['invoiceDiscount1'];
    }

    /**
     * Sets invoiceDiscount1
     *
     * @param float|null $invoiceDiscount1 invoiceDiscount1
     *
     * @return self
     */
    public function setInvoiceDiscount1($invoiceDiscount1)
    {
        if (is_null($invoiceDiscount1)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceDiscount1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceDiscount1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceDiscount1'] = $invoiceDiscount1;

        return $this;
    }

    /**
     * Gets invoiceDiscount2
     *
     * @return float|null
     */
    public function getInvoiceDiscount2()
    {
        return $this->container['invoiceDiscount2'];
    }

    /**
     * Sets invoiceDiscount2
     *
     * @param float|null $invoiceDiscount2 invoiceDiscount2
     *
     * @return self
     */
    public function setInvoiceDiscount2($invoiceDiscount2)
    {
        if (is_null($invoiceDiscount2)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceDiscount2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceDiscount2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceDiscount2'] = $invoiceDiscount2;

        return $this;
    }

    /**
     * Gets invoiceDiscount3
     *
     * @return float|null
     */
    public function getInvoiceDiscount3()
    {
        return $this->container['invoiceDiscount3'];
    }

    /**
     * Sets invoiceDiscount3
     *
     * @param float|null $invoiceDiscount3 invoiceDiscount3
     *
     * @return self
     */
    public function setInvoiceDiscount3($invoiceDiscount3)
    {
        if (is_null($invoiceDiscount3)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceDiscount3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceDiscount3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceDiscount3'] = $invoiceDiscount3;

        return $this;
    }

    /**
     * Gets invoiceDiscount4
     *
     * @return float|null
     */
    public function getInvoiceDiscount4()
    {
        return $this->container['invoiceDiscount4'];
    }

    /**
     * Sets invoiceDiscount4
     *
     * @param float|null $invoiceDiscount4 invoiceDiscount4
     *
     * @return self
     */
    public function setInvoiceDiscount4($invoiceDiscount4)
    {
        if (is_null($invoiceDiscount4)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceDiscount4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceDiscount4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceDiscount4'] = $invoiceDiscount4;

        return $this;
    }

    /**
     * Gets invoiceDiscount5
     *
     * @return float|null
     */
    public function getInvoiceDiscount5()
    {
        return $this->container['invoiceDiscount5'];
    }

    /**
     * Sets invoiceDiscount5
     *
     * @param float|null $invoiceDiscount5 invoiceDiscount5
     *
     * @return self
     */
    public function setInvoiceDiscount5($invoiceDiscount5)
    {
        if (is_null($invoiceDiscount5)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceDiscount5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceDiscount5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceDiscount5'] = $invoiceDiscount5;

        return $this;
    }

    /**
     * Gets reverseCharge
     *
     * @return bool|null
     */
    public function getReverseCharge()
    {
        return $this->container['reverseCharge'];
    }

    /**
     * Sets reverseCharge
     *
     * @param bool|null $reverseCharge reverseCharge
     *
     * @return self
     */
    public function setReverseCharge($reverseCharge)
    {
        if (is_null($reverseCharge)) {
            array_push($this->openAPINullablesSetToNull, 'reverseCharge');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reverseCharge', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reverseCharge'] = $reverseCharge;

        return $this;
    }

    /**
     * Gets xInvoiceReferenceId
     *
     * @return string|null
     */
    public function getXInvoiceReferenceId()
    {
        return $this->container['xInvoiceReferenceId'];
    }

    /**
     * Sets xInvoiceReferenceId
     *
     * @param string|null $xInvoiceReferenceId xInvoiceReferenceId
     *
     * @return self
     */
    public function setXInvoiceReferenceId($xInvoiceReferenceId)
    {
        if (is_null($xInvoiceReferenceId)) {
            array_push($this->openAPINullablesSetToNull, 'xInvoiceReferenceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xInvoiceReferenceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xInvoiceReferenceId'] = $xInvoiceReferenceId;

        return $this;
    }

    /**
     * Gets xInvoiceEmail
     *
     * @return string|null
     */
    public function getXInvoiceEmail()
    {
        return $this->container['xInvoiceEmail'];
    }

    /**
     * Sets xInvoiceEmail
     *
     * @param string|null $xInvoiceEmail xInvoiceEmail
     *
     * @return self
     */
    public function setXInvoiceEmail($xInvoiceEmail)
    {
        if (is_null($xInvoiceEmail)) {
            array_push($this->openAPINullablesSetToNull, 'xInvoiceEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xInvoiceEmail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['xInvoiceEmail'] = $xInvoiceEmail;

        return $this;
    }

    /**
     * Gets bank
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getBank()
    {
        return $this->container['bank'];
    }

    /**
     * Sets bank
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $bank bank
     *
     * @return self
     */
    public function setBank($bank)
    {
        if (is_null($bank)) {
            throw new \InvalidArgumentException('non-nullable bank cannot be null');
        }
        $this->container['bank'] = $bank;

        return $this;
    }

    /**
     * Gets saleBlockedFrom
     *
     * @return \DateTime|null
     */
    public function getSaleBlockedFrom()
    {
        return $this->container['saleBlockedFrom'];
    }

    /**
     * Sets saleBlockedFrom
     *
     * @param \DateTime|null $saleBlockedFrom saleBlockedFrom
     *
     * @return self
     */
    public function setSaleBlockedFrom($saleBlockedFrom)
    {
        if (is_null($saleBlockedFrom)) {
            array_push($this->openAPINullablesSetToNull, 'saleBlockedFrom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('saleBlockedFrom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['saleBlockedFrom'] = $saleBlockedFrom;

        return $this;
    }

    /**
     * Gets createDeliveryNoteBlocked
     *
     * @return bool|null
     */
    public function getCreateDeliveryNoteBlocked()
    {
        return $this->container['createDeliveryNoteBlocked'];
    }

    /**
     * Sets createDeliveryNoteBlocked
     *
     * @param bool|null $createDeliveryNoteBlocked createDeliveryNoteBlocked
     *
     * @return self
     */
    public function setCreateDeliveryNoteBlocked($createDeliveryNoteBlocked)
    {
        if (is_null($createDeliveryNoteBlocked)) {
            array_push($this->openAPINullablesSetToNull, 'createDeliveryNoteBlocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createDeliveryNoteBlocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createDeliveryNoteBlocked'] = $createDeliveryNoteBlocked;

        return $this;
    }

    /**
     * Gets createOfferBlocked
     *
     * @return bool|null
     */
    public function getCreateOfferBlocked()
    {
        return $this->container['createOfferBlocked'];
    }

    /**
     * Sets createOfferBlocked
     *
     * @param bool|null $createOfferBlocked createOfferBlocked
     *
     * @return self
     */
    public function setCreateOfferBlocked($createOfferBlocked)
    {
        if (is_null($createOfferBlocked)) {
            array_push($this->openAPINullablesSetToNull, 'createOfferBlocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createOfferBlocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createOfferBlocked'] = $createOfferBlocked;

        return $this;
    }

    /**
     * Gets createOrderBlocked
     *
     * @return bool|null
     */
    public function getCreateOrderBlocked()
    {
        return $this->container['createOrderBlocked'];
    }

    /**
     * Sets createOrderBlocked
     *
     * @param bool|null $createOrderBlocked createOrderBlocked
     *
     * @return self
     */
    public function setCreateOrderBlocked($createOrderBlocked)
    {
        if (is_null($createOrderBlocked)) {
            array_push($this->openAPINullablesSetToNull, 'createOrderBlocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createOrderBlocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createOrderBlocked'] = $createOrderBlocked;

        return $this;
    }

    /**
     * Gets createInvoiceBlocked
     *
     * @return bool|null
     */
    public function getCreateInvoiceBlocked()
    {
        return $this->container['createInvoiceBlocked'];
    }

    /**
     * Sets createInvoiceBlocked
     *
     * @param bool|null $createInvoiceBlocked createInvoiceBlocked
     *
     * @return self
     */
    public function setCreateInvoiceBlocked($createInvoiceBlocked)
    {
        if (is_null($createInvoiceBlocked)) {
            array_push($this->openAPINullablesSetToNull, 'createInvoiceBlocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createInvoiceBlocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createInvoiceBlocked'] = $createInvoiceBlocked;

        return $this;
    }

    /**
     * Gets createTicketBlocked
     *
     * @return bool|null
     */
    public function getCreateTicketBlocked()
    {
        return $this->container['createTicketBlocked'];
    }

    /**
     * Sets createTicketBlocked
     *
     * @param bool|null $createTicketBlocked createTicketBlocked
     *
     * @return self
     */
    public function setCreateTicketBlocked($createTicketBlocked)
    {
        if (is_null($createTicketBlocked)) {
            array_push($this->openAPINullablesSetToNull, 'createTicketBlocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createTicketBlocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createTicketBlocked'] = $createTicketBlocked;

        return $this;
    }

    /**
     * Gets createPackingListBlocked
     *
     * @return bool|null
     */
    public function getCreatePackingListBlocked()
    {
        return $this->container['createPackingListBlocked'];
    }

    /**
     * Sets createPackingListBlocked
     *
     * @param bool|null $createPackingListBlocked createPackingListBlocked
     *
     * @return self
     */
    public function setCreatePackingListBlocked($createPackingListBlocked)
    {
        if (is_null($createPackingListBlocked)) {
            array_push($this->openAPINullablesSetToNull, 'createPackingListBlocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createPackingListBlocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createPackingListBlocked'] = $createPackingListBlocked;

        return $this;
    }

    /**
     * Gets createCashReceiptBlocked
     *
     * @return bool|null
     */
    public function getCreateCashReceiptBlocked()
    {
        return $this->container['createCashReceiptBlocked'];
    }

    /**
     * Sets createCashReceiptBlocked
     *
     * @param bool|null $createCashReceiptBlocked createCashReceiptBlocked
     *
     * @return self
     */
    public function setCreateCashReceiptBlocked($createCashReceiptBlocked)
    {
        if (is_null($createCashReceiptBlocked)) {
            array_push($this->openAPINullablesSetToNull, 'createCashReceiptBlocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createCashReceiptBlocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createCashReceiptBlocked'] = $createCashReceiptBlocked;

        return $this;
    }

    /**
     * Gets priceIncludingVat
     *
     * @return bool|null
     */
    public function getPriceIncludingVat()
    {
        return $this->container['priceIncludingVat'];
    }

    /**
     * Sets priceIncludingVat
     *
     * @param bool|null $priceIncludingVat priceIncludingVat
     *
     * @return self
     */
    public function setPriceIncludingVat($priceIncludingVat)
    {
        if (is_null($priceIncludingVat)) {
            array_push($this->openAPINullablesSetToNull, 'priceIncludingVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priceIncludingVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priceIncludingVat'] = $priceIncludingVat;

        return $this;
    }

    /**
     * Gets numberMin
     *
     * @return int|null
     */
    public function getNumberMin()
    {
        return $this->container['numberMin'];
    }

    /**
     * Sets numberMin
     *
     * @param int|null $numberMin numberMin
     *
     * @return self
     */
    public function setNumberMin($numberMin)
    {
        if (is_null($numberMin)) {
            array_push($this->openAPINullablesSetToNull, 'numberMin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('numberMin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['numberMin'] = $numberMin;

        return $this;
    }

    /**
     * Gets numberMax
     *
     * @return int|null
     */
    public function getNumberMax()
    {
        return $this->container['numberMax'];
    }

    /**
     * Sets numberMax
     *
     * @param int|null $numberMax numberMax
     *
     * @return self
     */
    public function setNumberMax($numberMax)
    {
        if (is_null($numberMax)) {
            array_push($this->openAPINullablesSetToNull, 'numberMax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('numberMax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['numberMax'] = $numberMax;

        return $this;
    }

    /**
     * Gets additionalFields
     *
     * @return \OpenAPI\Client\Radix\Model\AdditionalFieldBase[]|null
     */
    public function getAdditionalFields()
    {
        return $this->container['additionalFields'];
    }

    /**
     * Sets additionalFields
     *
     * @param \OpenAPI\Client\Radix\Model\AdditionalFieldBase[]|null $additionalFields additionalFields
     *
     * @return self
     */
    public function setAdditionalFields($additionalFields)
    {
        if (is_null($additionalFields)) {
            array_push($this->openAPINullablesSetToNull, 'additionalFields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additionalFields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additionalFields'] = $additionalFields;

        return $this;
    }

    /**
     * Gets classifications
     *
     * @return \OpenAPI\Client\Radix\Model\ClassificationV1Base[]|null
     */
    public function getClassifications()
    {
        return $this->container['classifications'];
    }

    /**
     * Sets classifications
     *
     * @param \OpenAPI\Client\Radix\Model\ClassificationV1Base[]|null $classifications classifications
     *
     * @return self
     */
    public function setClassifications($classifications)
    {
        if (is_null($classifications)) {
            array_push($this->openAPINullablesSetToNull, 'classifications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('classifications', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['classifications'] = $classifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


