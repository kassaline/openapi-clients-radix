<?php
/**
 * ArticlePatchCommand
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Model;

use \ArrayAccess;
use \OpenAPI\Client\Radix\ObjectSerializer;

/**
 * ArticlePatchCommand Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ArticlePatchCommand implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ArticlePatchCommand';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'searchText' => 'string',
        'barcode' => 'string',
        'model' => 'string',
        'producer' => '\OpenAPI\Client\Radix\Model\IdCode',
        'inactive' => 'bool',
        'blocked' => '\DateTime',
        'isDiscontinued' => 'bool',
        'warrantyCustomer' => '\OpenAPI\Client\Radix\Model\IdCode',
        'warrantyProducer' => '\OpenAPI\Client\Radix\Model\IdCode',
        'minimumOrderQuantitySales' => 'float',
        'intrastatTypeOfMovement' => '\OpenAPI\Client\Radix\Model\IntrastatMovingtype',
        'intrastatOriginCountry' => 'string',
        'intrastatGroup' => 'string',
        'intrastatConversion' => 'float',
        'descriptions' => '\OpenAPI\Client\Radix\Model\Description[]',
        'descriptionNumberOffer' => 'int',
        'descriptionNumberOrder' => 'int',
        'descriptionNumberDeliveryNote' => 'int',
        'descriptionNumberInvoice' => 'int',
        'descriptionNumberArticle' => 'int',
        'descriptionNumberPurchaseOrder' => 'int',
        'descriptionNumberCatalog' => 'int',
        'id' => 'string',
        'additionalFields' => '\OpenAPI\Client\Radix\Model\AdditionalFieldBase[]',
        'classifications' => '\OpenAPI\Client\Radix\Model\ClassificationV1Base[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'searchText' => null,
        'barcode' => null,
        'model' => null,
        'producer' => null,
        'inactive' => null,
        'blocked' => 'date-time',
        'isDiscontinued' => null,
        'warrantyCustomer' => null,
        'warrantyProducer' => null,
        'minimumOrderQuantitySales' => 'double',
        'intrastatTypeOfMovement' => null,
        'intrastatOriginCountry' => null,
        'intrastatGroup' => null,
        'intrastatConversion' => 'double',
        'descriptions' => null,
        'descriptionNumberOffer' => 'int32',
        'descriptionNumberOrder' => 'int32',
        'descriptionNumberDeliveryNote' => 'int32',
        'descriptionNumberInvoice' => 'int32',
        'descriptionNumberArticle' => 'int32',
        'descriptionNumberPurchaseOrder' => 'int32',
        'descriptionNumberCatalog' => 'int32',
        'id' => null,
        'additionalFields' => null,
        'classifications' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'searchText' => true,
        'barcode' => true,
        'model' => true,
        'producer' => false,
        'inactive' => true,
        'blocked' => true,
        'isDiscontinued' => true,
        'warrantyCustomer' => false,
        'warrantyProducer' => false,
        'minimumOrderQuantitySales' => true,
        'intrastatTypeOfMovement' => false,
        'intrastatOriginCountry' => true,
        'intrastatGroup' => true,
        'intrastatConversion' => true,
        'descriptions' => true,
        'descriptionNumberOffer' => true,
        'descriptionNumberOrder' => true,
        'descriptionNumberDeliveryNote' => true,
        'descriptionNumberInvoice' => true,
        'descriptionNumberArticle' => true,
        'descriptionNumberPurchaseOrder' => true,
        'descriptionNumberCatalog' => true,
        'id' => true,
        'additionalFields' => true,
        'classifications' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'searchText' => 'searchText',
        'barcode' => 'barcode',
        'model' => 'model',
        'producer' => 'producer',
        'inactive' => 'inactive',
        'blocked' => 'blocked',
        'isDiscontinued' => 'isDiscontinued',
        'warrantyCustomer' => 'warrantyCustomer',
        'warrantyProducer' => 'warrantyProducer',
        'minimumOrderQuantitySales' => 'minimumOrderQuantitySales',
        'intrastatTypeOfMovement' => 'intrastatTypeOfMovement',
        'intrastatOriginCountry' => 'intrastatOriginCountry',
        'intrastatGroup' => 'intrastatGroup',
        'intrastatConversion' => 'intrastatConversion',
        'descriptions' => 'descriptions',
        'descriptionNumberOffer' => 'descriptionNumberOffer',
        'descriptionNumberOrder' => 'descriptionNumberOrder',
        'descriptionNumberDeliveryNote' => 'descriptionNumberDeliveryNote',
        'descriptionNumberInvoice' => 'descriptionNumberInvoice',
        'descriptionNumberArticle' => 'descriptionNumberArticle',
        'descriptionNumberPurchaseOrder' => 'descriptionNumberPurchaseOrder',
        'descriptionNumberCatalog' => 'descriptionNumberCatalog',
        'id' => 'id',
        'additionalFields' => 'additionalFields',
        'classifications' => 'classifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'searchText' => 'setSearchText',
        'barcode' => 'setBarcode',
        'model' => 'setModel',
        'producer' => 'setProducer',
        'inactive' => 'setInactive',
        'blocked' => 'setBlocked',
        'isDiscontinued' => 'setIsDiscontinued',
        'warrantyCustomer' => 'setWarrantyCustomer',
        'warrantyProducer' => 'setWarrantyProducer',
        'minimumOrderQuantitySales' => 'setMinimumOrderQuantitySales',
        'intrastatTypeOfMovement' => 'setIntrastatTypeOfMovement',
        'intrastatOriginCountry' => 'setIntrastatOriginCountry',
        'intrastatGroup' => 'setIntrastatGroup',
        'intrastatConversion' => 'setIntrastatConversion',
        'descriptions' => 'setDescriptions',
        'descriptionNumberOffer' => 'setDescriptionNumberOffer',
        'descriptionNumberOrder' => 'setDescriptionNumberOrder',
        'descriptionNumberDeliveryNote' => 'setDescriptionNumberDeliveryNote',
        'descriptionNumberInvoice' => 'setDescriptionNumberInvoice',
        'descriptionNumberArticle' => 'setDescriptionNumberArticle',
        'descriptionNumberPurchaseOrder' => 'setDescriptionNumberPurchaseOrder',
        'descriptionNumberCatalog' => 'setDescriptionNumberCatalog',
        'id' => 'setId',
        'additionalFields' => 'setAdditionalFields',
        'classifications' => 'setClassifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'searchText' => 'getSearchText',
        'barcode' => 'getBarcode',
        'model' => 'getModel',
        'producer' => 'getProducer',
        'inactive' => 'getInactive',
        'blocked' => 'getBlocked',
        'isDiscontinued' => 'getIsDiscontinued',
        'warrantyCustomer' => 'getWarrantyCustomer',
        'warrantyProducer' => 'getWarrantyProducer',
        'minimumOrderQuantitySales' => 'getMinimumOrderQuantitySales',
        'intrastatTypeOfMovement' => 'getIntrastatTypeOfMovement',
        'intrastatOriginCountry' => 'getIntrastatOriginCountry',
        'intrastatGroup' => 'getIntrastatGroup',
        'intrastatConversion' => 'getIntrastatConversion',
        'descriptions' => 'getDescriptions',
        'descriptionNumberOffer' => 'getDescriptionNumberOffer',
        'descriptionNumberOrder' => 'getDescriptionNumberOrder',
        'descriptionNumberDeliveryNote' => 'getDescriptionNumberDeliveryNote',
        'descriptionNumberInvoice' => 'getDescriptionNumberInvoice',
        'descriptionNumberArticle' => 'getDescriptionNumberArticle',
        'descriptionNumberPurchaseOrder' => 'getDescriptionNumberPurchaseOrder',
        'descriptionNumberCatalog' => 'getDescriptionNumberCatalog',
        'id' => 'getId',
        'additionalFields' => 'getAdditionalFields',
        'classifications' => 'getClassifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('searchText', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('producer', $data ?? [], null);
        $this->setIfExists('inactive', $data ?? [], null);
        $this->setIfExists('blocked', $data ?? [], null);
        $this->setIfExists('isDiscontinued', $data ?? [], null);
        $this->setIfExists('warrantyCustomer', $data ?? [], null);
        $this->setIfExists('warrantyProducer', $data ?? [], null);
        $this->setIfExists('minimumOrderQuantitySales', $data ?? [], null);
        $this->setIfExists('intrastatTypeOfMovement', $data ?? [], null);
        $this->setIfExists('intrastatOriginCountry', $data ?? [], null);
        $this->setIfExists('intrastatGroup', $data ?? [], null);
        $this->setIfExists('intrastatConversion', $data ?? [], null);
        $this->setIfExists('descriptions', $data ?? [], null);
        $this->setIfExists('descriptionNumberOffer', $data ?? [], null);
        $this->setIfExists('descriptionNumberOrder', $data ?? [], null);
        $this->setIfExists('descriptionNumberDeliveryNote', $data ?? [], null);
        $this->setIfExists('descriptionNumberInvoice', $data ?? [], null);
        $this->setIfExists('descriptionNumberArticle', $data ?? [], null);
        $this->setIfExists('descriptionNumberPurchaseOrder', $data ?? [], null);
        $this->setIfExists('descriptionNumberCatalog', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('additionalFields', $data ?? [], null);
        $this->setIfExists('classifications', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets searchText
     *
     * @return string|null
     */
    public function getSearchText()
    {
        return $this->container['searchText'];
    }

    /**
     * Sets searchText
     *
     * @param string|null $searchText searchText
     *
     * @return self
     */
    public function setSearchText($searchText)
    {
        if (is_null($searchText)) {
            array_push($this->openAPINullablesSetToNull, 'searchText');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('searchText', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['searchText'] = $searchText;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode barcode
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            array_push($this->openAPINullablesSetToNull, 'barcode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('barcode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            array_push($this->openAPINullablesSetToNull, 'model');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('model', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets producer
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getProducer()
    {
        return $this->container['producer'];
    }

    /**
     * Sets producer
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $producer producer
     *
     * @return self
     */
    public function setProducer($producer)
    {
        if (is_null($producer)) {
            throw new \InvalidArgumentException('non-nullable producer cannot be null');
        }
        $this->container['producer'] = $producer;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool|null
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool|null $inactive inactive
     *
     * @return self
     */
    public function setInactive($inactive)
    {
        if (is_null($inactive)) {
            array_push($this->openAPINullablesSetToNull, 'inactive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inactive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return \DateTime|null
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param \DateTime|null $blocked blocked
     *
     * @return self
     */
    public function setBlocked($blocked)
    {
        if (is_null($blocked)) {
            array_push($this->openAPINullablesSetToNull, 'blocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets isDiscontinued
     *
     * @return bool|null
     */
    public function getIsDiscontinued()
    {
        return $this->container['isDiscontinued'];
    }

    /**
     * Sets isDiscontinued
     *
     * @param bool|null $isDiscontinued isDiscontinued
     *
     * @return self
     */
    public function setIsDiscontinued($isDiscontinued)
    {
        if (is_null($isDiscontinued)) {
            array_push($this->openAPINullablesSetToNull, 'isDiscontinued');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isDiscontinued', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isDiscontinued'] = $isDiscontinued;

        return $this;
    }

    /**
     * Gets warrantyCustomer
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getWarrantyCustomer()
    {
        return $this->container['warrantyCustomer'];
    }

    /**
     * Sets warrantyCustomer
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $warrantyCustomer warrantyCustomer
     *
     * @return self
     */
    public function setWarrantyCustomer($warrantyCustomer)
    {
        if (is_null($warrantyCustomer)) {
            throw new \InvalidArgumentException('non-nullable warrantyCustomer cannot be null');
        }
        $this->container['warrantyCustomer'] = $warrantyCustomer;

        return $this;
    }

    /**
     * Gets warrantyProducer
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getWarrantyProducer()
    {
        return $this->container['warrantyProducer'];
    }

    /**
     * Sets warrantyProducer
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $warrantyProducer warrantyProducer
     *
     * @return self
     */
    public function setWarrantyProducer($warrantyProducer)
    {
        if (is_null($warrantyProducer)) {
            throw new \InvalidArgumentException('non-nullable warrantyProducer cannot be null');
        }
        $this->container['warrantyProducer'] = $warrantyProducer;

        return $this;
    }

    /**
     * Gets minimumOrderQuantitySales
     *
     * @return float|null
     */
    public function getMinimumOrderQuantitySales()
    {
        return $this->container['minimumOrderQuantitySales'];
    }

    /**
     * Sets minimumOrderQuantitySales
     *
     * @param float|null $minimumOrderQuantitySales minimumOrderQuantitySales
     *
     * @return self
     */
    public function setMinimumOrderQuantitySales($minimumOrderQuantitySales)
    {
        if (is_null($minimumOrderQuantitySales)) {
            array_push($this->openAPINullablesSetToNull, 'minimumOrderQuantitySales');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimumOrderQuantitySales', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minimumOrderQuantitySales'] = $minimumOrderQuantitySales;

        return $this;
    }

    /**
     * Gets intrastatTypeOfMovement
     *
     * @return \OpenAPI\Client\Radix\Model\IntrastatMovingtype|null
     */
    public function getIntrastatTypeOfMovement()
    {
        return $this->container['intrastatTypeOfMovement'];
    }

    /**
     * Sets intrastatTypeOfMovement
     *
     * @param \OpenAPI\Client\Radix\Model\IntrastatMovingtype|null $intrastatTypeOfMovement intrastatTypeOfMovement
     *
     * @return self
     */
    public function setIntrastatTypeOfMovement($intrastatTypeOfMovement)
    {
        if (is_null($intrastatTypeOfMovement)) {
            throw new \InvalidArgumentException('non-nullable intrastatTypeOfMovement cannot be null');
        }
        $this->container['intrastatTypeOfMovement'] = $intrastatTypeOfMovement;

        return $this;
    }

    /**
     * Gets intrastatOriginCountry
     *
     * @return string|null
     */
    public function getIntrastatOriginCountry()
    {
        return $this->container['intrastatOriginCountry'];
    }

    /**
     * Sets intrastatOriginCountry
     *
     * @param string|null $intrastatOriginCountry intrastatOriginCountry
     *
     * @return self
     */
    public function setIntrastatOriginCountry($intrastatOriginCountry)
    {
        if (is_null($intrastatOriginCountry)) {
            array_push($this->openAPINullablesSetToNull, 'intrastatOriginCountry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intrastatOriginCountry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['intrastatOriginCountry'] = $intrastatOriginCountry;

        return $this;
    }

    /**
     * Gets intrastatGroup
     *
     * @return string|null
     */
    public function getIntrastatGroup()
    {
        return $this->container['intrastatGroup'];
    }

    /**
     * Sets intrastatGroup
     *
     * @param string|null $intrastatGroup intrastatGroup
     *
     * @return self
     */
    public function setIntrastatGroup($intrastatGroup)
    {
        if (is_null($intrastatGroup)) {
            array_push($this->openAPINullablesSetToNull, 'intrastatGroup');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intrastatGroup', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['intrastatGroup'] = $intrastatGroup;

        return $this;
    }

    /**
     * Gets intrastatConversion
     *
     * @return float|null
     */
    public function getIntrastatConversion()
    {
        return $this->container['intrastatConversion'];
    }

    /**
     * Sets intrastatConversion
     *
     * @param float|null $intrastatConversion intrastatConversion
     *
     * @return self
     */
    public function setIntrastatConversion($intrastatConversion)
    {
        if (is_null($intrastatConversion)) {
            array_push($this->openAPINullablesSetToNull, 'intrastatConversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intrastatConversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['intrastatConversion'] = $intrastatConversion;

        return $this;
    }

    /**
     * Gets descriptions
     *
     * @return \OpenAPI\Client\Radix\Model\Description[]|null
     */
    public function getDescriptions()
    {
        return $this->container['descriptions'];
    }

    /**
     * Sets descriptions
     *
     * @param \OpenAPI\Client\Radix\Model\Description[]|null $descriptions descriptions
     *
     * @return self
     */
    public function setDescriptions($descriptions)
    {
        if (is_null($descriptions)) {
            array_push($this->openAPINullablesSetToNull, 'descriptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descriptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descriptions'] = $descriptions;

        return $this;
    }

    /**
     * Gets descriptionNumberOffer
     *
     * @return int|null
     */
    public function getDescriptionNumberOffer()
    {
        return $this->container['descriptionNumberOffer'];
    }

    /**
     * Sets descriptionNumberOffer
     *
     * @param int|null $descriptionNumberOffer descriptionNumberOffer
     *
     * @return self
     */
    public function setDescriptionNumberOffer($descriptionNumberOffer)
    {
        if (is_null($descriptionNumberOffer)) {
            array_push($this->openAPINullablesSetToNull, 'descriptionNumberOffer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descriptionNumberOffer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descriptionNumberOffer'] = $descriptionNumberOffer;

        return $this;
    }

    /**
     * Gets descriptionNumberOrder
     *
     * @return int|null
     */
    public function getDescriptionNumberOrder()
    {
        return $this->container['descriptionNumberOrder'];
    }

    /**
     * Sets descriptionNumberOrder
     *
     * @param int|null $descriptionNumberOrder descriptionNumberOrder
     *
     * @return self
     */
    public function setDescriptionNumberOrder($descriptionNumberOrder)
    {
        if (is_null($descriptionNumberOrder)) {
            array_push($this->openAPINullablesSetToNull, 'descriptionNumberOrder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descriptionNumberOrder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descriptionNumberOrder'] = $descriptionNumberOrder;

        return $this;
    }

    /**
     * Gets descriptionNumberDeliveryNote
     *
     * @return int|null
     */
    public function getDescriptionNumberDeliveryNote()
    {
        return $this->container['descriptionNumberDeliveryNote'];
    }

    /**
     * Sets descriptionNumberDeliveryNote
     *
     * @param int|null $descriptionNumberDeliveryNote descriptionNumberDeliveryNote
     *
     * @return self
     */
    public function setDescriptionNumberDeliveryNote($descriptionNumberDeliveryNote)
    {
        if (is_null($descriptionNumberDeliveryNote)) {
            array_push($this->openAPINullablesSetToNull, 'descriptionNumberDeliveryNote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descriptionNumberDeliveryNote', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descriptionNumberDeliveryNote'] = $descriptionNumberDeliveryNote;

        return $this;
    }

    /**
     * Gets descriptionNumberInvoice
     *
     * @return int|null
     */
    public function getDescriptionNumberInvoice()
    {
        return $this->container['descriptionNumberInvoice'];
    }

    /**
     * Sets descriptionNumberInvoice
     *
     * @param int|null $descriptionNumberInvoice descriptionNumberInvoice
     *
     * @return self
     */
    public function setDescriptionNumberInvoice($descriptionNumberInvoice)
    {
        if (is_null($descriptionNumberInvoice)) {
            array_push($this->openAPINullablesSetToNull, 'descriptionNumberInvoice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descriptionNumberInvoice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descriptionNumberInvoice'] = $descriptionNumberInvoice;

        return $this;
    }

    /**
     * Gets descriptionNumberArticle
     *
     * @return int|null
     */
    public function getDescriptionNumberArticle()
    {
        return $this->container['descriptionNumberArticle'];
    }

    /**
     * Sets descriptionNumberArticle
     *
     * @param int|null $descriptionNumberArticle descriptionNumberArticle
     *
     * @return self
     */
    public function setDescriptionNumberArticle($descriptionNumberArticle)
    {
        if (is_null($descriptionNumberArticle)) {
            array_push($this->openAPINullablesSetToNull, 'descriptionNumberArticle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descriptionNumberArticle', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descriptionNumberArticle'] = $descriptionNumberArticle;

        return $this;
    }

    /**
     * Gets descriptionNumberPurchaseOrder
     *
     * @return int|null
     */
    public function getDescriptionNumberPurchaseOrder()
    {
        return $this->container['descriptionNumberPurchaseOrder'];
    }

    /**
     * Sets descriptionNumberPurchaseOrder
     *
     * @param int|null $descriptionNumberPurchaseOrder descriptionNumberPurchaseOrder
     *
     * @return self
     */
    public function setDescriptionNumberPurchaseOrder($descriptionNumberPurchaseOrder)
    {
        if (is_null($descriptionNumberPurchaseOrder)) {
            array_push($this->openAPINullablesSetToNull, 'descriptionNumberPurchaseOrder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descriptionNumberPurchaseOrder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descriptionNumberPurchaseOrder'] = $descriptionNumberPurchaseOrder;

        return $this;
    }

    /**
     * Gets descriptionNumberCatalog
     *
     * @return int|null
     */
    public function getDescriptionNumberCatalog()
    {
        return $this->container['descriptionNumberCatalog'];
    }

    /**
     * Sets descriptionNumberCatalog
     *
     * @param int|null $descriptionNumberCatalog descriptionNumberCatalog
     *
     * @return self
     */
    public function setDescriptionNumberCatalog($descriptionNumberCatalog)
    {
        if (is_null($descriptionNumberCatalog)) {
            array_push($this->openAPINullablesSetToNull, 'descriptionNumberCatalog');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descriptionNumberCatalog', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descriptionNumberCatalog'] = $descriptionNumberCatalog;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets additionalFields
     *
     * @return \OpenAPI\Client\Radix\Model\AdditionalFieldBase[]|null
     */
    public function getAdditionalFields()
    {
        return $this->container['additionalFields'];
    }

    /**
     * Sets additionalFields
     *
     * @param \OpenAPI\Client\Radix\Model\AdditionalFieldBase[]|null $additionalFields additionalFields
     *
     * @return self
     */
    public function setAdditionalFields($additionalFields)
    {
        if (is_null($additionalFields)) {
            array_push($this->openAPINullablesSetToNull, 'additionalFields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additionalFields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additionalFields'] = $additionalFields;

        return $this;
    }

    /**
     * Gets classifications
     *
     * @return \OpenAPI\Client\Radix\Model\ClassificationV1Base[]|null
     */
    public function getClassifications()
    {
        return $this->container['classifications'];
    }

    /**
     * Sets classifications
     *
     * @param \OpenAPI\Client\Radix\Model\ClassificationV1Base[]|null $classifications classifications
     *
     * @return self
     */
    public function setClassifications($classifications)
    {
        if (is_null($classifications)) {
            array_push($this->openAPINullablesSetToNull, 'classifications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('classifications', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['classifications'] = $classifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


