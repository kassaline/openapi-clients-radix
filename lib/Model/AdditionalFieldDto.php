<?php
/**
 * AdditionalFieldDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Model;

use \ArrayAccess;
use \OpenAPI\Client\Radix\ObjectSerializer;

/**
 * AdditionalFieldDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdditionalFieldDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdditionalFieldDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fkId' => 'string',
        'id' => 'string',
        'definitionId' => 'string',
        'definitionCode' => 'string',
        'definitionDescription' => 'string',
        'definitionFieldType' => '\OpenAPI\Client\Radix\Model\AdditionalfieldFieldType',
        'definitionFieldFieldspec' => 'string',
        'value' => 'mixed',
        'valueDescription' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fkId' => null,
        'id' => null,
        'definitionId' => null,
        'definitionCode' => null,
        'definitionDescription' => null,
        'definitionFieldType' => null,
        'definitionFieldFieldspec' => null,
        'value' => null,
        'valueDescription' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fkId' => true,
        'id' => true,
        'definitionId' => true,
        'definitionCode' => true,
        'definitionDescription' => true,
        'definitionFieldType' => false,
        'definitionFieldFieldspec' => true,
        'value' => true,
        'valueDescription' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fkId' => 'fkId',
        'id' => 'id',
        'definitionId' => 'definitionId',
        'definitionCode' => 'definitionCode',
        'definitionDescription' => 'definitionDescription',
        'definitionFieldType' => 'definitionFieldType',
        'definitionFieldFieldspec' => 'definitionFieldFieldspec',
        'value' => 'value',
        'valueDescription' => 'valueDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fkId' => 'setFkId',
        'id' => 'setId',
        'definitionId' => 'setDefinitionId',
        'definitionCode' => 'setDefinitionCode',
        'definitionDescription' => 'setDefinitionDescription',
        'definitionFieldType' => 'setDefinitionFieldType',
        'definitionFieldFieldspec' => 'setDefinitionFieldFieldspec',
        'value' => 'setValue',
        'valueDescription' => 'setValueDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fkId' => 'getFkId',
        'id' => 'getId',
        'definitionId' => 'getDefinitionId',
        'definitionCode' => 'getDefinitionCode',
        'definitionDescription' => 'getDefinitionDescription',
        'definitionFieldType' => 'getDefinitionFieldType',
        'definitionFieldFieldspec' => 'getDefinitionFieldFieldspec',
        'value' => 'getValue',
        'valueDescription' => 'getValueDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fkId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('definitionId', $data ?? [], null);
        $this->setIfExists('definitionCode', $data ?? [], null);
        $this->setIfExists('definitionDescription', $data ?? [], null);
        $this->setIfExists('definitionFieldType', $data ?? [], null);
        $this->setIfExists('definitionFieldFieldspec', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('valueDescription', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fkId
     *
     * @return string|null
     */
    public function getFkId()
    {
        return $this->container['fkId'];
    }

    /**
     * Sets fkId
     *
     * @param string|null $fkId fkId
     *
     * @return self
     */
    public function setFkId($fkId)
    {
        if (is_null($fkId)) {
            array_push($this->openAPINullablesSetToNull, 'fkId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fkId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fkId'] = $fkId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets definitionId
     *
     * @return string|null
     */
    public function getDefinitionId()
    {
        return $this->container['definitionId'];
    }

    /**
     * Sets definitionId
     *
     * @param string|null $definitionId definitionId
     *
     * @return self
     */
    public function setDefinitionId($definitionId)
    {
        if (is_null($definitionId)) {
            array_push($this->openAPINullablesSetToNull, 'definitionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('definitionId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['definitionId'] = $definitionId;

        return $this;
    }

    /**
     * Gets definitionCode
     *
     * @return string|null
     */
    public function getDefinitionCode()
    {
        return $this->container['definitionCode'];
    }

    /**
     * Sets definitionCode
     *
     * @param string|null $definitionCode definitionCode
     *
     * @return self
     */
    public function setDefinitionCode($definitionCode)
    {
        if (is_null($definitionCode)) {
            array_push($this->openAPINullablesSetToNull, 'definitionCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('definitionCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['definitionCode'] = $definitionCode;

        return $this;
    }

    /**
     * Gets definitionDescription
     *
     * @return string|null
     */
    public function getDefinitionDescription()
    {
        return $this->container['definitionDescription'];
    }

    /**
     * Sets definitionDescription
     *
     * @param string|null $definitionDescription definitionDescription
     *
     * @return self
     */
    public function setDefinitionDescription($definitionDescription)
    {
        if (is_null($definitionDescription)) {
            array_push($this->openAPINullablesSetToNull, 'definitionDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('definitionDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['definitionDescription'] = $definitionDescription;

        return $this;
    }

    /**
     * Gets definitionFieldType
     *
     * @return \OpenAPI\Client\Radix\Model\AdditionalfieldFieldType|null
     */
    public function getDefinitionFieldType()
    {
        return $this->container['definitionFieldType'];
    }

    /**
     * Sets definitionFieldType
     *
     * @param \OpenAPI\Client\Radix\Model\AdditionalfieldFieldType|null $definitionFieldType definitionFieldType
     *
     * @return self
     */
    public function setDefinitionFieldType($definitionFieldType)
    {
        if (is_null($definitionFieldType)) {
            throw new \InvalidArgumentException('non-nullable definitionFieldType cannot be null');
        }
        $this->container['definitionFieldType'] = $definitionFieldType;

        return $this;
    }

    /**
     * Gets definitionFieldFieldspec
     *
     * @return string|null
     */
    public function getDefinitionFieldFieldspec()
    {
        return $this->container['definitionFieldFieldspec'];
    }

    /**
     * Sets definitionFieldFieldspec
     *
     * @param string|null $definitionFieldFieldspec definitionFieldFieldspec
     *
     * @return self
     */
    public function setDefinitionFieldFieldspec($definitionFieldFieldspec)
    {
        if (is_null($definitionFieldFieldspec)) {
            array_push($this->openAPINullablesSetToNull, 'definitionFieldFieldspec');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('definitionFieldFieldspec', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['definitionFieldFieldspec'] = $definitionFieldFieldspec;

        return $this;
    }

    /**
     * Gets value
     *
     * @return mixed|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param mixed|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            array_push($this->openAPINullablesSetToNull, 'value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets valueDescription
     *
     * @return string|null
     */
    public function getValueDescription()
    {
        return $this->container['valueDescription'];
    }

    /**
     * Sets valueDescription
     *
     * @param string|null $valueDescription valueDescription
     *
     * @return self
     */
    public function setValueDescription($valueDescription)
    {
        if (is_null($valueDescription)) {
            array_push($this->openAPINullablesSetToNull, 'valueDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valueDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valueDescription'] = $valueDescription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


