<?php
/**
 * OrderPatchCommand
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Model;

use \ArrayAccess;
use \OpenAPI\Client\Radix\ObjectSerializer;

/**
 * OrderPatchCommand Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderPatchCommand implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderPatchCommand';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customerId' => 'string',
        'invoiceCustomerId' => 'string',
        'shippingAddressId' => 'string',
        'contactId' => 'string',
        'agent' => '\OpenAPI\Client\Radix\Model\IdCode',
        'agent2' => '\OpenAPI\Client\Radix\Model\IdCode',
        'documentState' => '\OpenAPI\Client\Radix\Model\IdCode',
        'paymentType' => '\OpenAPI\Client\Radix\Model\IdCode',
        'transportReason' => '\OpenAPI\Client\Radix\Model\IdCode',
        'paymentFromDate' => '\DateTime',
        'employee' => '\OpenAPI\Client\Radix\Model\IdCode',
        'deliveryDate' => '\DateTime',
        'desiredDate' => '\DateTime',
        'confirmationDate' => '\DateTime',
        'comment' => 'string',
        'customerOrderDate' => '\DateTime',
        'customerOrderNumber' => 'string',
        'subject' => 'string',
        'cig' => 'string',
        'cup' => 'string',
        'project' => '\OpenAPI\Client\Radix\Model\IdCode',
        'rup' => 'string',
        'dec' => 'string',
        'partialDeliveryAllowed' => 'int',
        'shipmentMethod' => '\OpenAPI\Client\Radix\Model\IdCode',
        'shipmentMedium' => '\OpenAPI\Client\Radix\Model\IdCode',
        'freighter' => '\OpenAPI\Client\Radix\Model\IdCode',
        'packagingType' => 'string',
        'numberPackages' => 'int',
        'weight' => 'float',
        'weightUnit' => 'int',
        'volume' => 'float',
        'volumeUnit' => 'int',
        'absoluteInvoiceDiscount' => 'float',
        'documentGroup' => '\OpenAPI\Client\Radix\Model\IdCode',
        'deliveryCondition' => '\OpenAPI\Client\Radix\Model\IdCode',
        'deliveryCondition2' => '\OpenAPI\Client\Radix\Model\IdCode',
        'deliveryConditionAmount' => 'float',
        'deliveryConditionAmount2' => 'float',
        'invoiceEuType' => '\OpenAPI\Client\Radix\Model\InvoiceEUType',
        'payment' => 'float',
        'id' => 'string',
        'documentId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customerId' => null,
        'invoiceCustomerId' => null,
        'shippingAddressId' => null,
        'contactId' => null,
        'agent' => null,
        'agent2' => null,
        'documentState' => null,
        'paymentType' => null,
        'transportReason' => null,
        'paymentFromDate' => 'date-time',
        'employee' => null,
        'deliveryDate' => 'date-time',
        'desiredDate' => 'date-time',
        'confirmationDate' => 'date-time',
        'comment' => null,
        'customerOrderDate' => 'date-time',
        'customerOrderNumber' => null,
        'subject' => null,
        'cig' => null,
        'cup' => null,
        'project' => null,
        'rup' => null,
        'dec' => null,
        'partialDeliveryAllowed' => 'int32',
        'shipmentMethod' => null,
        'shipmentMedium' => null,
        'freighter' => null,
        'packagingType' => null,
        'numberPackages' => 'int32',
        'weight' => 'double',
        'weightUnit' => 'int32',
        'volume' => 'double',
        'volumeUnit' => 'int32',
        'absoluteInvoiceDiscount' => 'double',
        'documentGroup' => null,
        'deliveryCondition' => null,
        'deliveryCondition2' => null,
        'deliveryConditionAmount' => 'double',
        'deliveryConditionAmount2' => 'double',
        'invoiceEuType' => null,
        'payment' => 'double',
        'id' => null,
        'documentId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customerId' => true,
        'invoiceCustomerId' => true,
        'shippingAddressId' => true,
        'contactId' => true,
        'agent' => false,
        'agent2' => false,
        'documentState' => false,
        'paymentType' => false,
        'transportReason' => false,
        'paymentFromDate' => true,
        'employee' => false,
        'deliveryDate' => true,
        'desiredDate' => true,
        'confirmationDate' => true,
        'comment' => true,
        'customerOrderDate' => true,
        'customerOrderNumber' => true,
        'subject' => true,
        'cig' => true,
        'cup' => true,
        'project' => false,
        'rup' => true,
        'dec' => true,
        'partialDeliveryAllowed' => true,
        'shipmentMethod' => false,
        'shipmentMedium' => false,
        'freighter' => false,
        'packagingType' => true,
        'numberPackages' => true,
        'weight' => true,
        'weightUnit' => true,
        'volume' => true,
        'volumeUnit' => true,
        'absoluteInvoiceDiscount' => true,
        'documentGroup' => false,
        'deliveryCondition' => false,
        'deliveryCondition2' => false,
        'deliveryConditionAmount' => true,
        'deliveryConditionAmount2' => true,
        'invoiceEuType' => false,
        'payment' => true,
        'id' => true,
        'documentId' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customerId' => 'customerId',
        'invoiceCustomerId' => 'invoiceCustomerId',
        'shippingAddressId' => 'shippingAddressId',
        'contactId' => 'contactId',
        'agent' => 'agent',
        'agent2' => 'agent2',
        'documentState' => 'documentState',
        'paymentType' => 'paymentType',
        'transportReason' => 'transportReason',
        'paymentFromDate' => 'paymentFromDate',
        'employee' => 'employee',
        'deliveryDate' => 'deliveryDate',
        'desiredDate' => 'desiredDate',
        'confirmationDate' => 'confirmationDate',
        'comment' => 'comment',
        'customerOrderDate' => 'customerOrderDate',
        'customerOrderNumber' => 'customerOrderNumber',
        'subject' => 'subject',
        'cig' => 'cig',
        'cup' => 'cup',
        'project' => 'project',
        'rup' => 'rup',
        'dec' => 'dec',
        'partialDeliveryAllowed' => 'partialDeliveryAllowed',
        'shipmentMethod' => 'shipmentMethod',
        'shipmentMedium' => 'shipmentMedium',
        'freighter' => 'freighter',
        'packagingType' => 'packagingType',
        'numberPackages' => 'numberPackages',
        'weight' => 'weight',
        'weightUnit' => 'weightUnit',
        'volume' => 'volume',
        'volumeUnit' => 'volumeUnit',
        'absoluteInvoiceDiscount' => 'absoluteInvoiceDiscount',
        'documentGroup' => 'documentGroup',
        'deliveryCondition' => 'deliveryCondition',
        'deliveryCondition2' => 'deliveryCondition2',
        'deliveryConditionAmount' => 'deliveryConditionAmount',
        'deliveryConditionAmount2' => 'deliveryConditionAmount2',
        'invoiceEuType' => 'invoiceEuType',
        'payment' => 'payment',
        'id' => 'id',
        'documentId' => 'documentId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customerId' => 'setCustomerId',
        'invoiceCustomerId' => 'setInvoiceCustomerId',
        'shippingAddressId' => 'setShippingAddressId',
        'contactId' => 'setContactId',
        'agent' => 'setAgent',
        'agent2' => 'setAgent2',
        'documentState' => 'setDocumentState',
        'paymentType' => 'setPaymentType',
        'transportReason' => 'setTransportReason',
        'paymentFromDate' => 'setPaymentFromDate',
        'employee' => 'setEmployee',
        'deliveryDate' => 'setDeliveryDate',
        'desiredDate' => 'setDesiredDate',
        'confirmationDate' => 'setConfirmationDate',
        'comment' => 'setComment',
        'customerOrderDate' => 'setCustomerOrderDate',
        'customerOrderNumber' => 'setCustomerOrderNumber',
        'subject' => 'setSubject',
        'cig' => 'setCig',
        'cup' => 'setCup',
        'project' => 'setProject',
        'rup' => 'setRup',
        'dec' => 'setDec',
        'partialDeliveryAllowed' => 'setPartialDeliveryAllowed',
        'shipmentMethod' => 'setShipmentMethod',
        'shipmentMedium' => 'setShipmentMedium',
        'freighter' => 'setFreighter',
        'packagingType' => 'setPackagingType',
        'numberPackages' => 'setNumberPackages',
        'weight' => 'setWeight',
        'weightUnit' => 'setWeightUnit',
        'volume' => 'setVolume',
        'volumeUnit' => 'setVolumeUnit',
        'absoluteInvoiceDiscount' => 'setAbsoluteInvoiceDiscount',
        'documentGroup' => 'setDocumentGroup',
        'deliveryCondition' => 'setDeliveryCondition',
        'deliveryCondition2' => 'setDeliveryCondition2',
        'deliveryConditionAmount' => 'setDeliveryConditionAmount',
        'deliveryConditionAmount2' => 'setDeliveryConditionAmount2',
        'invoiceEuType' => 'setInvoiceEuType',
        'payment' => 'setPayment',
        'id' => 'setId',
        'documentId' => 'setDocumentId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customerId' => 'getCustomerId',
        'invoiceCustomerId' => 'getInvoiceCustomerId',
        'shippingAddressId' => 'getShippingAddressId',
        'contactId' => 'getContactId',
        'agent' => 'getAgent',
        'agent2' => 'getAgent2',
        'documentState' => 'getDocumentState',
        'paymentType' => 'getPaymentType',
        'transportReason' => 'getTransportReason',
        'paymentFromDate' => 'getPaymentFromDate',
        'employee' => 'getEmployee',
        'deliveryDate' => 'getDeliveryDate',
        'desiredDate' => 'getDesiredDate',
        'confirmationDate' => 'getConfirmationDate',
        'comment' => 'getComment',
        'customerOrderDate' => 'getCustomerOrderDate',
        'customerOrderNumber' => 'getCustomerOrderNumber',
        'subject' => 'getSubject',
        'cig' => 'getCig',
        'cup' => 'getCup',
        'project' => 'getProject',
        'rup' => 'getRup',
        'dec' => 'getDec',
        'partialDeliveryAllowed' => 'getPartialDeliveryAllowed',
        'shipmentMethod' => 'getShipmentMethod',
        'shipmentMedium' => 'getShipmentMedium',
        'freighter' => 'getFreighter',
        'packagingType' => 'getPackagingType',
        'numberPackages' => 'getNumberPackages',
        'weight' => 'getWeight',
        'weightUnit' => 'getWeightUnit',
        'volume' => 'getVolume',
        'volumeUnit' => 'getVolumeUnit',
        'absoluteInvoiceDiscount' => 'getAbsoluteInvoiceDiscount',
        'documentGroup' => 'getDocumentGroup',
        'deliveryCondition' => 'getDeliveryCondition',
        'deliveryCondition2' => 'getDeliveryCondition2',
        'deliveryConditionAmount' => 'getDeliveryConditionAmount',
        'deliveryConditionAmount2' => 'getDeliveryConditionAmount2',
        'invoiceEuType' => 'getInvoiceEuType',
        'payment' => 'getPayment',
        'id' => 'getId',
        'documentId' => 'getDocumentId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('invoiceCustomerId', $data ?? [], null);
        $this->setIfExists('shippingAddressId', $data ?? [], null);
        $this->setIfExists('contactId', $data ?? [], null);
        $this->setIfExists('agent', $data ?? [], null);
        $this->setIfExists('agent2', $data ?? [], null);
        $this->setIfExists('documentState', $data ?? [], null);
        $this->setIfExists('paymentType', $data ?? [], null);
        $this->setIfExists('transportReason', $data ?? [], null);
        $this->setIfExists('paymentFromDate', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('deliveryDate', $data ?? [], null);
        $this->setIfExists('desiredDate', $data ?? [], null);
        $this->setIfExists('confirmationDate', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('customerOrderDate', $data ?? [], null);
        $this->setIfExists('customerOrderNumber', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('cig', $data ?? [], null);
        $this->setIfExists('cup', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('rup', $data ?? [], null);
        $this->setIfExists('dec', $data ?? [], null);
        $this->setIfExists('partialDeliveryAllowed', $data ?? [], null);
        $this->setIfExists('shipmentMethod', $data ?? [], null);
        $this->setIfExists('shipmentMedium', $data ?? [], null);
        $this->setIfExists('freighter', $data ?? [], null);
        $this->setIfExists('packagingType', $data ?? [], null);
        $this->setIfExists('numberPackages', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weightUnit', $data ?? [], null);
        $this->setIfExists('volume', $data ?? [], null);
        $this->setIfExists('volumeUnit', $data ?? [], null);
        $this->setIfExists('absoluteInvoiceDiscount', $data ?? [], null);
        $this->setIfExists('documentGroup', $data ?? [], null);
        $this->setIfExists('deliveryCondition', $data ?? [], null);
        $this->setIfExists('deliveryCondition2', $data ?? [], null);
        $this->setIfExists('deliveryConditionAmount', $data ?? [], null);
        $this->setIfExists('deliveryConditionAmount2', $data ?? [], null);
        $this->setIfExists('invoiceEuType', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('documentId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customerId
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param string|null $customerId customerId
     *
     * @return self
     */
    public function setCustomerId($customerId)
    {
        if (is_null($customerId)) {
            array_push($this->openAPINullablesSetToNull, 'customerId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets invoiceCustomerId
     *
     * @return string|null
     */
    public function getInvoiceCustomerId()
    {
        return $this->container['invoiceCustomerId'];
    }

    /**
     * Sets invoiceCustomerId
     *
     * @param string|null $invoiceCustomerId invoiceCustomerId
     *
     * @return self
     */
    public function setInvoiceCustomerId($invoiceCustomerId)
    {
        if (is_null($invoiceCustomerId)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceCustomerId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceCustomerId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceCustomerId'] = $invoiceCustomerId;

        return $this;
    }

    /**
     * Gets shippingAddressId
     *
     * @return string|null
     */
    public function getShippingAddressId()
    {
        return $this->container['shippingAddressId'];
    }

    /**
     * Sets shippingAddressId
     *
     * @param string|null $shippingAddressId shippingAddressId
     *
     * @return self
     */
    public function setShippingAddressId($shippingAddressId)
    {
        if (is_null($shippingAddressId)) {
            array_push($this->openAPINullablesSetToNull, 'shippingAddressId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shippingAddressId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shippingAddressId'] = $shippingAddressId;

        return $this;
    }

    /**
     * Gets contactId
     *
     * @return string|null
     */
    public function getContactId()
    {
        return $this->container['contactId'];
    }

    /**
     * Sets contactId
     *
     * @param string|null $contactId contactId
     *
     * @return self
     */
    public function setContactId($contactId)
    {
        if (is_null($contactId)) {
            array_push($this->openAPINullablesSetToNull, 'contactId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contactId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contactId'] = $contactId;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $agent agent
     *
     * @return self
     */
    public function setAgent($agent)
    {
        if (is_null($agent)) {
            throw new \InvalidArgumentException('non-nullable agent cannot be null');
        }
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets agent2
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getAgent2()
    {
        return $this->container['agent2'];
    }

    /**
     * Sets agent2
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $agent2 agent2
     *
     * @return self
     */
    public function setAgent2($agent2)
    {
        if (is_null($agent2)) {
            throw new \InvalidArgumentException('non-nullable agent2 cannot be null');
        }
        $this->container['agent2'] = $agent2;

        return $this;
    }

    /**
     * Gets documentState
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getDocumentState()
    {
        return $this->container['documentState'];
    }

    /**
     * Sets documentState
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $documentState documentState
     *
     * @return self
     */
    public function setDocumentState($documentState)
    {
        if (is_null($documentState)) {
            throw new \InvalidArgumentException('non-nullable documentState cannot be null');
        }
        $this->container['documentState'] = $documentState;

        return $this;
    }

    /**
     * Gets paymentType
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getPaymentType()
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $paymentType paymentType
     *
     * @return self
     */
    public function setPaymentType($paymentType)
    {
        if (is_null($paymentType)) {
            throw new \InvalidArgumentException('non-nullable paymentType cannot be null');
        }
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets transportReason
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getTransportReason()
    {
        return $this->container['transportReason'];
    }

    /**
     * Sets transportReason
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $transportReason transportReason
     *
     * @return self
     */
    public function setTransportReason($transportReason)
    {
        if (is_null($transportReason)) {
            throw new \InvalidArgumentException('non-nullable transportReason cannot be null');
        }
        $this->container['transportReason'] = $transportReason;

        return $this;
    }

    /**
     * Gets paymentFromDate
     *
     * @return \DateTime|null
     */
    public function getPaymentFromDate()
    {
        return $this->container['paymentFromDate'];
    }

    /**
     * Sets paymentFromDate
     *
     * @param \DateTime|null $paymentFromDate paymentFromDate
     *
     * @return self
     */
    public function setPaymentFromDate($paymentFromDate)
    {
        if (is_null($paymentFromDate)) {
            array_push($this->openAPINullablesSetToNull, 'paymentFromDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentFromDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentFromDate'] = $paymentFromDate;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $employee employee
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        if (is_null($employee)) {
            throw new \InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets deliveryDate
     *
     * @return \DateTime|null
     */
    public function getDeliveryDate()
    {
        return $this->container['deliveryDate'];
    }

    /**
     * Sets deliveryDate
     *
     * @param \DateTime|null $deliveryDate deliveryDate
     *
     * @return self
     */
    public function setDeliveryDate($deliveryDate)
    {
        if (is_null($deliveryDate)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryDate'] = $deliveryDate;

        return $this;
    }

    /**
     * Gets desiredDate
     *
     * @return \DateTime|null
     */
    public function getDesiredDate()
    {
        return $this->container['desiredDate'];
    }

    /**
     * Sets desiredDate
     *
     * @param \DateTime|null $desiredDate desiredDate
     *
     * @return self
     */
    public function setDesiredDate($desiredDate)
    {
        if (is_null($desiredDate)) {
            array_push($this->openAPINullablesSetToNull, 'desiredDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('desiredDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['desiredDate'] = $desiredDate;

        return $this;
    }

    /**
     * Gets confirmationDate
     *
     * @return \DateTime|null
     */
    public function getConfirmationDate()
    {
        return $this->container['confirmationDate'];
    }

    /**
     * Sets confirmationDate
     *
     * @param \DateTime|null $confirmationDate confirmationDate
     *
     * @return self
     */
    public function setConfirmationDate($confirmationDate)
    {
        if (is_null($confirmationDate)) {
            array_push($this->openAPINullablesSetToNull, 'confirmationDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confirmationDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confirmationDate'] = $confirmationDate;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets customerOrderDate
     *
     * @return \DateTime|null
     */
    public function getCustomerOrderDate()
    {
        return $this->container['customerOrderDate'];
    }

    /**
     * Sets customerOrderDate
     *
     * @param \DateTime|null $customerOrderDate customerOrderDate
     *
     * @return self
     */
    public function setCustomerOrderDate($customerOrderDate)
    {
        if (is_null($customerOrderDate)) {
            array_push($this->openAPINullablesSetToNull, 'customerOrderDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerOrderDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customerOrderDate'] = $customerOrderDate;

        return $this;
    }

    /**
     * Gets customerOrderNumber
     *
     * @return string|null
     */
    public function getCustomerOrderNumber()
    {
        return $this->container['customerOrderNumber'];
    }

    /**
     * Sets customerOrderNumber
     *
     * @param string|null $customerOrderNumber customerOrderNumber
     *
     * @return self
     */
    public function setCustomerOrderNumber($customerOrderNumber)
    {
        if (is_null($customerOrderNumber)) {
            array_push($this->openAPINullablesSetToNull, 'customerOrderNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerOrderNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customerOrderNumber'] = $customerOrderNumber;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            array_push($this->openAPINullablesSetToNull, 'subject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subject', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets cig
     *
     * @return string|null
     */
    public function getCig()
    {
        return $this->container['cig'];
    }

    /**
     * Sets cig
     *
     * @param string|null $cig cig
     *
     * @return self
     */
    public function setCig($cig)
    {
        if (is_null($cig)) {
            array_push($this->openAPINullablesSetToNull, 'cig');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cig', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cig'] = $cig;

        return $this;
    }

    /**
     * Gets cup
     *
     * @return string|null
     */
    public function getCup()
    {
        return $this->container['cup'];
    }

    /**
     * Sets cup
     *
     * @param string|null $cup cup
     *
     * @return self
     */
    public function setCup($cup)
    {
        if (is_null($cup)) {
            array_push($this->openAPINullablesSetToNull, 'cup');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cup', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cup'] = $cup;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets rup
     *
     * @return string|null
     */
    public function getRup()
    {
        return $this->container['rup'];
    }

    /**
     * Sets rup
     *
     * @param string|null $rup rup
     *
     * @return self
     */
    public function setRup($rup)
    {
        if (is_null($rup)) {
            array_push($this->openAPINullablesSetToNull, 'rup');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rup', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rup'] = $rup;

        return $this;
    }

    /**
     * Gets dec
     *
     * @return string|null
     */
    public function getDec()
    {
        return $this->container['dec'];
    }

    /**
     * Sets dec
     *
     * @param string|null $dec dec
     *
     * @return self
     */
    public function setDec($dec)
    {
        if (is_null($dec)) {
            array_push($this->openAPINullablesSetToNull, 'dec');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dec', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dec'] = $dec;

        return $this;
    }

    /**
     * Gets partialDeliveryAllowed
     *
     * @return int|null
     */
    public function getPartialDeliveryAllowed()
    {
        return $this->container['partialDeliveryAllowed'];
    }

    /**
     * Sets partialDeliveryAllowed
     *
     * @param int|null $partialDeliveryAllowed partialDeliveryAllowed
     *
     * @return self
     */
    public function setPartialDeliveryAllowed($partialDeliveryAllowed)
    {
        if (is_null($partialDeliveryAllowed)) {
            array_push($this->openAPINullablesSetToNull, 'partialDeliveryAllowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('partialDeliveryAllowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['partialDeliveryAllowed'] = $partialDeliveryAllowed;

        return $this;
    }

    /**
     * Gets shipmentMethod
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getShipmentMethod()
    {
        return $this->container['shipmentMethod'];
    }

    /**
     * Sets shipmentMethod
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $shipmentMethod shipmentMethod
     *
     * @return self
     */
    public function setShipmentMethod($shipmentMethod)
    {
        if (is_null($shipmentMethod)) {
            throw new \InvalidArgumentException('non-nullable shipmentMethod cannot be null');
        }
        $this->container['shipmentMethod'] = $shipmentMethod;

        return $this;
    }

    /**
     * Gets shipmentMedium
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getShipmentMedium()
    {
        return $this->container['shipmentMedium'];
    }

    /**
     * Sets shipmentMedium
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $shipmentMedium shipmentMedium
     *
     * @return self
     */
    public function setShipmentMedium($shipmentMedium)
    {
        if (is_null($shipmentMedium)) {
            throw new \InvalidArgumentException('non-nullable shipmentMedium cannot be null');
        }
        $this->container['shipmentMedium'] = $shipmentMedium;

        return $this;
    }

    /**
     * Gets freighter
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getFreighter()
    {
        return $this->container['freighter'];
    }

    /**
     * Sets freighter
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $freighter freighter
     *
     * @return self
     */
    public function setFreighter($freighter)
    {
        if (is_null($freighter)) {
            throw new \InvalidArgumentException('non-nullable freighter cannot be null');
        }
        $this->container['freighter'] = $freighter;

        return $this;
    }

    /**
     * Gets packagingType
     *
     * @return string|null
     */
    public function getPackagingType()
    {
        return $this->container['packagingType'];
    }

    /**
     * Sets packagingType
     *
     * @param string|null $packagingType packagingType
     *
     * @return self
     */
    public function setPackagingType($packagingType)
    {
        if (is_null($packagingType)) {
            array_push($this->openAPINullablesSetToNull, 'packagingType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('packagingType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['packagingType'] = $packagingType;

        return $this;
    }

    /**
     * Gets numberPackages
     *
     * @return int|null
     */
    public function getNumberPackages()
    {
        return $this->container['numberPackages'];
    }

    /**
     * Sets numberPackages
     *
     * @param int|null $numberPackages numberPackages
     *
     * @return self
     */
    public function setNumberPackages($numberPackages)
    {
        if (is_null($numberPackages)) {
            array_push($this->openAPINullablesSetToNull, 'numberPackages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('numberPackages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['numberPackages'] = $numberPackages;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            array_push($this->openAPINullablesSetToNull, 'weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weightUnit
     *
     * @return int|null
     */
    public function getWeightUnit()
    {
        return $this->container['weightUnit'];
    }

    /**
     * Sets weightUnit
     *
     * @param int|null $weightUnit weightUnit
     *
     * @return self
     */
    public function setWeightUnit($weightUnit)
    {
        if (is_null($weightUnit)) {
            array_push($this->openAPINullablesSetToNull, 'weightUnit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weightUnit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weightUnit'] = $weightUnit;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return float|null
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param float|null $volume volume
     *
     * @return self
     */
    public function setVolume($volume)
    {
        if (is_null($volume)) {
            array_push($this->openAPINullablesSetToNull, 'volume');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets volumeUnit
     *
     * @return int|null
     */
    public function getVolumeUnit()
    {
        return $this->container['volumeUnit'];
    }

    /**
     * Sets volumeUnit
     *
     * @param int|null $volumeUnit volumeUnit
     *
     * @return self
     */
    public function setVolumeUnit($volumeUnit)
    {
        if (is_null($volumeUnit)) {
            array_push($this->openAPINullablesSetToNull, 'volumeUnit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volumeUnit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volumeUnit'] = $volumeUnit;

        return $this;
    }

    /**
     * Gets absoluteInvoiceDiscount
     *
     * @return float|null
     */
    public function getAbsoluteInvoiceDiscount()
    {
        return $this->container['absoluteInvoiceDiscount'];
    }

    /**
     * Sets absoluteInvoiceDiscount
     *
     * @param float|null $absoluteInvoiceDiscount absoluteInvoiceDiscount
     *
     * @return self
     */
    public function setAbsoluteInvoiceDiscount($absoluteInvoiceDiscount)
    {
        if (is_null($absoluteInvoiceDiscount)) {
            array_push($this->openAPINullablesSetToNull, 'absoluteInvoiceDiscount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('absoluteInvoiceDiscount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['absoluteInvoiceDiscount'] = $absoluteInvoiceDiscount;

        return $this;
    }

    /**
     * Gets documentGroup
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getDocumentGroup()
    {
        return $this->container['documentGroup'];
    }

    /**
     * Sets documentGroup
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $documentGroup documentGroup
     *
     * @return self
     */
    public function setDocumentGroup($documentGroup)
    {
        if (is_null($documentGroup)) {
            throw new \InvalidArgumentException('non-nullable documentGroup cannot be null');
        }
        $this->container['documentGroup'] = $documentGroup;

        return $this;
    }

    /**
     * Gets deliveryCondition
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getDeliveryCondition()
    {
        return $this->container['deliveryCondition'];
    }

    /**
     * Sets deliveryCondition
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $deliveryCondition deliveryCondition
     *
     * @return self
     */
    public function setDeliveryCondition($deliveryCondition)
    {
        if (is_null($deliveryCondition)) {
            throw new \InvalidArgumentException('non-nullable deliveryCondition cannot be null');
        }
        $this->container['deliveryCondition'] = $deliveryCondition;

        return $this;
    }

    /**
     * Gets deliveryCondition2
     *
     * @return \OpenAPI\Client\Radix\Model\IdCode|null
     */
    public function getDeliveryCondition2()
    {
        return $this->container['deliveryCondition2'];
    }

    /**
     * Sets deliveryCondition2
     *
     * @param \OpenAPI\Client\Radix\Model\IdCode|null $deliveryCondition2 deliveryCondition2
     *
     * @return self
     */
    public function setDeliveryCondition2($deliveryCondition2)
    {
        if (is_null($deliveryCondition2)) {
            throw new \InvalidArgumentException('non-nullable deliveryCondition2 cannot be null');
        }
        $this->container['deliveryCondition2'] = $deliveryCondition2;

        return $this;
    }

    /**
     * Gets deliveryConditionAmount
     *
     * @return float|null
     */
    public function getDeliveryConditionAmount()
    {
        return $this->container['deliveryConditionAmount'];
    }

    /**
     * Sets deliveryConditionAmount
     *
     * @param float|null $deliveryConditionAmount deliveryConditionAmount
     *
     * @return self
     */
    public function setDeliveryConditionAmount($deliveryConditionAmount)
    {
        if (is_null($deliveryConditionAmount)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryConditionAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryConditionAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryConditionAmount'] = $deliveryConditionAmount;

        return $this;
    }

    /**
     * Gets deliveryConditionAmount2
     *
     * @return float|null
     */
    public function getDeliveryConditionAmount2()
    {
        return $this->container['deliveryConditionAmount2'];
    }

    /**
     * Sets deliveryConditionAmount2
     *
     * @param float|null $deliveryConditionAmount2 deliveryConditionAmount2
     *
     * @return self
     */
    public function setDeliveryConditionAmount2($deliveryConditionAmount2)
    {
        if (is_null($deliveryConditionAmount2)) {
            array_push($this->openAPINullablesSetToNull, 'deliveryConditionAmount2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deliveryConditionAmount2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deliveryConditionAmount2'] = $deliveryConditionAmount2;

        return $this;
    }

    /**
     * Gets invoiceEuType
     *
     * @return \OpenAPI\Client\Radix\Model\InvoiceEUType|null
     */
    public function getInvoiceEuType()
    {
        return $this->container['invoiceEuType'];
    }

    /**
     * Sets invoiceEuType
     *
     * @param \OpenAPI\Client\Radix\Model\InvoiceEUType|null $invoiceEuType invoiceEuType
     *
     * @return self
     */
    public function setInvoiceEuType($invoiceEuType)
    {
        if (is_null($invoiceEuType)) {
            throw new \InvalidArgumentException('non-nullable invoiceEuType cannot be null');
        }
        $this->container['invoiceEuType'] = $invoiceEuType;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return float|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param float|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            array_push($this->openAPINullablesSetToNull, 'payment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets documentId
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['documentId'];
    }

    /**
     * Sets documentId
     *
     * @param string|null $documentId documentId
     *
     * @return self
     */
    public function setDocumentId($documentId)
    {
        if (is_null($documentId)) {
            array_push($this->openAPINullablesSetToNull, 'documentId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('documentId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['documentId'] = $documentId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


