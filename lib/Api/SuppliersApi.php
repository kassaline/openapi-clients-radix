<?php
/**
 * SuppliersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Radix\ApiException;
use OpenAPI\Client\Radix\Configuration;
use OpenAPI\Client\Radix\HeaderSelector;
use OpenAPI\Client\Radix\ObjectSerializer;

/**
 * SuppliersApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SuppliersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV1SuppliersCountGet' => [
            'application/json',
        ],
        'apiV1SuppliersDelete' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1SuppliersGet' => [
            'application/json',
        ],
        'apiV1SuppliersIdIdContactsGet' => [
            'application/json',
        ],
        'apiV1SuppliersIdIdGet' => [
            'application/json',
        ],
        'apiV1SuppliersIdIdShippingAddressesGet' => [
            'application/json',
        ],
        'apiV1SuppliersListGet' => [
            'application/json',
        ],
        'apiV1SuppliersPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1SuppliersPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV1SuppliersCountGet
     *
     * Returns the count of Suppliers
     *
     * @param  string $id id (optional)
     * @param  string[] $ids ids (optional)
     * @param  int $number number (optional)
     * @param  string $isoVatNumberIsocode isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber isoVatNumberVatNumber (optional)
     * @param  string $taxNumber taxNumber (optional)
     * @param  string $searchText searchText (optional)
     * @param  \DateTime $createDateFrom createDateFrom (optional)
     * @param  \DateTime $createDateTo createDateTo (optional)
     * @param  \DateTime $updateDateFrom updateDateFrom (optional)
     * @param  \DateTime $updateDateTo updateDateTo (optional)
     * @param  bool $active active (optional)
     * @param  string $additionalWhere additionalWhere (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function apiV1SuppliersCountGet($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersCountGet'][0])
    {
        list($response) = $this->apiV1SuppliersCountGetWithHttpInfo($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation apiV1SuppliersCountGetWithHttpInfo
     *
     * Returns the count of Suppliers
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1SuppliersCountGetWithHttpInfo($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersCountGet'][0])
    {
        $request = $this->apiV1SuppliersCountGetRequest($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1SuppliersCountGetAsync
     *
     * Returns the count of Suppliers
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersCountGetAsync($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersCountGet'][0])
    {
        return $this->apiV1SuppliersCountGetAsyncWithHttpInfo($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1SuppliersCountGetAsyncWithHttpInfo
     *
     * Returns the count of Suppliers
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersCountGetAsyncWithHttpInfo($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersCountGet'][0])
    {
        $returnType = 'int';
        $request = $this->apiV1SuppliersCountGetRequest($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1SuppliersCountGet'
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1SuppliersCountGetRequest($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersCountGet'][0])
    {

















        $resourcePath = '/api/v1/suppliers/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'Ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'Number', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isoVatNumberIsocode,
            'IsoVatNumber.Isocode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isoVatNumberVatNumber,
            'IsoVatNumber.VatNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxNumber,
            'TaxNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchText,
            'SearchText', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createDateFrom,
            'CreateDateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createDateTo,
            'CreateDateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updateDateFrom,
            'UpdateDateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updateDateTo,
            'UpdateDateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active,
            'Active', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additionalWhere,
            'AdditionalWhere', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'Skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'Take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1SuppliersDelete
     *
     * Delete an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierDeleteCommand $supplierDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiV1SuppliersDelete($supplierDeleteCommand = null, string $contentType = self::contentTypes['apiV1SuppliersDelete'][0])
    {
        list($response) = $this->apiV1SuppliersDeleteWithHttpInfo($supplierDeleteCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1SuppliersDeleteWithHttpInfo
     *
     * Delete an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierDeleteCommand $supplierDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1SuppliersDeleteWithHttpInfo($supplierDeleteCommand = null, string $contentType = self::contentTypes['apiV1SuppliersDelete'][0])
    {
        $request = $this->apiV1SuppliersDeleteRequest($supplierDeleteCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1SuppliersDeleteAsync
     *
     * Delete an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierDeleteCommand $supplierDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersDeleteAsync($supplierDeleteCommand = null, string $contentType = self::contentTypes['apiV1SuppliersDelete'][0])
    {
        return $this->apiV1SuppliersDeleteAsyncWithHttpInfo($supplierDeleteCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1SuppliersDeleteAsyncWithHttpInfo
     *
     * Delete an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierDeleteCommand $supplierDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersDeleteAsyncWithHttpInfo($supplierDeleteCommand = null, string $contentType = self::contentTypes['apiV1SuppliersDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->apiV1SuppliersDeleteRequest($supplierDeleteCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1SuppliersDelete'
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierDeleteCommand $supplierDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1SuppliersDeleteRequest($supplierDeleteCommand = null, string $contentType = self::contentTypes['apiV1SuppliersDelete'][0])
    {



        $resourcePath = '/api/v1/suppliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($supplierDeleteCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($supplierDeleteCommand));
            } else {
                $httpBody = $supplierDeleteCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1SuppliersGet
     *
     * Returns a list of Suppliers
     *
     * @param  string $id id (optional)
     * @param  string[] $ids ids (optional)
     * @param  int $number number (optional)
     * @param  string $isoVatNumberIsocode isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber isoVatNumberVatNumber (optional)
     * @param  string $taxNumber taxNumber (optional)
     * @param  string $searchText searchText (optional)
     * @param  \DateTime $createDateFrom createDateFrom (optional)
     * @param  \DateTime $createDateTo createDateTo (optional)
     * @param  \DateTime $updateDateFrom updateDateFrom (optional)
     * @param  \DateTime $updateDateTo updateDateTo (optional)
     * @param  bool $active active (optional)
     * @param  string $additionalWhere additionalWhere (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\SupplierDto[]
     */
    public function apiV1SuppliersGet($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersGet'][0])
    {
        list($response) = $this->apiV1SuppliersGetWithHttpInfo($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation apiV1SuppliersGetWithHttpInfo
     *
     * Returns a list of Suppliers
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\SupplierDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1SuppliersGetWithHttpInfo($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersGet'][0])
    {
        $request = $this->apiV1SuppliersGetRequest($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\SupplierDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\SupplierDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\SupplierDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\SupplierDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\SupplierDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1SuppliersGetAsync
     *
     * Returns a list of Suppliers
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersGetAsync($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersGet'][0])
    {
        return $this->apiV1SuppliersGetAsyncWithHttpInfo($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1SuppliersGetAsyncWithHttpInfo
     *
     * Returns a list of Suppliers
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersGetAsyncWithHttpInfo($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\SupplierDto[]';
        $request = $this->apiV1SuppliersGetRequest($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1SuppliersGet'
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1SuppliersGetRequest($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersGet'][0])
    {

















        $resourcePath = '/api/v1/suppliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'Ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'Number', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isoVatNumberIsocode,
            'IsoVatNumber.Isocode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isoVatNumberVatNumber,
            'IsoVatNumber.VatNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxNumber,
            'TaxNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchText,
            'SearchText', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createDateFrom,
            'CreateDateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createDateTo,
            'CreateDateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updateDateFrom,
            'UpdateDateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updateDateTo,
            'UpdateDateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active,
            'Active', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additionalWhere,
            'AdditionalWhere', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'Skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'Take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1SuppliersIdIdContactsGet
     *
     * Returns a list of contacts with this Supplier id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdContactsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ContactDto[]
     */
    public function apiV1SuppliersIdIdContactsGet($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdContactsGet'][0])
    {
        list($response) = $this->apiV1SuppliersIdIdContactsGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1SuppliersIdIdContactsGetWithHttpInfo
     *
     * Returns a list of contacts with this Supplier id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdContactsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ContactDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1SuppliersIdIdContactsGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdContactsGet'][0])
    {
        $request = $this->apiV1SuppliersIdIdContactsGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ContactDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ContactDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ContactDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ContactDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ContactDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1SuppliersIdIdContactsGetAsync
     *
     * Returns a list of contacts with this Supplier id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdContactsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersIdIdContactsGetAsync($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdContactsGet'][0])
    {
        return $this->apiV1SuppliersIdIdContactsGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1SuppliersIdIdContactsGetAsyncWithHttpInfo
     *
     * Returns a list of contacts with this Supplier id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdContactsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersIdIdContactsGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdContactsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ContactDto[]';
        $request = $this->apiV1SuppliersIdIdContactsGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1SuppliersIdIdContactsGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdContactsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1SuppliersIdIdContactsGetRequest($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdContactsGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1SuppliersIdIdContactsGet'
            );
        }


        $resourcePath = '/api/v1/suppliers/id/{id}/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1SuppliersIdIdGet
     *
     * Returns the Supplier with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\SupplierDto
     */
    public function apiV1SuppliersIdIdGet($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdGet'][0])
    {
        list($response) = $this->apiV1SuppliersIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1SuppliersIdIdGetWithHttpInfo
     *
     * Returns the Supplier with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\SupplierDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1SuppliersIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdGet'][0])
    {
        $request = $this->apiV1SuppliersIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\SupplierDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\SupplierDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\SupplierDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\SupplierDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\SupplierDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1SuppliersIdIdGetAsync
     *
     * Returns the Supplier with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersIdIdGetAsync($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdGet'][0])
    {
        return $this->apiV1SuppliersIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1SuppliersIdIdGetAsyncWithHttpInfo
     *
     * Returns the Supplier with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\SupplierDto';
        $request = $this->apiV1SuppliersIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1SuppliersIdIdGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1SuppliersIdIdGetRequest($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1SuppliersIdIdGet'
            );
        }


        $resourcePath = '/api/v1/suppliers/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1SuppliersIdIdShippingAddressesGet
     *
     * Returns a list of shippingAddresses with this Supplier id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdShippingAddressesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\SupplierShippingAddressDto[]
     */
    public function apiV1SuppliersIdIdShippingAddressesGet($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdShippingAddressesGet'][0])
    {
        list($response) = $this->apiV1SuppliersIdIdShippingAddressesGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1SuppliersIdIdShippingAddressesGetWithHttpInfo
     *
     * Returns a list of shippingAddresses with this Supplier id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdShippingAddressesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\SupplierShippingAddressDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1SuppliersIdIdShippingAddressesGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdShippingAddressesGet'][0])
    {
        $request = $this->apiV1SuppliersIdIdShippingAddressesGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\SupplierShippingAddressDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\SupplierShippingAddressDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\SupplierShippingAddressDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\SupplierShippingAddressDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\SupplierShippingAddressDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1SuppliersIdIdShippingAddressesGetAsync
     *
     * Returns a list of shippingAddresses with this Supplier id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdShippingAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersIdIdShippingAddressesGetAsync($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdShippingAddressesGet'][0])
    {
        return $this->apiV1SuppliersIdIdShippingAddressesGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1SuppliersIdIdShippingAddressesGetAsyncWithHttpInfo
     *
     * Returns a list of shippingAddresses with this Supplier id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdShippingAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersIdIdShippingAddressesGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdShippingAddressesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\SupplierShippingAddressDto[]';
        $request = $this->apiV1SuppliersIdIdShippingAddressesGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1SuppliersIdIdShippingAddressesGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersIdIdShippingAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1SuppliersIdIdShippingAddressesGetRequest($id, string $contentType = self::contentTypes['apiV1SuppliersIdIdShippingAddressesGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1SuppliersIdIdShippingAddressesGet'
            );
        }


        $resourcePath = '/api/v1/suppliers/id/{id}/shippingAddresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1SuppliersListGet
     *
     * Returns a list of Suppliers with minimal data
     *
     * @param  string $id id (optional)
     * @param  string[] $ids ids (optional)
     * @param  int $number number (optional)
     * @param  string $isoVatNumberIsocode isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber isoVatNumberVatNumber (optional)
     * @param  string $taxNumber taxNumber (optional)
     * @param  string $searchText searchText (optional)
     * @param  \DateTime $createDateFrom createDateFrom (optional)
     * @param  \DateTime $createDateTo createDateTo (optional)
     * @param  \DateTime $updateDateFrom updateDateFrom (optional)
     * @param  \DateTime $updateDateTo updateDateTo (optional)
     * @param  bool $active active (optional)
     * @param  string $additionalWhere additionalWhere (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\IdCodeDescription[]
     */
    public function apiV1SuppliersListGet($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersListGet'][0])
    {
        list($response) = $this->apiV1SuppliersListGetWithHttpInfo($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation apiV1SuppliersListGetWithHttpInfo
     *
     * Returns a list of Suppliers with minimal data
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\IdCodeDescription[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1SuppliersListGetWithHttpInfo($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersListGet'][0])
    {
        $request = $this->apiV1SuppliersListGetRequest($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\IdCodeDescription[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\IdCodeDescription[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\IdCodeDescription[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\IdCodeDescription[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\IdCodeDescription[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1SuppliersListGetAsync
     *
     * Returns a list of Suppliers with minimal data
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersListGetAsync($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersListGet'][0])
    {
        return $this->apiV1SuppliersListGetAsyncWithHttpInfo($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1SuppliersListGetAsyncWithHttpInfo
     *
     * Returns a list of Suppliers with minimal data
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersListGetAsyncWithHttpInfo($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersListGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\IdCodeDescription[]';
        $request = $this->apiV1SuppliersListGetRequest($id, $ids, $number, $isoVatNumberIsocode, $isoVatNumberVatNumber, $taxNumber, $searchText, $createDateFrom, $createDateTo, $updateDateFrom, $updateDateTo, $active, $additionalWhere, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1SuppliersListGet'
     *
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  int $number (optional)
     * @param  string $isoVatNumberIsocode (optional)
     * @param  string $isoVatNumberVatNumber (optional)
     * @param  string $taxNumber (optional)
     * @param  string $searchText (optional)
     * @param  \DateTime $createDateFrom (optional)
     * @param  \DateTime $createDateTo (optional)
     * @param  \DateTime $updateDateFrom (optional)
     * @param  \DateTime $updateDateTo (optional)
     * @param  bool $active (optional)
     * @param  string $additionalWhere (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1SuppliersListGetRequest($id = null, $ids = null, $number = null, $isoVatNumberIsocode = null, $isoVatNumberVatNumber = null, $taxNumber = null, $searchText = null, $createDateFrom = null, $createDateTo = null, $updateDateFrom = null, $updateDateTo = null, $active = null, $additionalWhere = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1SuppliersListGet'][0])
    {

















        $resourcePath = '/api/v1/suppliers/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'Ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'Number', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isoVatNumberIsocode,
            'IsoVatNumber.Isocode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isoVatNumberVatNumber,
            'IsoVatNumber.VatNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $taxNumber,
            'TaxNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchText,
            'SearchText', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createDateFrom,
            'CreateDateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createDateTo,
            'CreateDateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updateDateFrom,
            'UpdateDateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updateDateTo,
            'UpdateDateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active,
            'Active', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additionalWhere,
            'AdditionalWhere', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'Skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'Take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1SuppliersPatch
     *
     * Updating an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierPatchCommand $supplierPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1SuppliersPatch($supplierPatchCommand = null, string $contentType = self::contentTypes['apiV1SuppliersPatch'][0])
    {
        list($response) = $this->apiV1SuppliersPatchWithHttpInfo($supplierPatchCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1SuppliersPatchWithHttpInfo
     *
     * Updating an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierPatchCommand $supplierPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1SuppliersPatchWithHttpInfo($supplierPatchCommand = null, string $contentType = self::contentTypes['apiV1SuppliersPatch'][0])
    {
        $request = $this->apiV1SuppliersPatchRequest($supplierPatchCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1SuppliersPatchAsync
     *
     * Updating an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierPatchCommand $supplierPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersPatchAsync($supplierPatchCommand = null, string $contentType = self::contentTypes['apiV1SuppliersPatch'][0])
    {
        return $this->apiV1SuppliersPatchAsyncWithHttpInfo($supplierPatchCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1SuppliersPatchAsyncWithHttpInfo
     *
     * Updating an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierPatchCommand $supplierPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersPatchAsyncWithHttpInfo($supplierPatchCommand = null, string $contentType = self::contentTypes['apiV1SuppliersPatch'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1SuppliersPatchRequest($supplierPatchCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1SuppliersPatch'
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierPatchCommand $supplierPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1SuppliersPatchRequest($supplierPatchCommand = null, string $contentType = self::contentTypes['apiV1SuppliersPatch'][0])
    {



        $resourcePath = '/api/v1/suppliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($supplierPatchCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($supplierPatchCommand));
            } else {
                $httpBody = $supplierPatchCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1SuppliersPost
     *
     * Creating an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierPostCommand $supplierPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1SuppliersPost($supplierPostCommand = null, string $contentType = self::contentTypes['apiV1SuppliersPost'][0])
    {
        list($response) = $this->apiV1SuppliersPostWithHttpInfo($supplierPostCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1SuppliersPostWithHttpInfo
     *
     * Creating an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierPostCommand $supplierPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1SuppliersPostWithHttpInfo($supplierPostCommand = null, string $contentType = self::contentTypes['apiV1SuppliersPost'][0])
    {
        $request = $this->apiV1SuppliersPostRequest($supplierPostCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1SuppliersPostAsync
     *
     * Creating an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierPostCommand $supplierPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersPostAsync($supplierPostCommand = null, string $contentType = self::contentTypes['apiV1SuppliersPost'][0])
    {
        return $this->apiV1SuppliersPostAsyncWithHttpInfo($supplierPostCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1SuppliersPostAsyncWithHttpInfo
     *
     * Creating an Supplier
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierPostCommand $supplierPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1SuppliersPostAsyncWithHttpInfo($supplierPostCommand = null, string $contentType = self::contentTypes['apiV1SuppliersPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1SuppliersPostRequest($supplierPostCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1SuppliersPost'
     *
     * @param  \OpenAPI\Client\Radix\Model\SupplierPostCommand $supplierPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1SuppliersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1SuppliersPostRequest($supplierPostCommand = null, string $contentType = self::contentTypes['apiV1SuppliersPost'][0])
    {



        $resourcePath = '/api/v1/suppliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($supplierPostCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($supplierPostCommand));
            } else {
                $httpBody = $supplierPostCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
