<?php
/**
 * PricesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Radix\ApiException;
use OpenAPI\Client\Radix\Configuration;
use OpenAPI\Client\Radix\HeaderSelector;
use OpenAPI\Client\Radix\ObjectSerializer;

/**
 * PricesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PricesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV1PricesArticleIdArticleIdGet' => [
            'application/json',
        ],
        'apiV1PricesCountGet' => [
            'application/json',
        ],
        'apiV1PricesCustomerIdCustomerIdGet' => [
            'application/json',
        ],
        'apiV1PricesDelete' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1PricesGet' => [
            'application/json',
        ],
        'apiV1PricesIdIdGet' => [
            'application/json',
        ],
        'apiV1PricesListGet' => [
            'application/json',
        ],
        'apiV1PricesPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1PricesPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1PricesSupplierIdSupplierIdGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV1PricesArticleIdArticleIdGet
     *
     * Returns a list of article prices
     *
     * @param  string $articleId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesArticleIdArticleIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\PriceDto[]
     */
    public function apiV1PricesArticleIdArticleIdGet($articleId, string $contentType = self::contentTypes['apiV1PricesArticleIdArticleIdGet'][0])
    {
        list($response) = $this->apiV1PricesArticleIdArticleIdGetWithHttpInfo($articleId, $contentType);
        return $response;
    }

    /**
     * Operation apiV1PricesArticleIdArticleIdGetWithHttpInfo
     *
     * Returns a list of article prices
     *
     * @param  string $articleId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesArticleIdArticleIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\PriceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1PricesArticleIdArticleIdGetWithHttpInfo($articleId, string $contentType = self::contentTypes['apiV1PricesArticleIdArticleIdGet'][0])
    {
        $request = $this->apiV1PricesArticleIdArticleIdGetRequest($articleId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\PriceDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\PriceDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\PriceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\PriceDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\PriceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1PricesArticleIdArticleIdGetAsync
     *
     * Returns a list of article prices
     *
     * @param  string $articleId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesArticleIdArticleIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesArticleIdArticleIdGetAsync($articleId, string $contentType = self::contentTypes['apiV1PricesArticleIdArticleIdGet'][0])
    {
        return $this->apiV1PricesArticleIdArticleIdGetAsyncWithHttpInfo($articleId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1PricesArticleIdArticleIdGetAsyncWithHttpInfo
     *
     * Returns a list of article prices
     *
     * @param  string $articleId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesArticleIdArticleIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesArticleIdArticleIdGetAsyncWithHttpInfo($articleId, string $contentType = self::contentTypes['apiV1PricesArticleIdArticleIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\PriceDto[]';
        $request = $this->apiV1PricesArticleIdArticleIdGetRequest($articleId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1PricesArticleIdArticleIdGet'
     *
     * @param  string $articleId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesArticleIdArticleIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1PricesArticleIdArticleIdGetRequest($articleId, string $contentType = self::contentTypes['apiV1PricesArticleIdArticleIdGet'][0])
    {

        // verify the required parameter 'articleId' is set
        if ($articleId === null || (is_array($articleId) && count($articleId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $articleId when calling apiV1PricesArticleIdArticleIdGet'
            );
        }


        $resourcePath = '/api/v1/prices/articleId/{articleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($articleId !== null) {
            $resourcePath = str_replace(
                '{' . 'articleId' . '}',
                ObjectSerializer::toPathValue($articleId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1PricesCountGet
     *
     * Returns the count of prices
     *
     * @param  string $id id (optional)
     * @param  string $artId artId (optional)
     * @param  string $customerId customerId (optional)
     * @param  string $supplierId supplierId (optional)
     * @param  string $promotionId promotionId (optional)
     * @param  string $shippingAddressId shippingAddressId (optional)
     * @param  float $quantity quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function apiV1PricesCountGet($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesCountGet'][0])
    {
        list($response) = $this->apiV1PricesCountGetWithHttpInfo($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType);
        return $response;
    }

    /**
     * Operation apiV1PricesCountGetWithHttpInfo
     *
     * Returns the count of prices
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1PricesCountGetWithHttpInfo($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesCountGet'][0])
    {
        $request = $this->apiV1PricesCountGetRequest($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1PricesCountGetAsync
     *
     * Returns the count of prices
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesCountGetAsync($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesCountGet'][0])
    {
        return $this->apiV1PricesCountGetAsyncWithHttpInfo($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1PricesCountGetAsyncWithHttpInfo
     *
     * Returns the count of prices
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesCountGetAsyncWithHttpInfo($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesCountGet'][0])
    {
        $returnType = 'int';
        $request = $this->apiV1PricesCountGetRequest($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1PricesCountGet'
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1PricesCountGetRequest($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesCountGet'][0])
    {









        $resourcePath = '/api/v1/prices/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $artId,
            'ArtId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customerId,
            'CustomerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supplierId,
            'SupplierId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promotionId,
            'PromotionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shippingAddressId,
            'ShippingAddressId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quantity,
            'Quantity', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1PricesCustomerIdCustomerIdGet
     *
     * Returns a list of customer prices
     *
     * @param  string $customerId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesCustomerIdCustomerIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\PriceDto[]
     */
    public function apiV1PricesCustomerIdCustomerIdGet($customerId, string $contentType = self::contentTypes['apiV1PricesCustomerIdCustomerIdGet'][0])
    {
        list($response) = $this->apiV1PricesCustomerIdCustomerIdGetWithHttpInfo($customerId, $contentType);
        return $response;
    }

    /**
     * Operation apiV1PricesCustomerIdCustomerIdGetWithHttpInfo
     *
     * Returns a list of customer prices
     *
     * @param  string $customerId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesCustomerIdCustomerIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\PriceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1PricesCustomerIdCustomerIdGetWithHttpInfo($customerId, string $contentType = self::contentTypes['apiV1PricesCustomerIdCustomerIdGet'][0])
    {
        $request = $this->apiV1PricesCustomerIdCustomerIdGetRequest($customerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\PriceDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\PriceDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\PriceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\PriceDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\PriceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1PricesCustomerIdCustomerIdGetAsync
     *
     * Returns a list of customer prices
     *
     * @param  string $customerId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesCustomerIdCustomerIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesCustomerIdCustomerIdGetAsync($customerId, string $contentType = self::contentTypes['apiV1PricesCustomerIdCustomerIdGet'][0])
    {
        return $this->apiV1PricesCustomerIdCustomerIdGetAsyncWithHttpInfo($customerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1PricesCustomerIdCustomerIdGetAsyncWithHttpInfo
     *
     * Returns a list of customer prices
     *
     * @param  string $customerId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesCustomerIdCustomerIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesCustomerIdCustomerIdGetAsyncWithHttpInfo($customerId, string $contentType = self::contentTypes['apiV1PricesCustomerIdCustomerIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\PriceDto[]';
        $request = $this->apiV1PricesCustomerIdCustomerIdGetRequest($customerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1PricesCustomerIdCustomerIdGet'
     *
     * @param  string $customerId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesCustomerIdCustomerIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1PricesCustomerIdCustomerIdGetRequest($customerId, string $contentType = self::contentTypes['apiV1PricesCustomerIdCustomerIdGet'][0])
    {

        // verify the required parameter 'customerId' is set
        if ($customerId === null || (is_array($customerId) && count($customerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerId when calling apiV1PricesCustomerIdCustomerIdGet'
            );
        }


        $resourcePath = '/api/v1/prices/customerId/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customerId !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1PricesDelete
     *
     * Delete an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PriceDeleteCommand $priceDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiV1PricesDelete($priceDeleteCommand = null, string $contentType = self::contentTypes['apiV1PricesDelete'][0])
    {
        list($response) = $this->apiV1PricesDeleteWithHttpInfo($priceDeleteCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1PricesDeleteWithHttpInfo
     *
     * Delete an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PriceDeleteCommand $priceDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1PricesDeleteWithHttpInfo($priceDeleteCommand = null, string $contentType = self::contentTypes['apiV1PricesDelete'][0])
    {
        $request = $this->apiV1PricesDeleteRequest($priceDeleteCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1PricesDeleteAsync
     *
     * Delete an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PriceDeleteCommand $priceDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesDeleteAsync($priceDeleteCommand = null, string $contentType = self::contentTypes['apiV1PricesDelete'][0])
    {
        return $this->apiV1PricesDeleteAsyncWithHttpInfo($priceDeleteCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1PricesDeleteAsyncWithHttpInfo
     *
     * Delete an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PriceDeleteCommand $priceDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesDeleteAsyncWithHttpInfo($priceDeleteCommand = null, string $contentType = self::contentTypes['apiV1PricesDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->apiV1PricesDeleteRequest($priceDeleteCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1PricesDelete'
     *
     * @param  \OpenAPI\Client\Radix\Model\PriceDeleteCommand $priceDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1PricesDeleteRequest($priceDeleteCommand = null, string $contentType = self::contentTypes['apiV1PricesDelete'][0])
    {



        $resourcePath = '/api/v1/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($priceDeleteCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($priceDeleteCommand));
            } else {
                $httpBody = $priceDeleteCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1PricesGet
     *
     * Returns a list of prices
     *
     * @param  string $id id (optional)
     * @param  string $artId artId (optional)
     * @param  string $customerId customerId (optional)
     * @param  string $supplierId supplierId (optional)
     * @param  string $promotionId promotionId (optional)
     * @param  string $shippingAddressId shippingAddressId (optional)
     * @param  float $quantity quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\PriceDto[]
     */
    public function apiV1PricesGet($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesGet'][0])
    {
        list($response) = $this->apiV1PricesGetWithHttpInfo($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType);
        return $response;
    }

    /**
     * Operation apiV1PricesGetWithHttpInfo
     *
     * Returns a list of prices
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\PriceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1PricesGetWithHttpInfo($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesGet'][0])
    {
        $request = $this->apiV1PricesGetRequest($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\PriceDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\PriceDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\PriceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\PriceDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\PriceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1PricesGetAsync
     *
     * Returns a list of prices
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesGetAsync($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesGet'][0])
    {
        return $this->apiV1PricesGetAsyncWithHttpInfo($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1PricesGetAsyncWithHttpInfo
     *
     * Returns a list of prices
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesGetAsyncWithHttpInfo($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\PriceDto[]';
        $request = $this->apiV1PricesGetRequest($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1PricesGet'
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1PricesGetRequest($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesGet'][0])
    {









        $resourcePath = '/api/v1/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $artId,
            'ArtId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customerId,
            'CustomerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supplierId,
            'SupplierId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promotionId,
            'PromotionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shippingAddressId,
            'ShippingAddressId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quantity,
            'Quantity', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1PricesIdIdGet
     *
     * Returns the price with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\PriceDto
     */
    public function apiV1PricesIdIdGet($id, string $contentType = self::contentTypes['apiV1PricesIdIdGet'][0])
    {
        list($response) = $this->apiV1PricesIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1PricesIdIdGetWithHttpInfo
     *
     * Returns the price with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\PriceDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1PricesIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1PricesIdIdGet'][0])
    {
        $request = $this->apiV1PricesIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\PriceDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\PriceDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\PriceDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\PriceDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\PriceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1PricesIdIdGetAsync
     *
     * Returns the price with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesIdIdGetAsync($id, string $contentType = self::contentTypes['apiV1PricesIdIdGet'][0])
    {
        return $this->apiV1PricesIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1PricesIdIdGetAsyncWithHttpInfo
     *
     * Returns the price with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1PricesIdIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\PriceDto';
        $request = $this->apiV1PricesIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1PricesIdIdGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1PricesIdIdGetRequest($id, string $contentType = self::contentTypes['apiV1PricesIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1PricesIdIdGet'
            );
        }


        $resourcePath = '/api/v1/prices/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1PricesListGet
     *
     * Returns a list of prices with minimal data
     *
     * @param  string $id id (optional)
     * @param  string $artId artId (optional)
     * @param  string $customerId customerId (optional)
     * @param  string $supplierId supplierId (optional)
     * @param  string $promotionId promotionId (optional)
     * @param  string $shippingAddressId shippingAddressId (optional)
     * @param  float $quantity quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\IdCodeDecimal[]
     */
    public function apiV1PricesListGet($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesListGet'][0])
    {
        list($response) = $this->apiV1PricesListGetWithHttpInfo($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType);
        return $response;
    }

    /**
     * Operation apiV1PricesListGetWithHttpInfo
     *
     * Returns a list of prices with minimal data
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\IdCodeDecimal[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1PricesListGetWithHttpInfo($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesListGet'][0])
    {
        $request = $this->apiV1PricesListGetRequest($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\IdCodeDecimal[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\IdCodeDecimal[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\IdCodeDecimal[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\IdCodeDecimal[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\IdCodeDecimal[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1PricesListGetAsync
     *
     * Returns a list of prices with minimal data
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesListGetAsync($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesListGet'][0])
    {
        return $this->apiV1PricesListGetAsyncWithHttpInfo($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1PricesListGetAsyncWithHttpInfo
     *
     * Returns a list of prices with minimal data
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesListGetAsyncWithHttpInfo($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesListGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\IdCodeDecimal[]';
        $request = $this->apiV1PricesListGetRequest($id, $artId, $customerId, $supplierId, $promotionId, $shippingAddressId, $quantity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1PricesListGet'
     *
     * @param  string $id (optional)
     * @param  string $artId (optional)
     * @param  string $customerId (optional)
     * @param  string $supplierId (optional)
     * @param  string $promotionId (optional)
     * @param  string $shippingAddressId (optional)
     * @param  float $quantity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1PricesListGetRequest($id = null, $artId = null, $customerId = null, $supplierId = null, $promotionId = null, $shippingAddressId = null, $quantity = null, string $contentType = self::contentTypes['apiV1PricesListGet'][0])
    {









        $resourcePath = '/api/v1/prices/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $artId,
            'ArtId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customerId,
            'CustomerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supplierId,
            'SupplierId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promotionId,
            'PromotionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shippingAddressId,
            'ShippingAddressId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quantity,
            'Quantity', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1PricesPatch
     *
     * Updating an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PricePatchCommand $pricePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1PricesPatch($pricePatchCommand = null, string $contentType = self::contentTypes['apiV1PricesPatch'][0])
    {
        list($response) = $this->apiV1PricesPatchWithHttpInfo($pricePatchCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1PricesPatchWithHttpInfo
     *
     * Updating an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PricePatchCommand $pricePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1PricesPatchWithHttpInfo($pricePatchCommand = null, string $contentType = self::contentTypes['apiV1PricesPatch'][0])
    {
        $request = $this->apiV1PricesPatchRequest($pricePatchCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1PricesPatchAsync
     *
     * Updating an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PricePatchCommand $pricePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesPatchAsync($pricePatchCommand = null, string $contentType = self::contentTypes['apiV1PricesPatch'][0])
    {
        return $this->apiV1PricesPatchAsyncWithHttpInfo($pricePatchCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1PricesPatchAsyncWithHttpInfo
     *
     * Updating an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PricePatchCommand $pricePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesPatchAsyncWithHttpInfo($pricePatchCommand = null, string $contentType = self::contentTypes['apiV1PricesPatch'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1PricesPatchRequest($pricePatchCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1PricesPatch'
     *
     * @param  \OpenAPI\Client\Radix\Model\PricePatchCommand $pricePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1PricesPatchRequest($pricePatchCommand = null, string $contentType = self::contentTypes['apiV1PricesPatch'][0])
    {



        $resourcePath = '/api/v1/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pricePatchCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pricePatchCommand));
            } else {
                $httpBody = $pricePatchCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1PricesPost
     *
     * Creating an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PricePostCommand $pricePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1PricesPost($pricePostCommand = null, string $contentType = self::contentTypes['apiV1PricesPost'][0])
    {
        list($response) = $this->apiV1PricesPostWithHttpInfo($pricePostCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1PricesPostWithHttpInfo
     *
     * Creating an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PricePostCommand $pricePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1PricesPostWithHttpInfo($pricePostCommand = null, string $contentType = self::contentTypes['apiV1PricesPost'][0])
    {
        $request = $this->apiV1PricesPostRequest($pricePostCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1PricesPostAsync
     *
     * Creating an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PricePostCommand $pricePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesPostAsync($pricePostCommand = null, string $contentType = self::contentTypes['apiV1PricesPost'][0])
    {
        return $this->apiV1PricesPostAsyncWithHttpInfo($pricePostCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1PricesPostAsyncWithHttpInfo
     *
     * Creating an price
     *
     * @param  \OpenAPI\Client\Radix\Model\PricePostCommand $pricePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesPostAsyncWithHttpInfo($pricePostCommand = null, string $contentType = self::contentTypes['apiV1PricesPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1PricesPostRequest($pricePostCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1PricesPost'
     *
     * @param  \OpenAPI\Client\Radix\Model\PricePostCommand $pricePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1PricesPostRequest($pricePostCommand = null, string $contentType = self::contentTypes['apiV1PricesPost'][0])
    {



        $resourcePath = '/api/v1/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pricePostCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pricePostCommand));
            } else {
                $httpBody = $pricePostCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1PricesSupplierIdSupplierIdGet
     *
     * Returns a list of supplier prices
     *
     * @param  string $supplierId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesSupplierIdSupplierIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\PriceDto[]
     */
    public function apiV1PricesSupplierIdSupplierIdGet($supplierId, string $contentType = self::contentTypes['apiV1PricesSupplierIdSupplierIdGet'][0])
    {
        list($response) = $this->apiV1PricesSupplierIdSupplierIdGetWithHttpInfo($supplierId, $contentType);
        return $response;
    }

    /**
     * Operation apiV1PricesSupplierIdSupplierIdGetWithHttpInfo
     *
     * Returns a list of supplier prices
     *
     * @param  string $supplierId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesSupplierIdSupplierIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\PriceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1PricesSupplierIdSupplierIdGetWithHttpInfo($supplierId, string $contentType = self::contentTypes['apiV1PricesSupplierIdSupplierIdGet'][0])
    {
        $request = $this->apiV1PricesSupplierIdSupplierIdGetRequest($supplierId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\PriceDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\PriceDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\PriceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\PriceDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\PriceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1PricesSupplierIdSupplierIdGetAsync
     *
     * Returns a list of supplier prices
     *
     * @param  string $supplierId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesSupplierIdSupplierIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesSupplierIdSupplierIdGetAsync($supplierId, string $contentType = self::contentTypes['apiV1PricesSupplierIdSupplierIdGet'][0])
    {
        return $this->apiV1PricesSupplierIdSupplierIdGetAsyncWithHttpInfo($supplierId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1PricesSupplierIdSupplierIdGetAsyncWithHttpInfo
     *
     * Returns a list of supplier prices
     *
     * @param  string $supplierId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesSupplierIdSupplierIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1PricesSupplierIdSupplierIdGetAsyncWithHttpInfo($supplierId, string $contentType = self::contentTypes['apiV1PricesSupplierIdSupplierIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\PriceDto[]';
        $request = $this->apiV1PricesSupplierIdSupplierIdGetRequest($supplierId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1PricesSupplierIdSupplierIdGet'
     *
     * @param  string $supplierId  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1PricesSupplierIdSupplierIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1PricesSupplierIdSupplierIdGetRequest($supplierId, string $contentType = self::contentTypes['apiV1PricesSupplierIdSupplierIdGet'][0])
    {

        // verify the required parameter 'supplierId' is set
        if ($supplierId === null || (is_array($supplierId) && count($supplierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplierId when calling apiV1PricesSupplierIdSupplierIdGet'
            );
        }


        $resourcePath = '/api/v1/prices/supplierId/{supplierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($supplierId !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierId' . '}',
                ObjectSerializer::toPathValue($supplierId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
