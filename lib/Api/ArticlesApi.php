<?php
/**
 * ArticlesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Radix\ApiException;
use OpenAPI\Client\Radix\Configuration;
use OpenAPI\Client\Radix\HeaderSelector;
use OpenAPI\Client\Radix\ObjectSerializer;

/**
 * ArticlesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ArticlesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV1ArticlesAlternatesDelete' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesAlternatesGet' => [
            'application/json',
        ],
        'apiV1ArticlesAlternatesIdIdGet' => [
            'application/json',
        ],
        'apiV1ArticlesAlternatesPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesAlternatesPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesBarcodesDelete' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesBarcodesGet' => [
            'application/json',
        ],
        'apiV1ArticlesBarcodesIdIdGet' => [
            'application/json',
        ],
        'apiV1ArticlesBarcodesPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesBarcodesPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesCountGet' => [
            'application/json',
        ],
        'apiV1ArticlesDepositDataDelete' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesDepositDataGet' => [
            'application/json',
        ],
        'apiV1ArticlesDepositDataIdIdGet' => [
            'application/json',
        ],
        'apiV1ArticlesDepositDataPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesDepositDataPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesGet' => [
            'application/json',
        ],
        'apiV1ArticlesIdIdAlternatesGet' => [
            'application/json',
        ],
        'apiV1ArticlesIdIdBarcodesGet' => [
            'application/json',
        ],
        'apiV1ArticlesIdIdDepositDataGet' => [
            'application/json',
        ],
        'apiV1ArticlesIdIdGet' => [
            'application/json',
        ],
        'apiV1ArticlesIdIdMeasurementUnitsGet' => [
            'application/json',
        ],
        'apiV1ArticlesIdIdPricesGet' => [
            'application/json',
        ],
        'apiV1ArticlesIdIdSupplierCustomerNumberGet' => [
            'application/json',
        ],
        'apiV1ArticlesListGet' => [
            'application/json',
        ],
        'apiV1ArticlesMeasurementUnitsDelete' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesMeasurementUnitsGet' => [
            'application/json',
        ],
        'apiV1ArticlesMeasurementUnitsIdIdGet' => [
            'application/json',
        ],
        'apiV1ArticlesMeasurementUnitsPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesMeasurementUnitsPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesQuantitiesGet' => [
            'application/json',
        ],
        'apiV1ArticlesSupplierCustomerNumbersDelete' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesSupplierCustomerNumbersGet' => [
            'application/json',
        ],
        'apiV1ArticlesSupplierCustomerNumbersIdIdGet' => [
            'application/json',
        ],
        'apiV1ArticlesSupplierCustomerNumbersPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1ArticlesSupplierCustomerNumbersPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV1ArticlesAlternatesDelete
     *
     * Delete an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternateDeleteCommand $articleAlternateDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiV1ArticlesAlternatesDelete($articleAlternateDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesDelete'][0])
    {
        list($response) = $this->apiV1ArticlesAlternatesDeleteWithHttpInfo($articleAlternateDeleteCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesAlternatesDeleteWithHttpInfo
     *
     * Delete an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternateDeleteCommand $articleAlternateDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesAlternatesDeleteWithHttpInfo($articleAlternateDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesDelete'][0])
    {
        $request = $this->apiV1ArticlesAlternatesDeleteRequest($articleAlternateDeleteCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesAlternatesDeleteAsync
     *
     * Delete an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternateDeleteCommand $articleAlternateDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesAlternatesDeleteAsync($articleAlternateDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesDelete'][0])
    {
        return $this->apiV1ArticlesAlternatesDeleteAsyncWithHttpInfo($articleAlternateDeleteCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesAlternatesDeleteAsyncWithHttpInfo
     *
     * Delete an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternateDeleteCommand $articleAlternateDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesAlternatesDeleteAsyncWithHttpInfo($articleAlternateDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->apiV1ArticlesAlternatesDeleteRequest($articleAlternateDeleteCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesAlternatesDelete'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternateDeleteCommand $articleAlternateDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesAlternatesDeleteRequest($articleAlternateDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesDelete'][0])
    {



        $resourcePath = '/api/v1/articles/alternates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleAlternateDeleteCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleAlternateDeleteCommand));
            } else {
                $httpBody = $articleAlternateDeleteCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesAlternatesGet
     *
     * Returns a list of article-alternates
     *
     * @param  string $id id (optional)
     * @param  string $articleId articleId (optional)
     * @param  string $codeAlternate codeAlternate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleAlternateDto[]
     */
    public function apiV1ArticlesAlternatesGet($id = null, $articleId = null, $codeAlternate = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesGet'][0])
    {
        list($response) = $this->apiV1ArticlesAlternatesGetWithHttpInfo($id, $articleId, $codeAlternate, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesAlternatesGetWithHttpInfo
     *
     * Returns a list of article-alternates
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $codeAlternate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleAlternateDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesAlternatesGetWithHttpInfo($id = null, $articleId = null, $codeAlternate = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesGet'][0])
    {
        $request = $this->apiV1ArticlesAlternatesGetRequest($id, $articleId, $codeAlternate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesAlternatesGetAsync
     *
     * Returns a list of article-alternates
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $codeAlternate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesAlternatesGetAsync($id = null, $articleId = null, $codeAlternate = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesGet'][0])
    {
        return $this->apiV1ArticlesAlternatesGetAsyncWithHttpInfo($id, $articleId, $codeAlternate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesAlternatesGetAsyncWithHttpInfo
     *
     * Returns a list of article-alternates
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $codeAlternate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesAlternatesGetAsyncWithHttpInfo($id = null, $articleId = null, $codeAlternate = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]';
        $request = $this->apiV1ArticlesAlternatesGetRequest($id, $articleId, $codeAlternate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesAlternatesGet'
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $codeAlternate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesAlternatesGetRequest($id = null, $articleId = null, $codeAlternate = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesGet'][0])
    {





        $resourcePath = '/api/v1/articles/alternates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $articleId,
            'ArticleId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $codeAlternate,
            'Code_Alternate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesAlternatesIdIdGet
     *
     * Returns the article-alternate with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleAlternateDto
     */
    public function apiV1ArticlesAlternatesIdIdGet($id, string $contentType = self::contentTypes['apiV1ArticlesAlternatesIdIdGet'][0])
    {
        list($response) = $this->apiV1ArticlesAlternatesIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesAlternatesIdIdGetWithHttpInfo
     *
     * Returns the article-alternate with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleAlternateDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesAlternatesIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesAlternatesIdIdGet'][0])
    {
        $request = $this->apiV1ArticlesAlternatesIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleAlternateDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleAlternateDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleAlternateDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleAlternateDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleAlternateDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesAlternatesIdIdGetAsync
     *
     * Returns the article-alternate with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesAlternatesIdIdGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesAlternatesIdIdGet'][0])
    {
        return $this->apiV1ArticlesAlternatesIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesAlternatesIdIdGetAsyncWithHttpInfo
     *
     * Returns the article-alternate with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesAlternatesIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesAlternatesIdIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleAlternateDto';
        $request = $this->apiV1ArticlesAlternatesIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesAlternatesIdIdGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesAlternatesIdIdGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesAlternatesIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesAlternatesIdIdGet'
            );
        }


        $resourcePath = '/api/v1/articles/alternates/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesAlternatesPatch
     *
     * Update an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternatePatchCommand $articleAlternatePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesAlternatesPatch($articleAlternatePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesPatch'][0])
    {
        list($response) = $this->apiV1ArticlesAlternatesPatchWithHttpInfo($articleAlternatePatchCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesAlternatesPatchWithHttpInfo
     *
     * Update an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternatePatchCommand $articleAlternatePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesAlternatesPatchWithHttpInfo($articleAlternatePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesPatch'][0])
    {
        $request = $this->apiV1ArticlesAlternatesPatchRequest($articleAlternatePatchCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesAlternatesPatchAsync
     *
     * Update an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternatePatchCommand $articleAlternatePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesAlternatesPatchAsync($articleAlternatePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesPatch'][0])
    {
        return $this->apiV1ArticlesAlternatesPatchAsyncWithHttpInfo($articleAlternatePatchCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesAlternatesPatchAsyncWithHttpInfo
     *
     * Update an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternatePatchCommand $articleAlternatePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesAlternatesPatchAsyncWithHttpInfo($articleAlternatePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesPatch'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesAlternatesPatchRequest($articleAlternatePatchCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesAlternatesPatch'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternatePatchCommand $articleAlternatePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesAlternatesPatchRequest($articleAlternatePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesPatch'][0])
    {



        $resourcePath = '/api/v1/articles/alternates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleAlternatePatchCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleAlternatePatchCommand));
            } else {
                $httpBody = $articleAlternatePatchCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesAlternatesPost
     *
     * Creating an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternatePostCommand $articleAlternatePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesAlternatesPost($articleAlternatePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesPost'][0])
    {
        list($response) = $this->apiV1ArticlesAlternatesPostWithHttpInfo($articleAlternatePostCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesAlternatesPostWithHttpInfo
     *
     * Creating an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternatePostCommand $articleAlternatePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesAlternatesPostWithHttpInfo($articleAlternatePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesPost'][0])
    {
        $request = $this->apiV1ArticlesAlternatesPostRequest($articleAlternatePostCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesAlternatesPostAsync
     *
     * Creating an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternatePostCommand $articleAlternatePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesAlternatesPostAsync($articleAlternatePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesPost'][0])
    {
        return $this->apiV1ArticlesAlternatesPostAsyncWithHttpInfo($articleAlternatePostCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesAlternatesPostAsyncWithHttpInfo
     *
     * Creating an article-alternate
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternatePostCommand $articleAlternatePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesAlternatesPostAsyncWithHttpInfo($articleAlternatePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesAlternatesPostRequest($articleAlternatePostCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesAlternatesPost'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleAlternatePostCommand $articleAlternatePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesAlternatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesAlternatesPostRequest($articleAlternatePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesAlternatesPost'][0])
    {



        $resourcePath = '/api/v1/articles/alternates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleAlternatePostCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleAlternatePostCommand));
            } else {
                $httpBody = $articleAlternatePostCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesBarcodesDelete
     *
     * Delete an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodeDeleteCommand $articleBarcodeDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiV1ArticlesBarcodesDelete($articleBarcodeDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesDelete'][0])
    {
        list($response) = $this->apiV1ArticlesBarcodesDeleteWithHttpInfo($articleBarcodeDeleteCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesBarcodesDeleteWithHttpInfo
     *
     * Delete an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodeDeleteCommand $articleBarcodeDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesBarcodesDeleteWithHttpInfo($articleBarcodeDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesDelete'][0])
    {
        $request = $this->apiV1ArticlesBarcodesDeleteRequest($articleBarcodeDeleteCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesBarcodesDeleteAsync
     *
     * Delete an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodeDeleteCommand $articleBarcodeDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesBarcodesDeleteAsync($articleBarcodeDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesDelete'][0])
    {
        return $this->apiV1ArticlesBarcodesDeleteAsyncWithHttpInfo($articleBarcodeDeleteCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesBarcodesDeleteAsyncWithHttpInfo
     *
     * Delete an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodeDeleteCommand $articleBarcodeDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesBarcodesDeleteAsyncWithHttpInfo($articleBarcodeDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->apiV1ArticlesBarcodesDeleteRequest($articleBarcodeDeleteCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesBarcodesDelete'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodeDeleteCommand $articleBarcodeDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesBarcodesDeleteRequest($articleBarcodeDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesDelete'][0])
    {



        $resourcePath = '/api/v1/articles/barcodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleBarcodeDeleteCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleBarcodeDeleteCommand));
            } else {
                $httpBody = $articleBarcodeDeleteCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesBarcodesGet
     *
     * Returns a list of article-barcodes
     *
     * @param  string $id id (optional)
     * @param  string $articleId articleId (optional)
     * @param  string $barcode barcode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]
     */
    public function apiV1ArticlesBarcodesGet($id = null, $articleId = null, $barcode = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesGet'][0])
    {
        list($response) = $this->apiV1ArticlesBarcodesGetWithHttpInfo($id, $articleId, $barcode, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesBarcodesGetWithHttpInfo
     *
     * Returns a list of article-barcodes
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $barcode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleBarcodeDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesBarcodesGetWithHttpInfo($id = null, $articleId = null, $barcode = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesGet'][0])
    {
        $request = $this->apiV1ArticlesBarcodesGetRequest($id, $articleId, $barcode, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesBarcodesGetAsync
     *
     * Returns a list of article-barcodes
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $barcode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesBarcodesGetAsync($id = null, $articleId = null, $barcode = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesGet'][0])
    {
        return $this->apiV1ArticlesBarcodesGetAsyncWithHttpInfo($id, $articleId, $barcode, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesBarcodesGetAsyncWithHttpInfo
     *
     * Returns a list of article-barcodes
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $barcode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesBarcodesGetAsyncWithHttpInfo($id = null, $articleId = null, $barcode = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]';
        $request = $this->apiV1ArticlesBarcodesGetRequest($id, $articleId, $barcode, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesBarcodesGet'
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $barcode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesBarcodesGetRequest($id = null, $articleId = null, $barcode = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesGet'][0])
    {





        $resourcePath = '/api/v1/articles/barcodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $articleId,
            'ArticleId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $barcode,
            'Barcode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesBarcodesIdIdGet
     *
     * Returns the article-barcode with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleBarcodeDto
     */
    public function apiV1ArticlesBarcodesIdIdGet($id, string $contentType = self::contentTypes['apiV1ArticlesBarcodesIdIdGet'][0])
    {
        list($response) = $this->apiV1ArticlesBarcodesIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesBarcodesIdIdGetWithHttpInfo
     *
     * Returns the article-barcode with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleBarcodeDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesBarcodesIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesBarcodesIdIdGet'][0])
    {
        $request = $this->apiV1ArticlesBarcodesIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleBarcodeDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleBarcodeDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesBarcodesIdIdGetAsync
     *
     * Returns the article-barcode with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesBarcodesIdIdGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesBarcodesIdIdGet'][0])
    {
        return $this->apiV1ArticlesBarcodesIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesBarcodesIdIdGetAsyncWithHttpInfo
     *
     * Returns the article-barcode with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesBarcodesIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesBarcodesIdIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto';
        $request = $this->apiV1ArticlesBarcodesIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesBarcodesIdIdGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesBarcodesIdIdGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesBarcodesIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesBarcodesIdIdGet'
            );
        }


        $resourcePath = '/api/v1/articles/barcodes/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesBarcodesPatch
     *
     * Update an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodePatchCommand $articleBarcodePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesBarcodesPatch($articleBarcodePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesPatch'][0])
    {
        list($response) = $this->apiV1ArticlesBarcodesPatchWithHttpInfo($articleBarcodePatchCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesBarcodesPatchWithHttpInfo
     *
     * Update an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodePatchCommand $articleBarcodePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesBarcodesPatchWithHttpInfo($articleBarcodePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesPatch'][0])
    {
        $request = $this->apiV1ArticlesBarcodesPatchRequest($articleBarcodePatchCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesBarcodesPatchAsync
     *
     * Update an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodePatchCommand $articleBarcodePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesBarcodesPatchAsync($articleBarcodePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesPatch'][0])
    {
        return $this->apiV1ArticlesBarcodesPatchAsyncWithHttpInfo($articleBarcodePatchCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesBarcodesPatchAsyncWithHttpInfo
     *
     * Update an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodePatchCommand $articleBarcodePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesBarcodesPatchAsyncWithHttpInfo($articleBarcodePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesPatch'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesBarcodesPatchRequest($articleBarcodePatchCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesBarcodesPatch'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodePatchCommand $articleBarcodePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesBarcodesPatchRequest($articleBarcodePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesPatch'][0])
    {



        $resourcePath = '/api/v1/articles/barcodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleBarcodePatchCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleBarcodePatchCommand));
            } else {
                $httpBody = $articleBarcodePatchCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesBarcodesPost
     *
     * Creating an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodePostCommand $articleBarcodePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesBarcodesPost($articleBarcodePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesPost'][0])
    {
        list($response) = $this->apiV1ArticlesBarcodesPostWithHttpInfo($articleBarcodePostCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesBarcodesPostWithHttpInfo
     *
     * Creating an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodePostCommand $articleBarcodePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesBarcodesPostWithHttpInfo($articleBarcodePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesPost'][0])
    {
        $request = $this->apiV1ArticlesBarcodesPostRequest($articleBarcodePostCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesBarcodesPostAsync
     *
     * Creating an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodePostCommand $articleBarcodePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesBarcodesPostAsync($articleBarcodePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesPost'][0])
    {
        return $this->apiV1ArticlesBarcodesPostAsyncWithHttpInfo($articleBarcodePostCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesBarcodesPostAsyncWithHttpInfo
     *
     * Creating an article-barcode
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodePostCommand $articleBarcodePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesBarcodesPostAsyncWithHttpInfo($articleBarcodePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesBarcodesPostRequest($articleBarcodePostCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesBarcodesPost'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleBarcodePostCommand $articleBarcodePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesBarcodesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesBarcodesPostRequest($articleBarcodePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesBarcodesPost'][0])
    {



        $resourcePath = '/api/v1/articles/barcodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleBarcodePostCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleBarcodePostCommand));
            } else {
                $httpBody = $articleBarcodePostCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesCountGet
     *
     * Returns the count of articles
     *
     * @param  string $id id (optional)
     * @param  string $code code (optional)
     * @param  string $model model (optional)
     * @param  string $searchText searchText (optional)
     * @param  bool $active active (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $additionalWhere additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function apiV1ArticlesCountGet($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesCountGet'][0])
    {
        list($response) = $this->apiV1ArticlesCountGetWithHttpInfo($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesCountGetWithHttpInfo
     *
     * Returns the count of articles
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesCountGetWithHttpInfo($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesCountGet'][0])
    {
        $request = $this->apiV1ArticlesCountGetRequest($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesCountGetAsync
     *
     * Returns the count of articles
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesCountGetAsync($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesCountGet'][0])
    {
        return $this->apiV1ArticlesCountGetAsyncWithHttpInfo($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesCountGetAsyncWithHttpInfo
     *
     * Returns the count of articles
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesCountGetAsyncWithHttpInfo($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesCountGet'][0])
    {
        $returnType = 'int';
        $request = $this->apiV1ArticlesCountGetRequest($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesCountGet'
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesCountGetRequest($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesCountGet'][0])
    {










        $resourcePath = '/api/v1/articles/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'Code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model,
            'Model', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchText,
            'SearchText', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active,
            'Active', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'Skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'Take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additionalWhere,
            'AdditionalWhere', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesDepositDataDelete
     *
     * Delete an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataDeleteCommand $articledepositDataDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiV1ArticlesDepositDataDelete($articledepositDataDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataDelete'][0])
    {
        list($response) = $this->apiV1ArticlesDepositDataDeleteWithHttpInfo($articledepositDataDeleteCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesDepositDataDeleteWithHttpInfo
     *
     * Delete an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataDeleteCommand $articledepositDataDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesDepositDataDeleteWithHttpInfo($articledepositDataDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataDelete'][0])
    {
        $request = $this->apiV1ArticlesDepositDataDeleteRequest($articledepositDataDeleteCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesDepositDataDeleteAsync
     *
     * Delete an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataDeleteCommand $articledepositDataDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesDepositDataDeleteAsync($articledepositDataDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataDelete'][0])
    {
        return $this->apiV1ArticlesDepositDataDeleteAsyncWithHttpInfo($articledepositDataDeleteCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesDepositDataDeleteAsyncWithHttpInfo
     *
     * Delete an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataDeleteCommand $articledepositDataDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesDepositDataDeleteAsyncWithHttpInfo($articledepositDataDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->apiV1ArticlesDepositDataDeleteRequest($articledepositDataDeleteCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesDepositDataDelete'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataDeleteCommand $articledepositDataDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesDepositDataDeleteRequest($articledepositDataDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataDelete'][0])
    {



        $resourcePath = '/api/v1/articles/depositData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articledepositDataDeleteCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articledepositDataDeleteCommand));
            } else {
                $httpBody = $articledepositDataDeleteCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesDepositDataGet
     *
     * Returns a list of article-depositdata
     *
     * @param  string $id id (optional)
     * @param  string $articleId articleId (optional)
     * @param  string $depositId depositId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticledepositDataDto[]
     */
    public function apiV1ArticlesDepositDataGet($id = null, $articleId = null, $depositId = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataGet'][0])
    {
        list($response) = $this->apiV1ArticlesDepositDataGetWithHttpInfo($id, $articleId, $depositId, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesDepositDataGetWithHttpInfo
     *
     * Returns a list of article-depositdata
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $depositId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticledepositDataDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesDepositDataGetWithHttpInfo($id = null, $articleId = null, $depositId = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataGet'][0])
    {
        $request = $this->apiV1ArticlesDepositDataGetRequest($id, $articleId, $depositId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesDepositDataGetAsync
     *
     * Returns a list of article-depositdata
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $depositId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesDepositDataGetAsync($id = null, $articleId = null, $depositId = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataGet'][0])
    {
        return $this->apiV1ArticlesDepositDataGetAsyncWithHttpInfo($id, $articleId, $depositId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesDepositDataGetAsyncWithHttpInfo
     *
     * Returns a list of article-depositdata
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $depositId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesDepositDataGetAsyncWithHttpInfo($id = null, $articleId = null, $depositId = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]';
        $request = $this->apiV1ArticlesDepositDataGetRequest($id, $articleId, $depositId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesDepositDataGet'
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $depositId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesDepositDataGetRequest($id = null, $articleId = null, $depositId = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataGet'][0])
    {





        $resourcePath = '/api/v1/articles/depositData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $articleId,
            'ArticleId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $depositId,
            'DepositId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesDepositDataIdIdGet
     *
     * Returns the article-depositdata with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticledepositDataDto
     */
    public function apiV1ArticlesDepositDataIdIdGet($id, string $contentType = self::contentTypes['apiV1ArticlesDepositDataIdIdGet'][0])
    {
        list($response) = $this->apiV1ArticlesDepositDataIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesDepositDataIdIdGetWithHttpInfo
     *
     * Returns the article-depositdata with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticledepositDataDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesDepositDataIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesDepositDataIdIdGet'][0])
    {
        $request = $this->apiV1ArticlesDepositDataIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticledepositDataDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticledepositDataDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticledepositDataDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticledepositDataDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticledepositDataDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesDepositDataIdIdGetAsync
     *
     * Returns the article-depositdata with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesDepositDataIdIdGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesDepositDataIdIdGet'][0])
    {
        return $this->apiV1ArticlesDepositDataIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesDepositDataIdIdGetAsyncWithHttpInfo
     *
     * Returns the article-depositdata with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesDepositDataIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesDepositDataIdIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticledepositDataDto';
        $request = $this->apiV1ArticlesDepositDataIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesDepositDataIdIdGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesDepositDataIdIdGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesDepositDataIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesDepositDataIdIdGet'
            );
        }


        $resourcePath = '/api/v1/articles/depositData/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesDepositDataPatch
     *
     * Update an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataPatchCommand $articledepositDataPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesDepositDataPatch($articledepositDataPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataPatch'][0])
    {
        list($response) = $this->apiV1ArticlesDepositDataPatchWithHttpInfo($articledepositDataPatchCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesDepositDataPatchWithHttpInfo
     *
     * Update an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataPatchCommand $articledepositDataPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesDepositDataPatchWithHttpInfo($articledepositDataPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataPatch'][0])
    {
        $request = $this->apiV1ArticlesDepositDataPatchRequest($articledepositDataPatchCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesDepositDataPatchAsync
     *
     * Update an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataPatchCommand $articledepositDataPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesDepositDataPatchAsync($articledepositDataPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataPatch'][0])
    {
        return $this->apiV1ArticlesDepositDataPatchAsyncWithHttpInfo($articledepositDataPatchCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesDepositDataPatchAsyncWithHttpInfo
     *
     * Update an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataPatchCommand $articledepositDataPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesDepositDataPatchAsyncWithHttpInfo($articledepositDataPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataPatch'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesDepositDataPatchRequest($articledepositDataPatchCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesDepositDataPatch'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataPatchCommand $articledepositDataPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesDepositDataPatchRequest($articledepositDataPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataPatch'][0])
    {



        $resourcePath = '/api/v1/articles/depositData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articledepositDataPatchCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articledepositDataPatchCommand));
            } else {
                $httpBody = $articledepositDataPatchCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesDepositDataPost
     *
     * Creating an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataPostCommand $articledepositDataPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesDepositDataPost($articledepositDataPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataPost'][0])
    {
        list($response) = $this->apiV1ArticlesDepositDataPostWithHttpInfo($articledepositDataPostCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesDepositDataPostWithHttpInfo
     *
     * Creating an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataPostCommand $articledepositDataPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesDepositDataPostWithHttpInfo($articledepositDataPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataPost'][0])
    {
        $request = $this->apiV1ArticlesDepositDataPostRequest($articledepositDataPostCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesDepositDataPostAsync
     *
     * Creating an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataPostCommand $articledepositDataPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesDepositDataPostAsync($articledepositDataPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataPost'][0])
    {
        return $this->apiV1ArticlesDepositDataPostAsyncWithHttpInfo($articledepositDataPostCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesDepositDataPostAsyncWithHttpInfo
     *
     * Creating an article-depositdata
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataPostCommand $articledepositDataPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesDepositDataPostAsyncWithHttpInfo($articledepositDataPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesDepositDataPostRequest($articledepositDataPostCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesDepositDataPost'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticledepositDataPostCommand $articledepositDataPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesDepositDataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesDepositDataPostRequest($articledepositDataPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesDepositDataPost'][0])
    {



        $resourcePath = '/api/v1/articles/depositData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articledepositDataPostCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articledepositDataPostCommand));
            } else {
                $httpBody = $articledepositDataPostCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesGet
     *
     * Returns a list of articles
     *
     * @param  string $id id (optional)
     * @param  string $code code (optional)
     * @param  string $model model (optional)
     * @param  string $searchText searchText (optional)
     * @param  bool $active active (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $additionalWhere additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleDto[]
     */
    public function apiV1ArticlesGet($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesGet'][0])
    {
        list($response) = $this->apiV1ArticlesGetWithHttpInfo($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesGetWithHttpInfo
     *
     * Returns a list of articles
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesGetWithHttpInfo($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesGet'][0])
    {
        $request = $this->apiV1ArticlesGetRequest($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesGetAsync
     *
     * Returns a list of articles
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesGetAsync($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesGet'][0])
    {
        return $this->apiV1ArticlesGetAsyncWithHttpInfo($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesGetAsyncWithHttpInfo
     *
     * Returns a list of articles
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesGetAsyncWithHttpInfo($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleDto[]';
        $request = $this->apiV1ArticlesGetRequest($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesGet'
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesGetRequest($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesGet'][0])
    {










        $resourcePath = '/api/v1/articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'Code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model,
            'Model', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchText,
            'SearchText', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active,
            'Active', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'Skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'Take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additionalWhere,
            'AdditionalWhere', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesIdIdAlternatesGet
     *
     * Returns a list of article-alternates with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdAlternatesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleAlternateDto[]
     */
    public function apiV1ArticlesIdIdAlternatesGet($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdAlternatesGet'][0])
    {
        list($response) = $this->apiV1ArticlesIdIdAlternatesGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesIdIdAlternatesGetWithHttpInfo
     *
     * Returns a list of article-alternates with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdAlternatesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleAlternateDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesIdIdAlternatesGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdAlternatesGet'][0])
    {
        $request = $this->apiV1ArticlesIdIdAlternatesGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesIdIdAlternatesGetAsync
     *
     * Returns a list of article-alternates with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdAlternatesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdAlternatesGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdAlternatesGet'][0])
    {
        return $this->apiV1ArticlesIdIdAlternatesGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesIdIdAlternatesGetAsyncWithHttpInfo
     *
     * Returns a list of article-alternates with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdAlternatesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdAlternatesGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdAlternatesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleAlternateDto[]';
        $request = $this->apiV1ArticlesIdIdAlternatesGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesIdIdAlternatesGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdAlternatesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesIdIdAlternatesGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdAlternatesGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesIdIdAlternatesGet'
            );
        }


        $resourcePath = '/api/v1/articles/id/{id}/alternates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesIdIdBarcodesGet
     *
     * Returns a list of article-barcodes with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdBarcodesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]
     */
    public function apiV1ArticlesIdIdBarcodesGet($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdBarcodesGet'][0])
    {
        list($response) = $this->apiV1ArticlesIdIdBarcodesGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesIdIdBarcodesGetWithHttpInfo
     *
     * Returns a list of article-barcodes with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdBarcodesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleBarcodeDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesIdIdBarcodesGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdBarcodesGet'][0])
    {
        $request = $this->apiV1ArticlesIdIdBarcodesGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesIdIdBarcodesGetAsync
     *
     * Returns a list of article-barcodes with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdBarcodesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdBarcodesGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdBarcodesGet'][0])
    {
        return $this->apiV1ArticlesIdIdBarcodesGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesIdIdBarcodesGetAsyncWithHttpInfo
     *
     * Returns a list of article-barcodes with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdBarcodesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdBarcodesGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdBarcodesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleBarcodeDto[]';
        $request = $this->apiV1ArticlesIdIdBarcodesGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesIdIdBarcodesGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdBarcodesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesIdIdBarcodesGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdBarcodesGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesIdIdBarcodesGet'
            );
        }


        $resourcePath = '/api/v1/articles/id/{id}/barcodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesIdIdDepositDataGet
     *
     * Returns a list of article-depositdata with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdDepositDataGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticledepositDataDto[]
     */
    public function apiV1ArticlesIdIdDepositDataGet($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdDepositDataGet'][0])
    {
        list($response) = $this->apiV1ArticlesIdIdDepositDataGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesIdIdDepositDataGetWithHttpInfo
     *
     * Returns a list of article-depositdata with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdDepositDataGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticledepositDataDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesIdIdDepositDataGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdDepositDataGet'][0])
    {
        $request = $this->apiV1ArticlesIdIdDepositDataGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesIdIdDepositDataGetAsync
     *
     * Returns a list of article-depositdata with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdDepositDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdDepositDataGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdDepositDataGet'][0])
    {
        return $this->apiV1ArticlesIdIdDepositDataGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesIdIdDepositDataGetAsyncWithHttpInfo
     *
     * Returns a list of article-depositdata with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdDepositDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdDepositDataGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdDepositDataGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticledepositDataDto[]';
        $request = $this->apiV1ArticlesIdIdDepositDataGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesIdIdDepositDataGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdDepositDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesIdIdDepositDataGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdDepositDataGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesIdIdDepositDataGet'
            );
        }


        $resourcePath = '/api/v1/articles/id/{id}/depositData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesIdIdGet
     *
     * Returns the article with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleDto
     */
    public function apiV1ArticlesIdIdGet($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdGet'][0])
    {
        list($response) = $this->apiV1ArticlesIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesIdIdGetWithHttpInfo
     *
     * Returns the article with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdGet'][0])
    {
        $request = $this->apiV1ArticlesIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesIdIdGetAsync
     *
     * Returns the article with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdGet'][0])
    {
        return $this->apiV1ArticlesIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesIdIdGetAsyncWithHttpInfo
     *
     * Returns the article with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleDto';
        $request = $this->apiV1ArticlesIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesIdIdGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesIdIdGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesIdIdGet'
            );
        }


        $resourcePath = '/api/v1/articles/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesIdIdMeasurementUnitsGet
     *
     * Returns a list of article-measurementunits with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdMeasurementUnitsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]
     */
    public function apiV1ArticlesIdIdMeasurementUnitsGet($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdMeasurementUnitsGet'][0])
    {
        list($response) = $this->apiV1ArticlesIdIdMeasurementUnitsGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesIdIdMeasurementUnitsGetWithHttpInfo
     *
     * Returns a list of article-measurementunits with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdMeasurementUnitsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesIdIdMeasurementUnitsGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdMeasurementUnitsGet'][0])
    {
        $request = $this->apiV1ArticlesIdIdMeasurementUnitsGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesIdIdMeasurementUnitsGetAsync
     *
     * Returns a list of article-measurementunits with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdMeasurementUnitsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdMeasurementUnitsGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdMeasurementUnitsGet'][0])
    {
        return $this->apiV1ArticlesIdIdMeasurementUnitsGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesIdIdMeasurementUnitsGetAsyncWithHttpInfo
     *
     * Returns a list of article-measurementunits with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdMeasurementUnitsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdMeasurementUnitsGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdMeasurementUnitsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]';
        $request = $this->apiV1ArticlesIdIdMeasurementUnitsGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesIdIdMeasurementUnitsGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdMeasurementUnitsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesIdIdMeasurementUnitsGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdMeasurementUnitsGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesIdIdMeasurementUnitsGet'
            );
        }


        $resourcePath = '/api/v1/articles/id/{id}/measurementUnits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesIdIdPricesGet
     *
     * Returns a list of article-prices with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdPricesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\PriceDto[]
     */
    public function apiV1ArticlesIdIdPricesGet($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdPricesGet'][0])
    {
        list($response) = $this->apiV1ArticlesIdIdPricesGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesIdIdPricesGetWithHttpInfo
     *
     * Returns a list of article-prices with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdPricesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\PriceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesIdIdPricesGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdPricesGet'][0])
    {
        $request = $this->apiV1ArticlesIdIdPricesGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\PriceDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\PriceDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\PriceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\PriceDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\PriceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesIdIdPricesGetAsync
     *
     * Returns a list of article-prices with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdPricesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdPricesGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdPricesGet'][0])
    {
        return $this->apiV1ArticlesIdIdPricesGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesIdIdPricesGetAsyncWithHttpInfo
     *
     * Returns a list of article-prices with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdPricesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdPricesGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdPricesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\PriceDto[]';
        $request = $this->apiV1ArticlesIdIdPricesGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesIdIdPricesGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdPricesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesIdIdPricesGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdPricesGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesIdIdPricesGet'
            );
        }


        $resourcePath = '/api/v1/articles/id/{id}/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesIdIdSupplierCustomerNumberGet
     *
     * Returns a list of article-suppliercustomernumbers with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdSupplierCustomerNumberGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]
     */
    public function apiV1ArticlesIdIdSupplierCustomerNumberGet($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdSupplierCustomerNumberGet'][0])
    {
        list($response) = $this->apiV1ArticlesIdIdSupplierCustomerNumberGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesIdIdSupplierCustomerNumberGetWithHttpInfo
     *
     * Returns a list of article-suppliercustomernumbers with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdSupplierCustomerNumberGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesIdIdSupplierCustomerNumberGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdSupplierCustomerNumberGet'][0])
    {
        $request = $this->apiV1ArticlesIdIdSupplierCustomerNumberGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesIdIdSupplierCustomerNumberGetAsync
     *
     * Returns a list of article-suppliercustomernumbers with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdSupplierCustomerNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdSupplierCustomerNumberGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdSupplierCustomerNumberGet'][0])
    {
        return $this->apiV1ArticlesIdIdSupplierCustomerNumberGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesIdIdSupplierCustomerNumberGetAsyncWithHttpInfo
     *
     * Returns a list of article-suppliercustomernumbers with this article id
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdSupplierCustomerNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesIdIdSupplierCustomerNumberGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdSupplierCustomerNumberGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]';
        $request = $this->apiV1ArticlesIdIdSupplierCustomerNumberGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesIdIdSupplierCustomerNumberGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesIdIdSupplierCustomerNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesIdIdSupplierCustomerNumberGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesIdIdSupplierCustomerNumberGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesIdIdSupplierCustomerNumberGet'
            );
        }


        $resourcePath = '/api/v1/articles/id/{id}/supplierCustomerNumber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesListGet
     *
     * Returns a list of articles with minimal data
     *
     * @param  string $id id (optional)
     * @param  string $code code (optional)
     * @param  string $model model (optional)
     * @param  string $searchText searchText (optional)
     * @param  bool $active active (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $additionalWhere additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\IdCodeDescription[]
     */
    public function apiV1ArticlesListGet($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesListGet'][0])
    {
        list($response) = $this->apiV1ArticlesListGetWithHttpInfo($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesListGetWithHttpInfo
     *
     * Returns a list of articles with minimal data
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\IdCodeDescription[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesListGetWithHttpInfo($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesListGet'][0])
    {
        $request = $this->apiV1ArticlesListGetRequest($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\IdCodeDescription[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\IdCodeDescription[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\IdCodeDescription[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\IdCodeDescription[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\IdCodeDescription[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesListGetAsync
     *
     * Returns a list of articles with minimal data
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesListGetAsync($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesListGet'][0])
    {
        return $this->apiV1ArticlesListGetAsyncWithHttpInfo($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesListGetAsyncWithHttpInfo
     *
     * Returns a list of articles with minimal data
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesListGetAsyncWithHttpInfo($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesListGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\IdCodeDescription[]';
        $request = $this->apiV1ArticlesListGetRequest($id, $code, $model, $searchText, $active, $skip, $take, $additionalWhere, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesListGet'
     *
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $model (optional)
     * @param  string $searchText (optional)
     * @param  bool $active (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $additionalWhere (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesListGetRequest($id = null, $code = null, $model = null, $searchText = null, $active = null, $skip = null, $take = null, $additionalWhere = null, string $contentType = self::contentTypes['apiV1ArticlesListGet'][0])
    {










        $resourcePath = '/api/v1/articles/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'Code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model,
            'Model', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchText,
            'SearchText', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active,
            'Active', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'Skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'Take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additionalWhere,
            'AdditionalWhere', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsDelete
     *
     * Delete an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDeleteCommand $articleMeasurementUnitDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiV1ArticlesMeasurementUnitsDelete($articleMeasurementUnitDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsDelete'][0])
    {
        list($response) = $this->apiV1ArticlesMeasurementUnitsDeleteWithHttpInfo($articleMeasurementUnitDeleteCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsDeleteWithHttpInfo
     *
     * Delete an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDeleteCommand $articleMeasurementUnitDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesMeasurementUnitsDeleteWithHttpInfo($articleMeasurementUnitDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsDelete'][0])
    {
        $request = $this->apiV1ArticlesMeasurementUnitsDeleteRequest($articleMeasurementUnitDeleteCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsDeleteAsync
     *
     * Delete an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDeleteCommand $articleMeasurementUnitDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesMeasurementUnitsDeleteAsync($articleMeasurementUnitDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsDelete'][0])
    {
        return $this->apiV1ArticlesMeasurementUnitsDeleteAsyncWithHttpInfo($articleMeasurementUnitDeleteCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsDeleteAsyncWithHttpInfo
     *
     * Delete an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDeleteCommand $articleMeasurementUnitDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesMeasurementUnitsDeleteAsyncWithHttpInfo($articleMeasurementUnitDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->apiV1ArticlesMeasurementUnitsDeleteRequest($articleMeasurementUnitDeleteCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesMeasurementUnitsDelete'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDeleteCommand $articleMeasurementUnitDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesMeasurementUnitsDeleteRequest($articleMeasurementUnitDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsDelete'][0])
    {



        $resourcePath = '/api/v1/articles/measurementUnits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleMeasurementUnitDeleteCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleMeasurementUnitDeleteCommand));
            } else {
                $httpBody = $articleMeasurementUnitDeleteCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsGet
     *
     * Returns a list of article-measurementunits
     *
     * @param  string $id id (optional)
     * @param  string $articleId articleId (optional)
     * @param  string $measurementUnitCode measurementUnitCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]
     */
    public function apiV1ArticlesMeasurementUnitsGet($id = null, $articleId = null, $measurementUnitCode = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsGet'][0])
    {
        list($response) = $this->apiV1ArticlesMeasurementUnitsGetWithHttpInfo($id, $articleId, $measurementUnitCode, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsGetWithHttpInfo
     *
     * Returns a list of article-measurementunits
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $measurementUnitCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesMeasurementUnitsGetWithHttpInfo($id = null, $articleId = null, $measurementUnitCode = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsGet'][0])
    {
        $request = $this->apiV1ArticlesMeasurementUnitsGetRequest($id, $articleId, $measurementUnitCode, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsGetAsync
     *
     * Returns a list of article-measurementunits
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $measurementUnitCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesMeasurementUnitsGetAsync($id = null, $articleId = null, $measurementUnitCode = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsGet'][0])
    {
        return $this->apiV1ArticlesMeasurementUnitsGetAsyncWithHttpInfo($id, $articleId, $measurementUnitCode, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsGetAsyncWithHttpInfo
     *
     * Returns a list of article-measurementunits
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $measurementUnitCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesMeasurementUnitsGetAsyncWithHttpInfo($id = null, $articleId = null, $measurementUnitCode = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto[]';
        $request = $this->apiV1ArticlesMeasurementUnitsGetRequest($id, $articleId, $measurementUnitCode, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesMeasurementUnitsGet'
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $measurementUnitCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesMeasurementUnitsGetRequest($id = null, $articleId = null, $measurementUnitCode = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsGet'][0])
    {





        $resourcePath = '/api/v1/articles/measurementUnits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $articleId,
            'ArticleId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $measurementUnitCode,
            'MeasurementUnitCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsIdIdGet
     *
     * Returns the article-measurementunit with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto
     */
    public function apiV1ArticlesMeasurementUnitsIdIdGet($id, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsIdIdGet'][0])
    {
        list($response) = $this->apiV1ArticlesMeasurementUnitsIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsIdIdGetWithHttpInfo
     *
     * Returns the article-measurementunit with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesMeasurementUnitsIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsIdIdGet'][0])
    {
        $request = $this->apiV1ArticlesMeasurementUnitsIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsIdIdGetAsync
     *
     * Returns the article-measurementunit with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesMeasurementUnitsIdIdGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsIdIdGet'][0])
    {
        return $this->apiV1ArticlesMeasurementUnitsIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsIdIdGetAsyncWithHttpInfo
     *
     * Returns the article-measurementunit with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesMeasurementUnitsIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsIdIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleMeasurementUnitDto';
        $request = $this->apiV1ArticlesMeasurementUnitsIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesMeasurementUnitsIdIdGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesMeasurementUnitsIdIdGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesMeasurementUnitsIdIdGet'
            );
        }


        $resourcePath = '/api/v1/articles/measurementUnits/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsPatch
     *
     * Update an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitPatchCommand $articleMeasurementUnitPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesMeasurementUnitsPatch($articleMeasurementUnitPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsPatch'][0])
    {
        list($response) = $this->apiV1ArticlesMeasurementUnitsPatchWithHttpInfo($articleMeasurementUnitPatchCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsPatchWithHttpInfo
     *
     * Update an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitPatchCommand $articleMeasurementUnitPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesMeasurementUnitsPatchWithHttpInfo($articleMeasurementUnitPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsPatch'][0])
    {
        $request = $this->apiV1ArticlesMeasurementUnitsPatchRequest($articleMeasurementUnitPatchCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsPatchAsync
     *
     * Update an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitPatchCommand $articleMeasurementUnitPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesMeasurementUnitsPatchAsync($articleMeasurementUnitPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsPatch'][0])
    {
        return $this->apiV1ArticlesMeasurementUnitsPatchAsyncWithHttpInfo($articleMeasurementUnitPatchCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsPatchAsyncWithHttpInfo
     *
     * Update an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitPatchCommand $articleMeasurementUnitPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesMeasurementUnitsPatchAsyncWithHttpInfo($articleMeasurementUnitPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsPatch'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesMeasurementUnitsPatchRequest($articleMeasurementUnitPatchCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesMeasurementUnitsPatch'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitPatchCommand $articleMeasurementUnitPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesMeasurementUnitsPatchRequest($articleMeasurementUnitPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsPatch'][0])
    {



        $resourcePath = '/api/v1/articles/measurementUnits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleMeasurementUnitPatchCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleMeasurementUnitPatchCommand));
            } else {
                $httpBody = $articleMeasurementUnitPatchCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsPost
     *
     * Creating an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitPostCommand $articleMeasurementUnitPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesMeasurementUnitsPost($articleMeasurementUnitPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsPost'][0])
    {
        list($response) = $this->apiV1ArticlesMeasurementUnitsPostWithHttpInfo($articleMeasurementUnitPostCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsPostWithHttpInfo
     *
     * Creating an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitPostCommand $articleMeasurementUnitPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesMeasurementUnitsPostWithHttpInfo($articleMeasurementUnitPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsPost'][0])
    {
        $request = $this->apiV1ArticlesMeasurementUnitsPostRequest($articleMeasurementUnitPostCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsPostAsync
     *
     * Creating an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitPostCommand $articleMeasurementUnitPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesMeasurementUnitsPostAsync($articleMeasurementUnitPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsPost'][0])
    {
        return $this->apiV1ArticlesMeasurementUnitsPostAsyncWithHttpInfo($articleMeasurementUnitPostCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesMeasurementUnitsPostAsyncWithHttpInfo
     *
     * Creating an article-measurementunit
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitPostCommand $articleMeasurementUnitPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesMeasurementUnitsPostAsyncWithHttpInfo($articleMeasurementUnitPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesMeasurementUnitsPostRequest($articleMeasurementUnitPostCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesMeasurementUnitsPost'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleMeasurementUnitPostCommand $articleMeasurementUnitPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesMeasurementUnitsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesMeasurementUnitsPostRequest($articleMeasurementUnitPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesMeasurementUnitsPost'][0])
    {



        $resourcePath = '/api/v1/articles/measurementUnits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleMeasurementUnitPostCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleMeasurementUnitPostCommand));
            } else {
                $httpBody = $articleMeasurementUnitPostCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesPatch
     *
     * Updating an article
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticlePatchCommand $articlePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesPatch($articlePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesPatch'][0])
    {
        list($response) = $this->apiV1ArticlesPatchWithHttpInfo($articlePatchCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesPatchWithHttpInfo
     *
     * Updating an article
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticlePatchCommand $articlePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesPatchWithHttpInfo($articlePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesPatch'][0])
    {
        $request = $this->apiV1ArticlesPatchRequest($articlePatchCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesPatchAsync
     *
     * Updating an article
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticlePatchCommand $articlePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesPatchAsync($articlePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesPatch'][0])
    {
        return $this->apiV1ArticlesPatchAsyncWithHttpInfo($articlePatchCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesPatchAsyncWithHttpInfo
     *
     * Updating an article
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticlePatchCommand $articlePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesPatchAsyncWithHttpInfo($articlePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesPatch'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesPatchRequest($articlePatchCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesPatch'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticlePatchCommand $articlePatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesPatchRequest($articlePatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesPatch'][0])
    {



        $resourcePath = '/api/v1/articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articlePatchCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articlePatchCommand));
            } else {
                $httpBody = $articlePatchCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesPost
     *
     * Creating an article
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticlePostCommand $articlePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesPost($articlePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesPost'][0])
    {
        list($response) = $this->apiV1ArticlesPostWithHttpInfo($articlePostCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesPostWithHttpInfo
     *
     * Creating an article
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticlePostCommand $articlePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesPostWithHttpInfo($articlePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesPost'][0])
    {
        $request = $this->apiV1ArticlesPostRequest($articlePostCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesPostAsync
     *
     * Creating an article
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticlePostCommand $articlePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesPostAsync($articlePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesPost'][0])
    {
        return $this->apiV1ArticlesPostAsyncWithHttpInfo($articlePostCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesPostAsyncWithHttpInfo
     *
     * Creating an article
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticlePostCommand $articlePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesPostAsyncWithHttpInfo($articlePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesPostRequest($articlePostCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesPost'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticlePostCommand $articlePostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesPostRequest($articlePostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesPost'][0])
    {



        $resourcePath = '/api/v1/articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articlePostCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articlePostCommand));
            } else {
                $httpBody = $articlePostCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesQuantitiesGet
     *
     * Returns a list of article-quantities
     *
     * @param  string $articleId articleId (optional)
     * @param  string $depositId depositId (optional)
     * @param  string $stockPositionId stockPositionId (optional)
     * @param  ArticleQuantityType $articleQuantityType articleQuantityType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesQuantitiesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleQuantityDto[]
     */
    public function apiV1ArticlesQuantitiesGet($articleId = null, $depositId = null, $stockPositionId = null, $articleQuantityType = null, string $contentType = self::contentTypes['apiV1ArticlesQuantitiesGet'][0])
    {
        list($response) = $this->apiV1ArticlesQuantitiesGetWithHttpInfo($articleId, $depositId, $stockPositionId, $articleQuantityType, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesQuantitiesGetWithHttpInfo
     *
     * Returns a list of article-quantities
     *
     * @param  string $articleId (optional)
     * @param  string $depositId (optional)
     * @param  string $stockPositionId (optional)
     * @param  ArticleQuantityType $articleQuantityType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesQuantitiesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleQuantityDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesQuantitiesGetWithHttpInfo($articleId = null, $depositId = null, $stockPositionId = null, $articleQuantityType = null, string $contentType = self::contentTypes['apiV1ArticlesQuantitiesGet'][0])
    {
        $request = $this->apiV1ArticlesQuantitiesGetRequest($articleId, $depositId, $stockPositionId, $articleQuantityType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleQuantityDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleQuantityDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleQuantityDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleQuantityDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleQuantityDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesQuantitiesGetAsync
     *
     * Returns a list of article-quantities
     *
     * @param  string $articleId (optional)
     * @param  string $depositId (optional)
     * @param  string $stockPositionId (optional)
     * @param  ArticleQuantityType $articleQuantityType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesQuantitiesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesQuantitiesGetAsync($articleId = null, $depositId = null, $stockPositionId = null, $articleQuantityType = null, string $contentType = self::contentTypes['apiV1ArticlesQuantitiesGet'][0])
    {
        return $this->apiV1ArticlesQuantitiesGetAsyncWithHttpInfo($articleId, $depositId, $stockPositionId, $articleQuantityType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesQuantitiesGetAsyncWithHttpInfo
     *
     * Returns a list of article-quantities
     *
     * @param  string $articleId (optional)
     * @param  string $depositId (optional)
     * @param  string $stockPositionId (optional)
     * @param  ArticleQuantityType $articleQuantityType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesQuantitiesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesQuantitiesGetAsyncWithHttpInfo($articleId = null, $depositId = null, $stockPositionId = null, $articleQuantityType = null, string $contentType = self::contentTypes['apiV1ArticlesQuantitiesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleQuantityDto[]';
        $request = $this->apiV1ArticlesQuantitiesGetRequest($articleId, $depositId, $stockPositionId, $articleQuantityType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesQuantitiesGet'
     *
     * @param  string $articleId (optional)
     * @param  string $depositId (optional)
     * @param  string $stockPositionId (optional)
     * @param  ArticleQuantityType $articleQuantityType (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesQuantitiesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesQuantitiesGetRequest($articleId = null, $depositId = null, $stockPositionId = null, $articleQuantityType = null, string $contentType = self::contentTypes['apiV1ArticlesQuantitiesGet'][0])
    {






        $resourcePath = '/api/v1/articles/quantities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $articleId,
            'ArticleId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $depositId,
            'DepositId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stockPositionId,
            'StockPositionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $articleQuantityType,
            'ArticleQuantityType', // param base name
            'ArticleQuantityType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersDelete
     *
     * Delete an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDeleteCommand $articleSupplierCustomerNumberDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiV1ArticlesSupplierCustomerNumbersDelete($articleSupplierCustomerNumberDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersDelete'][0])
    {
        list($response) = $this->apiV1ArticlesSupplierCustomerNumbersDeleteWithHttpInfo($articleSupplierCustomerNumberDeleteCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersDeleteWithHttpInfo
     *
     * Delete an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDeleteCommand $articleSupplierCustomerNumberDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesSupplierCustomerNumbersDeleteWithHttpInfo($articleSupplierCustomerNumberDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersDelete'][0])
    {
        $request = $this->apiV1ArticlesSupplierCustomerNumbersDeleteRequest($articleSupplierCustomerNumberDeleteCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersDeleteAsync
     *
     * Delete an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDeleteCommand $articleSupplierCustomerNumberDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesSupplierCustomerNumbersDeleteAsync($articleSupplierCustomerNumberDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersDelete'][0])
    {
        return $this->apiV1ArticlesSupplierCustomerNumbersDeleteAsyncWithHttpInfo($articleSupplierCustomerNumberDeleteCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersDeleteAsyncWithHttpInfo
     *
     * Delete an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDeleteCommand $articleSupplierCustomerNumberDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesSupplierCustomerNumbersDeleteAsyncWithHttpInfo($articleSupplierCustomerNumberDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->apiV1ArticlesSupplierCustomerNumbersDeleteRequest($articleSupplierCustomerNumberDeleteCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesSupplierCustomerNumbersDelete'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDeleteCommand $articleSupplierCustomerNumberDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesSupplierCustomerNumbersDeleteRequest($articleSupplierCustomerNumberDeleteCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersDelete'][0])
    {



        $resourcePath = '/api/v1/articles/supplierCustomerNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleSupplierCustomerNumberDeleteCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleSupplierCustomerNumberDeleteCommand));
            } else {
                $httpBody = $articleSupplierCustomerNumberDeleteCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersGet
     *
     * Returns a list of article-suppliercustomernumber
     *
     * @param  string $id id (optional)
     * @param  string $articleId articleId (optional)
     * @param  string $supplierId supplierId (optional)
     * @param  string $customerId customerId (optional)
     * @param  string $code code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]
     */
    public function apiV1ArticlesSupplierCustomerNumbersGet($id = null, $articleId = null, $supplierId = null, $customerId = null, $code = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersGet'][0])
    {
        list($response) = $this->apiV1ArticlesSupplierCustomerNumbersGetWithHttpInfo($id, $articleId, $supplierId, $customerId, $code, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersGetWithHttpInfo
     *
     * Returns a list of article-suppliercustomernumber
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $supplierId (optional)
     * @param  string $customerId (optional)
     * @param  string $code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesSupplierCustomerNumbersGetWithHttpInfo($id = null, $articleId = null, $supplierId = null, $customerId = null, $code = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersGet'][0])
    {
        $request = $this->apiV1ArticlesSupplierCustomerNumbersGetRequest($id, $articleId, $supplierId, $customerId, $code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersGetAsync
     *
     * Returns a list of article-suppliercustomernumber
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $supplierId (optional)
     * @param  string $customerId (optional)
     * @param  string $code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesSupplierCustomerNumbersGetAsync($id = null, $articleId = null, $supplierId = null, $customerId = null, $code = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersGet'][0])
    {
        return $this->apiV1ArticlesSupplierCustomerNumbersGetAsyncWithHttpInfo($id, $articleId, $supplierId, $customerId, $code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersGetAsyncWithHttpInfo
     *
     * Returns a list of article-suppliercustomernumber
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $supplierId (optional)
     * @param  string $customerId (optional)
     * @param  string $code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesSupplierCustomerNumbersGetAsyncWithHttpInfo($id = null, $articleId = null, $supplierId = null, $customerId = null, $code = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto[]';
        $request = $this->apiV1ArticlesSupplierCustomerNumbersGetRequest($id, $articleId, $supplierId, $customerId, $code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesSupplierCustomerNumbersGet'
     *
     * @param  string $id (optional)
     * @param  string $articleId (optional)
     * @param  string $supplierId (optional)
     * @param  string $customerId (optional)
     * @param  string $code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesSupplierCustomerNumbersGetRequest($id = null, $articleId = null, $supplierId = null, $customerId = null, $code = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersGet'][0])
    {







        $resourcePath = '/api/v1/articles/supplierCustomerNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $articleId,
            'ArticleId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supplierId,
            'SupplierId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customerId,
            'CustomerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'Code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersIdIdGet
     *
     * Returns the article-suppliercustomernumber with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto
     */
    public function apiV1ArticlesSupplierCustomerNumbersIdIdGet($id, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersIdIdGet'][0])
    {
        list($response) = $this->apiV1ArticlesSupplierCustomerNumbersIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersIdIdGetWithHttpInfo
     *
     * Returns the article-suppliercustomernumber with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesSupplierCustomerNumbersIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersIdIdGet'][0])
    {
        $request = $this->apiV1ArticlesSupplierCustomerNumbersIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersIdIdGetAsync
     *
     * Returns the article-suppliercustomernumber with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesSupplierCustomerNumbersIdIdGetAsync($id, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersIdIdGet'][0])
    {
        return $this->apiV1ArticlesSupplierCustomerNumbersIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersIdIdGetAsyncWithHttpInfo
     *
     * Returns the article-suppliercustomernumber with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesSupplierCustomerNumbersIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersIdIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberDto';
        $request = $this->apiV1ArticlesSupplierCustomerNumbersIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesSupplierCustomerNumbersIdIdGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesSupplierCustomerNumbersIdIdGetRequest($id, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1ArticlesSupplierCustomerNumbersIdIdGet'
            );
        }


        $resourcePath = '/api/v1/articles/supplierCustomerNumbers/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersPatch
     *
     * Update an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberPatchCommand $articleSupplierCustomerNumberPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesSupplierCustomerNumbersPatch($articleSupplierCustomerNumberPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPatch'][0])
    {
        list($response) = $this->apiV1ArticlesSupplierCustomerNumbersPatchWithHttpInfo($articleSupplierCustomerNumberPatchCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersPatchWithHttpInfo
     *
     * Update an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberPatchCommand $articleSupplierCustomerNumberPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesSupplierCustomerNumbersPatchWithHttpInfo($articleSupplierCustomerNumberPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPatch'][0])
    {
        $request = $this->apiV1ArticlesSupplierCustomerNumbersPatchRequest($articleSupplierCustomerNumberPatchCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersPatchAsync
     *
     * Update an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberPatchCommand $articleSupplierCustomerNumberPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesSupplierCustomerNumbersPatchAsync($articleSupplierCustomerNumberPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPatch'][0])
    {
        return $this->apiV1ArticlesSupplierCustomerNumbersPatchAsyncWithHttpInfo($articleSupplierCustomerNumberPatchCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersPatchAsyncWithHttpInfo
     *
     * Update an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberPatchCommand $articleSupplierCustomerNumberPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesSupplierCustomerNumbersPatchAsyncWithHttpInfo($articleSupplierCustomerNumberPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPatch'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesSupplierCustomerNumbersPatchRequest($articleSupplierCustomerNumberPatchCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesSupplierCustomerNumbersPatch'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberPatchCommand $articleSupplierCustomerNumberPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesSupplierCustomerNumbersPatchRequest($articleSupplierCustomerNumberPatchCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPatch'][0])
    {



        $resourcePath = '/api/v1/articles/supplierCustomerNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleSupplierCustomerNumberPatchCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleSupplierCustomerNumberPatchCommand));
            } else {
                $httpBody = $articleSupplierCustomerNumberPatchCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersPost
     *
     * Creating an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberPostCommand $articleSupplierCustomerNumberPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1ArticlesSupplierCustomerNumbersPost($articleSupplierCustomerNumberPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPost'][0])
    {
        list($response) = $this->apiV1ArticlesSupplierCustomerNumbersPostWithHttpInfo($articleSupplierCustomerNumberPostCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersPostWithHttpInfo
     *
     * Creating an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberPostCommand $articleSupplierCustomerNumberPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1ArticlesSupplierCustomerNumbersPostWithHttpInfo($articleSupplierCustomerNumberPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPost'][0])
    {
        $request = $this->apiV1ArticlesSupplierCustomerNumbersPostRequest($articleSupplierCustomerNumberPostCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersPostAsync
     *
     * Creating an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberPostCommand $articleSupplierCustomerNumberPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesSupplierCustomerNumbersPostAsync($articleSupplierCustomerNumberPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPost'][0])
    {
        return $this->apiV1ArticlesSupplierCustomerNumbersPostAsyncWithHttpInfo($articleSupplierCustomerNumberPostCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1ArticlesSupplierCustomerNumbersPostAsyncWithHttpInfo
     *
     * Creating an article-suppliercustomernumber
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberPostCommand $articleSupplierCustomerNumberPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1ArticlesSupplierCustomerNumbersPostAsyncWithHttpInfo($articleSupplierCustomerNumberPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1ArticlesSupplierCustomerNumbersPostRequest($articleSupplierCustomerNumberPostCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1ArticlesSupplierCustomerNumbersPost'
     *
     * @param  \OpenAPI\Client\Radix\Model\ArticleSupplierCustomerNumberPostCommand $articleSupplierCustomerNumberPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1ArticlesSupplierCustomerNumbersPostRequest($articleSupplierCustomerNumberPostCommand = null, string $contentType = self::contentTypes['apiV1ArticlesSupplierCustomerNumbersPost'][0])
    {



        $resourcePath = '/api/v1/articles/supplierCustomerNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($articleSupplierCustomerNumberPostCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($articleSupplierCustomerNumberPostCommand));
            } else {
                $httpBody = $articleSupplierCustomerNumberPostCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
