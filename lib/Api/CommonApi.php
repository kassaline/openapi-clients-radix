<?php
/**
 * CommonApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Radix\ApiException;
use OpenAPI\Client\Radix\Configuration;
use OpenAPI\Client\Radix\HeaderSelector;
use OpenAPI\Client\Radix\ObjectSerializer;

/**
 * CommonApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommonApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV1CommonClassificationDefinitionGet' => [
            'application/json',
        ],
        'apiV1CommonClassificationDefinitionValueGet' => [
            'application/json',
        ],
        'apiV1CommonClassificationsGet' => [
            'application/json',
        ],
        'apiV1CommonClassificationsPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1CommonClassificationsPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1CommonMessagesGet' => [
            'application/json',
        ],
        'apiV1CommonTipDelete' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1CommonTipPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1CommonTipPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1CommonTipsGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV1CommonClassificationDefinitionGet
     *
     * Returns the classificationdefinitions
     *
     * @param  ClassificationFkType $type type (optional)
     * @param  string $id id (optional)
     * @param  string $code code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationDefinitionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ClassificationDefinitionDto[]
     */
    public function apiV1CommonClassificationDefinitionGet($type = null, $id = null, $code = null, string $contentType = self::contentTypes['apiV1CommonClassificationDefinitionGet'][0])
    {
        list($response) = $this->apiV1CommonClassificationDefinitionGetWithHttpInfo($type, $id, $code, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CommonClassificationDefinitionGetWithHttpInfo
     *
     * Returns the classificationdefinitions
     *
     * @param  ClassificationFkType $type (optional)
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationDefinitionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ClassificationDefinitionDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CommonClassificationDefinitionGetWithHttpInfo($type = null, $id = null, $code = null, string $contentType = self::contentTypes['apiV1CommonClassificationDefinitionGet'][0])
    {
        $request = $this->apiV1CommonClassificationDefinitionGetRequest($type, $id, $code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ClassificationDefinitionDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ClassificationDefinitionDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ClassificationDefinitionDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ClassificationDefinitionDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ClassificationDefinitionDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CommonClassificationDefinitionGetAsync
     *
     * Returns the classificationdefinitions
     *
     * @param  ClassificationFkType $type (optional)
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationDefinitionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonClassificationDefinitionGetAsync($type = null, $id = null, $code = null, string $contentType = self::contentTypes['apiV1CommonClassificationDefinitionGet'][0])
    {
        return $this->apiV1CommonClassificationDefinitionGetAsyncWithHttpInfo($type, $id, $code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CommonClassificationDefinitionGetAsyncWithHttpInfo
     *
     * Returns the classificationdefinitions
     *
     * @param  ClassificationFkType $type (optional)
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationDefinitionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonClassificationDefinitionGetAsyncWithHttpInfo($type = null, $id = null, $code = null, string $contentType = self::contentTypes['apiV1CommonClassificationDefinitionGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ClassificationDefinitionDto[]';
        $request = $this->apiV1CommonClassificationDefinitionGetRequest($type, $id, $code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CommonClassificationDefinitionGet'
     *
     * @param  ClassificationFkType $type (optional)
     * @param  string $id (optional)
     * @param  string $code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationDefinitionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CommonClassificationDefinitionGetRequest($type = null, $id = null, $code = null, string $contentType = self::contentTypes['apiV1CommonClassificationDefinitionGet'][0])
    {





        $resourcePath = '/api/v1/common/classificationDefinition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'Type', // param base name
            'ClassificationFkType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'Code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CommonClassificationDefinitionValueGet
     *
     * Returns the values of classificationdefinitions
     *
     * @param  string $classificationDefinitionId classificationDefinitionId (optional)
     * @param  bool $inactive inactive (optional)
     * @param  string[] $fkIds fkIds (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationDefinitionValueGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ClassificationDefinitionValueDto[]
     */
    public function apiV1CommonClassificationDefinitionValueGet($classificationDefinitionId = null, $inactive = null, $fkIds = null, string $contentType = self::contentTypes['apiV1CommonClassificationDefinitionValueGet'][0])
    {
        list($response) = $this->apiV1CommonClassificationDefinitionValueGetWithHttpInfo($classificationDefinitionId, $inactive, $fkIds, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CommonClassificationDefinitionValueGetWithHttpInfo
     *
     * Returns the values of classificationdefinitions
     *
     * @param  string $classificationDefinitionId (optional)
     * @param  bool $inactive (optional)
     * @param  string[] $fkIds (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationDefinitionValueGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ClassificationDefinitionValueDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CommonClassificationDefinitionValueGetWithHttpInfo($classificationDefinitionId = null, $inactive = null, $fkIds = null, string $contentType = self::contentTypes['apiV1CommonClassificationDefinitionValueGet'][0])
    {
        $request = $this->apiV1CommonClassificationDefinitionValueGetRequest($classificationDefinitionId, $inactive, $fkIds, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ClassificationDefinitionValueDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ClassificationDefinitionValueDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ClassificationDefinitionValueDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ClassificationDefinitionValueDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ClassificationDefinitionValueDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CommonClassificationDefinitionValueGetAsync
     *
     * Returns the values of classificationdefinitions
     *
     * @param  string $classificationDefinitionId (optional)
     * @param  bool $inactive (optional)
     * @param  string[] $fkIds (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationDefinitionValueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonClassificationDefinitionValueGetAsync($classificationDefinitionId = null, $inactive = null, $fkIds = null, string $contentType = self::contentTypes['apiV1CommonClassificationDefinitionValueGet'][0])
    {
        return $this->apiV1CommonClassificationDefinitionValueGetAsyncWithHttpInfo($classificationDefinitionId, $inactive, $fkIds, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CommonClassificationDefinitionValueGetAsyncWithHttpInfo
     *
     * Returns the values of classificationdefinitions
     *
     * @param  string $classificationDefinitionId (optional)
     * @param  bool $inactive (optional)
     * @param  string[] $fkIds (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationDefinitionValueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonClassificationDefinitionValueGetAsyncWithHttpInfo($classificationDefinitionId = null, $inactive = null, $fkIds = null, string $contentType = self::contentTypes['apiV1CommonClassificationDefinitionValueGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ClassificationDefinitionValueDto[]';
        $request = $this->apiV1CommonClassificationDefinitionValueGetRequest($classificationDefinitionId, $inactive, $fkIds, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CommonClassificationDefinitionValueGet'
     *
     * @param  string $classificationDefinitionId (optional)
     * @param  bool $inactive (optional)
     * @param  string[] $fkIds (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationDefinitionValueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CommonClassificationDefinitionValueGetRequest($classificationDefinitionId = null, $inactive = null, $fkIds = null, string $contentType = self::contentTypes['apiV1CommonClassificationDefinitionValueGet'][0])
    {





        $resourcePath = '/api/v1/common/classificationDefinitionValue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $classificationDefinitionId,
            'ClassificationDefinitionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inactive,
            'Inactive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fkIds,
            'FkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CommonClassificationsGet
     *
     * Returns the classifications
     *
     * @param  ClassificationFkType $type type (optional)
     * @param  string $fkId fkId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\ClassificationsDto
     */
    public function apiV1CommonClassificationsGet($type = null, $fkId = null, string $contentType = self::contentTypes['apiV1CommonClassificationsGet'][0])
    {
        list($response) = $this->apiV1CommonClassificationsGetWithHttpInfo($type, $fkId, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CommonClassificationsGetWithHttpInfo
     *
     * Returns the classifications
     *
     * @param  ClassificationFkType $type (optional)
     * @param  string $fkId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\ClassificationsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CommonClassificationsGetWithHttpInfo($type = null, $fkId = null, string $contentType = self::contentTypes['apiV1CommonClassificationsGet'][0])
    {
        $request = $this->apiV1CommonClassificationsGetRequest($type, $fkId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\ClassificationsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\ClassificationsDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\ClassificationsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\ClassificationsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\ClassificationsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CommonClassificationsGetAsync
     *
     * Returns the classifications
     *
     * @param  ClassificationFkType $type (optional)
     * @param  string $fkId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonClassificationsGetAsync($type = null, $fkId = null, string $contentType = self::contentTypes['apiV1CommonClassificationsGet'][0])
    {
        return $this->apiV1CommonClassificationsGetAsyncWithHttpInfo($type, $fkId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CommonClassificationsGetAsyncWithHttpInfo
     *
     * Returns the classifications
     *
     * @param  ClassificationFkType $type (optional)
     * @param  string $fkId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonClassificationsGetAsyncWithHttpInfo($type = null, $fkId = null, string $contentType = self::contentTypes['apiV1CommonClassificationsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\ClassificationsDto';
        $request = $this->apiV1CommonClassificationsGetRequest($type, $fkId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CommonClassificationsGet'
     *
     * @param  ClassificationFkType $type (optional)
     * @param  string $fkId (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CommonClassificationsGetRequest($type = null, $fkId = null, string $contentType = self::contentTypes['apiV1CommonClassificationsGet'][0])
    {




        $resourcePath = '/api/v1/common/classifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'Type', // param base name
            'ClassificationFkType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fkId,
            'FkId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CommonClassificationsPatch
     *
     * Update a list of classifications
     *
     * @param  \OpenAPI\Client\Radix\Model\ClassificationsPatchCommand $classificationsPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiV1CommonClassificationsPatch($classificationsPatchCommand = null, string $contentType = self::contentTypes['apiV1CommonClassificationsPatch'][0])
    {
        list($response) = $this->apiV1CommonClassificationsPatchWithHttpInfo($classificationsPatchCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CommonClassificationsPatchWithHttpInfo
     *
     * Update a list of classifications
     *
     * @param  \OpenAPI\Client\Radix\Model\ClassificationsPatchCommand $classificationsPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CommonClassificationsPatchWithHttpInfo($classificationsPatchCommand = null, string $contentType = self::contentTypes['apiV1CommonClassificationsPatch'][0])
    {
        $request = $this->apiV1CommonClassificationsPatchRequest($classificationsPatchCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CommonClassificationsPatchAsync
     *
     * Update a list of classifications
     *
     * @param  \OpenAPI\Client\Radix\Model\ClassificationsPatchCommand $classificationsPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonClassificationsPatchAsync($classificationsPatchCommand = null, string $contentType = self::contentTypes['apiV1CommonClassificationsPatch'][0])
    {
        return $this->apiV1CommonClassificationsPatchAsyncWithHttpInfo($classificationsPatchCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CommonClassificationsPatchAsyncWithHttpInfo
     *
     * Update a list of classifications
     *
     * @param  \OpenAPI\Client\Radix\Model\ClassificationsPatchCommand $classificationsPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonClassificationsPatchAsyncWithHttpInfo($classificationsPatchCommand = null, string $contentType = self::contentTypes['apiV1CommonClassificationsPatch'][0])
    {
        $returnType = 'bool';
        $request = $this->apiV1CommonClassificationsPatchRequest($classificationsPatchCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CommonClassificationsPatch'
     *
     * @param  \OpenAPI\Client\Radix\Model\ClassificationsPatchCommand $classificationsPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CommonClassificationsPatchRequest($classificationsPatchCommand = null, string $contentType = self::contentTypes['apiV1CommonClassificationsPatch'][0])
    {



        $resourcePath = '/api/v1/common/classifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($classificationsPatchCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($classificationsPatchCommand));
            } else {
                $httpBody = $classificationsPatchCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CommonClassificationsPost
     *
     * Creating a list of classifications
     *
     * @param  \OpenAPI\Client\Radix\Model\ClassificationsPostCommand $classificationsPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiV1CommonClassificationsPost($classificationsPostCommand = null, string $contentType = self::contentTypes['apiV1CommonClassificationsPost'][0])
    {
        list($response) = $this->apiV1CommonClassificationsPostWithHttpInfo($classificationsPostCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CommonClassificationsPostWithHttpInfo
     *
     * Creating a list of classifications
     *
     * @param  \OpenAPI\Client\Radix\Model\ClassificationsPostCommand $classificationsPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CommonClassificationsPostWithHttpInfo($classificationsPostCommand = null, string $contentType = self::contentTypes['apiV1CommonClassificationsPost'][0])
    {
        $request = $this->apiV1CommonClassificationsPostRequest($classificationsPostCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CommonClassificationsPostAsync
     *
     * Creating a list of classifications
     *
     * @param  \OpenAPI\Client\Radix\Model\ClassificationsPostCommand $classificationsPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonClassificationsPostAsync($classificationsPostCommand = null, string $contentType = self::contentTypes['apiV1CommonClassificationsPost'][0])
    {
        return $this->apiV1CommonClassificationsPostAsyncWithHttpInfo($classificationsPostCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CommonClassificationsPostAsyncWithHttpInfo
     *
     * Creating a list of classifications
     *
     * @param  \OpenAPI\Client\Radix\Model\ClassificationsPostCommand $classificationsPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonClassificationsPostAsyncWithHttpInfo($classificationsPostCommand = null, string $contentType = self::contentTypes['apiV1CommonClassificationsPost'][0])
    {
        $returnType = 'bool';
        $request = $this->apiV1CommonClassificationsPostRequest($classificationsPostCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CommonClassificationsPost'
     *
     * @param  \OpenAPI\Client\Radix\Model\ClassificationsPostCommand $classificationsPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonClassificationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CommonClassificationsPostRequest($classificationsPostCommand = null, string $contentType = self::contentTypes['apiV1CommonClassificationsPost'][0])
    {



        $resourcePath = '/api/v1/common/classifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($classificationsPostCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($classificationsPostCommand));
            } else {
                $httpBody = $classificationsPostCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CommonMessagesGet
     *
     * Returns the messages
     *
     * @param  string $userId userId (optional)
     * @param  bool $read read (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonMessagesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\MessageDto[]
     */
    public function apiV1CommonMessagesGet($userId = null, $read = null, string $contentType = self::contentTypes['apiV1CommonMessagesGet'][0])
    {
        list($response) = $this->apiV1CommonMessagesGetWithHttpInfo($userId, $read, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CommonMessagesGetWithHttpInfo
     *
     * Returns the messages
     *
     * @param  string $userId (optional)
     * @param  bool $read (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonMessagesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\MessageDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CommonMessagesGetWithHttpInfo($userId = null, $read = null, string $contentType = self::contentTypes['apiV1CommonMessagesGet'][0])
    {
        $request = $this->apiV1CommonMessagesGetRequest($userId, $read, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\MessageDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\MessageDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\MessageDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\MessageDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\MessageDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CommonMessagesGetAsync
     *
     * Returns the messages
     *
     * @param  string $userId (optional)
     * @param  bool $read (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonMessagesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonMessagesGetAsync($userId = null, $read = null, string $contentType = self::contentTypes['apiV1CommonMessagesGet'][0])
    {
        return $this->apiV1CommonMessagesGetAsyncWithHttpInfo($userId, $read, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CommonMessagesGetAsyncWithHttpInfo
     *
     * Returns the messages
     *
     * @param  string $userId (optional)
     * @param  bool $read (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonMessagesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonMessagesGetAsyncWithHttpInfo($userId = null, $read = null, string $contentType = self::contentTypes['apiV1CommonMessagesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\MessageDto[]';
        $request = $this->apiV1CommonMessagesGetRequest($userId, $read, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CommonMessagesGet'
     *
     * @param  string $userId (optional)
     * @param  bool $read (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonMessagesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CommonMessagesGetRequest($userId = null, $read = null, string $contentType = self::contentTypes['apiV1CommonMessagesGet'][0])
    {




        $resourcePath = '/api/v1/common/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $userId,
            'UserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $read,
            'Read', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CommonTipDelete
     *
     * delete a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipDeleteCommand $tipDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiV1CommonTipDelete($tipDeleteCommand = null, string $contentType = self::contentTypes['apiV1CommonTipDelete'][0])
    {
        list($response) = $this->apiV1CommonTipDeleteWithHttpInfo($tipDeleteCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CommonTipDeleteWithHttpInfo
     *
     * delete a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipDeleteCommand $tipDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CommonTipDeleteWithHttpInfo($tipDeleteCommand = null, string $contentType = self::contentTypes['apiV1CommonTipDelete'][0])
    {
        $request = $this->apiV1CommonTipDeleteRequest($tipDeleteCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CommonTipDeleteAsync
     *
     * delete a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipDeleteCommand $tipDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonTipDeleteAsync($tipDeleteCommand = null, string $contentType = self::contentTypes['apiV1CommonTipDelete'][0])
    {
        return $this->apiV1CommonTipDeleteAsyncWithHttpInfo($tipDeleteCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CommonTipDeleteAsyncWithHttpInfo
     *
     * delete a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipDeleteCommand $tipDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonTipDeleteAsyncWithHttpInfo($tipDeleteCommand = null, string $contentType = self::contentTypes['apiV1CommonTipDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->apiV1CommonTipDeleteRequest($tipDeleteCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CommonTipDelete'
     *
     * @param  \OpenAPI\Client\Radix\Model\TipDeleteCommand $tipDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CommonTipDeleteRequest($tipDeleteCommand = null, string $contentType = self::contentTypes['apiV1CommonTipDelete'][0])
    {



        $resourcePath = '/api/v1/common/tip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tipDeleteCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tipDeleteCommand));
            } else {
                $httpBody = $tipDeleteCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CommonTipPatch
     *
     * update a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipPatchCommand $tipPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1CommonTipPatch($tipPatchCommand = null, string $contentType = self::contentTypes['apiV1CommonTipPatch'][0])
    {
        list($response) = $this->apiV1CommonTipPatchWithHttpInfo($tipPatchCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CommonTipPatchWithHttpInfo
     *
     * update a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipPatchCommand $tipPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CommonTipPatchWithHttpInfo($tipPatchCommand = null, string $contentType = self::contentTypes['apiV1CommonTipPatch'][0])
    {
        $request = $this->apiV1CommonTipPatchRequest($tipPatchCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CommonTipPatchAsync
     *
     * update a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipPatchCommand $tipPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonTipPatchAsync($tipPatchCommand = null, string $contentType = self::contentTypes['apiV1CommonTipPatch'][0])
    {
        return $this->apiV1CommonTipPatchAsyncWithHttpInfo($tipPatchCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CommonTipPatchAsyncWithHttpInfo
     *
     * update a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipPatchCommand $tipPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonTipPatchAsyncWithHttpInfo($tipPatchCommand = null, string $contentType = self::contentTypes['apiV1CommonTipPatch'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1CommonTipPatchRequest($tipPatchCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CommonTipPatch'
     *
     * @param  \OpenAPI\Client\Radix\Model\TipPatchCommand $tipPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CommonTipPatchRequest($tipPatchCommand = null, string $contentType = self::contentTypes['apiV1CommonTipPatch'][0])
    {



        $resourcePath = '/api/v1/common/tip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tipPatchCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tipPatchCommand));
            } else {
                $httpBody = $tipPatchCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CommonTipPost
     *
     * Creating a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipPostCommand $tipPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1CommonTipPost($tipPostCommand = null, string $contentType = self::contentTypes['apiV1CommonTipPost'][0])
    {
        list($response) = $this->apiV1CommonTipPostWithHttpInfo($tipPostCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CommonTipPostWithHttpInfo
     *
     * Creating a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipPostCommand $tipPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CommonTipPostWithHttpInfo($tipPostCommand = null, string $contentType = self::contentTypes['apiV1CommonTipPost'][0])
    {
        $request = $this->apiV1CommonTipPostRequest($tipPostCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CommonTipPostAsync
     *
     * Creating a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipPostCommand $tipPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonTipPostAsync($tipPostCommand = null, string $contentType = self::contentTypes['apiV1CommonTipPost'][0])
    {
        return $this->apiV1CommonTipPostAsyncWithHttpInfo($tipPostCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CommonTipPostAsyncWithHttpInfo
     *
     * Creating a tip
     *
     * @param  \OpenAPI\Client\Radix\Model\TipPostCommand $tipPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonTipPostAsyncWithHttpInfo($tipPostCommand = null, string $contentType = self::contentTypes['apiV1CommonTipPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1CommonTipPostRequest($tipPostCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CommonTipPost'
     *
     * @param  \OpenAPI\Client\Radix\Model\TipPostCommand $tipPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CommonTipPostRequest($tipPostCommand = null, string $contentType = self::contentTypes['apiV1CommonTipPost'][0])
    {



        $resourcePath = '/api/v1/common/tip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tipPostCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tipPostCommand));
            } else {
                $httpBody = $tipPostCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CommonTipsGet
     *
     * Returns the tips
     *
     * @param  string $id id (optional)
     * @param  TipType $type type (optional)
     * @param  string $masterId masterId (optional)
     * @param  int $position position (optional)
     * @param  bool $displayed displayed (optional)
     * @param  bool $printing printing (optional)
     * @param  bool $onlyInRadix onlyInRadix (optional)
     * @param  bool $offer offer (optional)
     * @param  bool $order order (optional)
     * @param  bool $packinglist packinglist (optional)
     * @param  bool $billing billing (optional)
     * @param  bool $accounting accounting (optional)
     * @param  bool $purchaseOrder purchaseOrder (optional)
     * @param  bool $purchasing purchasing (optional)
     * @param  bool $warehouse warehouse (optional)
     * @param  bool $production production (optional)
     * @param  bool $workOrder workOrder (optional)
     * @param  bool $tourPlanning tourPlanning (optional)
     * @param  bool $servicemanagement servicemanagement (optional)
     * @param  bool $info info (optional)
     * @param  bool $web web (optional)
     * @param  bool $salesDeliveryNote salesDeliveryNote (optional)
     * @param  bool $salesInvoice salesInvoice (optional)
     * @param  bool $cashDocuments cashDocuments (optional)
     * @param  bool $project project (optional)
     * @param  bool $request request (optional)
     * @param  bool $purchaseDeliveryNote purchaseDeliveryNote (optional)
     * @param  bool $purchaseInvoice purchaseInvoice (optional)
     * @param  bool $mobileWarehouse mobileWarehouse (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\TipDto[]
     */
    public function apiV1CommonTipsGet($id = null, $type = null, $masterId = null, $position = null, $displayed = null, $printing = null, $onlyInRadix = null, $offer = null, $order = null, $packinglist = null, $billing = null, $accounting = null, $purchaseOrder = null, $purchasing = null, $warehouse = null, $production = null, $workOrder = null, $tourPlanning = null, $servicemanagement = null, $info = null, $web = null, $salesDeliveryNote = null, $salesInvoice = null, $cashDocuments = null, $project = null, $request = null, $purchaseDeliveryNote = null, $purchaseInvoice = null, $mobileWarehouse = null, string $contentType = self::contentTypes['apiV1CommonTipsGet'][0])
    {
        list($response) = $this->apiV1CommonTipsGetWithHttpInfo($id, $type, $masterId, $position, $displayed, $printing, $onlyInRadix, $offer, $order, $packinglist, $billing, $accounting, $purchaseOrder, $purchasing, $warehouse, $production, $workOrder, $tourPlanning, $servicemanagement, $info, $web, $salesDeliveryNote, $salesInvoice, $cashDocuments, $project, $request, $purchaseDeliveryNote, $purchaseInvoice, $mobileWarehouse, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CommonTipsGetWithHttpInfo
     *
     * Returns the tips
     *
     * @param  string $id (optional)
     * @param  TipType $type (optional)
     * @param  string $masterId (optional)
     * @param  int $position (optional)
     * @param  bool $displayed (optional)
     * @param  bool $printing (optional)
     * @param  bool $onlyInRadix (optional)
     * @param  bool $offer (optional)
     * @param  bool $order (optional)
     * @param  bool $packinglist (optional)
     * @param  bool $billing (optional)
     * @param  bool $accounting (optional)
     * @param  bool $purchaseOrder (optional)
     * @param  bool $purchasing (optional)
     * @param  bool $warehouse (optional)
     * @param  bool $production (optional)
     * @param  bool $workOrder (optional)
     * @param  bool $tourPlanning (optional)
     * @param  bool $servicemanagement (optional)
     * @param  bool $info (optional)
     * @param  bool $web (optional)
     * @param  bool $salesDeliveryNote (optional)
     * @param  bool $salesInvoice (optional)
     * @param  bool $cashDocuments (optional)
     * @param  bool $project (optional)
     * @param  bool $request (optional)
     * @param  bool $purchaseDeliveryNote (optional)
     * @param  bool $purchaseInvoice (optional)
     * @param  bool $mobileWarehouse (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\TipDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CommonTipsGetWithHttpInfo($id = null, $type = null, $masterId = null, $position = null, $displayed = null, $printing = null, $onlyInRadix = null, $offer = null, $order = null, $packinglist = null, $billing = null, $accounting = null, $purchaseOrder = null, $purchasing = null, $warehouse = null, $production = null, $workOrder = null, $tourPlanning = null, $servicemanagement = null, $info = null, $web = null, $salesDeliveryNote = null, $salesInvoice = null, $cashDocuments = null, $project = null, $request = null, $purchaseDeliveryNote = null, $purchaseInvoice = null, $mobileWarehouse = null, string $contentType = self::contentTypes['apiV1CommonTipsGet'][0])
    {
        $request = $this->apiV1CommonTipsGetRequest($id, $type, $masterId, $position, $displayed, $printing, $onlyInRadix, $offer, $order, $packinglist, $billing, $accounting, $purchaseOrder, $purchasing, $warehouse, $production, $workOrder, $tourPlanning, $servicemanagement, $info, $web, $salesDeliveryNote, $salesInvoice, $cashDocuments, $project, $request, $purchaseDeliveryNote, $purchaseInvoice, $mobileWarehouse, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\TipDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\TipDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\TipDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\TipDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\TipDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CommonTipsGetAsync
     *
     * Returns the tips
     *
     * @param  string $id (optional)
     * @param  TipType $type (optional)
     * @param  string $masterId (optional)
     * @param  int $position (optional)
     * @param  bool $displayed (optional)
     * @param  bool $printing (optional)
     * @param  bool $onlyInRadix (optional)
     * @param  bool $offer (optional)
     * @param  bool $order (optional)
     * @param  bool $packinglist (optional)
     * @param  bool $billing (optional)
     * @param  bool $accounting (optional)
     * @param  bool $purchaseOrder (optional)
     * @param  bool $purchasing (optional)
     * @param  bool $warehouse (optional)
     * @param  bool $production (optional)
     * @param  bool $workOrder (optional)
     * @param  bool $tourPlanning (optional)
     * @param  bool $servicemanagement (optional)
     * @param  bool $info (optional)
     * @param  bool $web (optional)
     * @param  bool $salesDeliveryNote (optional)
     * @param  bool $salesInvoice (optional)
     * @param  bool $cashDocuments (optional)
     * @param  bool $project (optional)
     * @param  bool $request (optional)
     * @param  bool $purchaseDeliveryNote (optional)
     * @param  bool $purchaseInvoice (optional)
     * @param  bool $mobileWarehouse (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonTipsGetAsync($id = null, $type = null, $masterId = null, $position = null, $displayed = null, $printing = null, $onlyInRadix = null, $offer = null, $order = null, $packinglist = null, $billing = null, $accounting = null, $purchaseOrder = null, $purchasing = null, $warehouse = null, $production = null, $workOrder = null, $tourPlanning = null, $servicemanagement = null, $info = null, $web = null, $salesDeliveryNote = null, $salesInvoice = null, $cashDocuments = null, $project = null, $request = null, $purchaseDeliveryNote = null, $purchaseInvoice = null, $mobileWarehouse = null, string $contentType = self::contentTypes['apiV1CommonTipsGet'][0])
    {
        return $this->apiV1CommonTipsGetAsyncWithHttpInfo($id, $type, $masterId, $position, $displayed, $printing, $onlyInRadix, $offer, $order, $packinglist, $billing, $accounting, $purchaseOrder, $purchasing, $warehouse, $production, $workOrder, $tourPlanning, $servicemanagement, $info, $web, $salesDeliveryNote, $salesInvoice, $cashDocuments, $project, $request, $purchaseDeliveryNote, $purchaseInvoice, $mobileWarehouse, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CommonTipsGetAsyncWithHttpInfo
     *
     * Returns the tips
     *
     * @param  string $id (optional)
     * @param  TipType $type (optional)
     * @param  string $masterId (optional)
     * @param  int $position (optional)
     * @param  bool $displayed (optional)
     * @param  bool $printing (optional)
     * @param  bool $onlyInRadix (optional)
     * @param  bool $offer (optional)
     * @param  bool $order (optional)
     * @param  bool $packinglist (optional)
     * @param  bool $billing (optional)
     * @param  bool $accounting (optional)
     * @param  bool $purchaseOrder (optional)
     * @param  bool $purchasing (optional)
     * @param  bool $warehouse (optional)
     * @param  bool $production (optional)
     * @param  bool $workOrder (optional)
     * @param  bool $tourPlanning (optional)
     * @param  bool $servicemanagement (optional)
     * @param  bool $info (optional)
     * @param  bool $web (optional)
     * @param  bool $salesDeliveryNote (optional)
     * @param  bool $salesInvoice (optional)
     * @param  bool $cashDocuments (optional)
     * @param  bool $project (optional)
     * @param  bool $request (optional)
     * @param  bool $purchaseDeliveryNote (optional)
     * @param  bool $purchaseInvoice (optional)
     * @param  bool $mobileWarehouse (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CommonTipsGetAsyncWithHttpInfo($id = null, $type = null, $masterId = null, $position = null, $displayed = null, $printing = null, $onlyInRadix = null, $offer = null, $order = null, $packinglist = null, $billing = null, $accounting = null, $purchaseOrder = null, $purchasing = null, $warehouse = null, $production = null, $workOrder = null, $tourPlanning = null, $servicemanagement = null, $info = null, $web = null, $salesDeliveryNote = null, $salesInvoice = null, $cashDocuments = null, $project = null, $request = null, $purchaseDeliveryNote = null, $purchaseInvoice = null, $mobileWarehouse = null, string $contentType = self::contentTypes['apiV1CommonTipsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\TipDto[]';
        $request = $this->apiV1CommonTipsGetRequest($id, $type, $masterId, $position, $displayed, $printing, $onlyInRadix, $offer, $order, $packinglist, $billing, $accounting, $purchaseOrder, $purchasing, $warehouse, $production, $workOrder, $tourPlanning, $servicemanagement, $info, $web, $salesDeliveryNote, $salesInvoice, $cashDocuments, $project, $request, $purchaseDeliveryNote, $purchaseInvoice, $mobileWarehouse, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CommonTipsGet'
     *
     * @param  string $id (optional)
     * @param  TipType $type (optional)
     * @param  string $masterId (optional)
     * @param  int $position (optional)
     * @param  bool $displayed (optional)
     * @param  bool $printing (optional)
     * @param  bool $onlyInRadix (optional)
     * @param  bool $offer (optional)
     * @param  bool $order (optional)
     * @param  bool $packinglist (optional)
     * @param  bool $billing (optional)
     * @param  bool $accounting (optional)
     * @param  bool $purchaseOrder (optional)
     * @param  bool $purchasing (optional)
     * @param  bool $warehouse (optional)
     * @param  bool $production (optional)
     * @param  bool $workOrder (optional)
     * @param  bool $tourPlanning (optional)
     * @param  bool $servicemanagement (optional)
     * @param  bool $info (optional)
     * @param  bool $web (optional)
     * @param  bool $salesDeliveryNote (optional)
     * @param  bool $salesInvoice (optional)
     * @param  bool $cashDocuments (optional)
     * @param  bool $project (optional)
     * @param  bool $request (optional)
     * @param  bool $purchaseDeliveryNote (optional)
     * @param  bool $purchaseInvoice (optional)
     * @param  bool $mobileWarehouse (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CommonTipsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CommonTipsGetRequest($id = null, $type = null, $masterId = null, $position = null, $displayed = null, $printing = null, $onlyInRadix = null, $offer = null, $order = null, $packinglist = null, $billing = null, $accounting = null, $purchaseOrder = null, $purchasing = null, $warehouse = null, $production = null, $workOrder = null, $tourPlanning = null, $servicemanagement = null, $info = null, $web = null, $salesDeliveryNote = null, $salesInvoice = null, $cashDocuments = null, $project = null, $request = null, $purchaseDeliveryNote = null, $purchaseInvoice = null, $mobileWarehouse = null, string $contentType = self::contentTypes['apiV1CommonTipsGet'][0])
    {































        $resourcePath = '/api/v1/common/tips';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'Type', // param base name
            'TipType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $masterId,
            'MasterId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $position,
            'Position', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $displayed,
            'Displayed', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $printing,
            'Printing', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $onlyInRadix,
            'OnlyInRadix', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offer,
            'Offer', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'Order', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $packinglist,
            'Packinglist', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $billing,
            'Billing', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accounting,
            'Accounting', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $purchaseOrder,
            'PurchaseOrder', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $purchasing,
            'Purchasing', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $warehouse,
            'Warehouse', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $production,
            'Production', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workOrder,
            'WorkOrder', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tourPlanning,
            'TourPlanning', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $servicemanagement,
            'Servicemanagement', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $info,
            'Info', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $web,
            'Web', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $salesDeliveryNote,
            'SalesDeliveryNote', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $salesInvoice,
            'SalesInvoice', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cashDocuments,
            'CashDocuments', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $project,
            'Project', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request,
            'Request', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $purchaseDeliveryNote,
            'PurchaseDeliveryNote', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $purchaseInvoice,
            'PurchaseInvoice', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mobileWarehouse,
            'MobileWarehouse', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
