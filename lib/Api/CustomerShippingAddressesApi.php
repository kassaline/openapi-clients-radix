<?php
/**
 * CustomerShippingAddressesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * IM.Core.Api.Radix
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.39.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Radix\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Radix\ApiException;
use OpenAPI\Client\Radix\Configuration;
use OpenAPI\Client\Radix\HeaderSelector;
use OpenAPI\Client\Radix\ObjectSerializer;

/**
 * CustomerShippingAddressesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Radix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerShippingAddressesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV1CustomerShippingAddressesCountGet' => [
            'application/json',
        ],
        'apiV1CustomerShippingAddressesDelete' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1CustomerShippingAddressesGet' => [
            'application/json',
        ],
        'apiV1CustomerShippingAddressesIdIdGet' => [
            'application/json',
        ],
        'apiV1CustomerShippingAddressesListGet' => [
            'application/json',
        ],
        'apiV1CustomerShippingAddressesPatch' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiV1CustomerShippingAddressesPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV1CustomerShippingAddressesCountGet
     *
     * Returns the count of customer-shippingaddresses
     *
     * @param  string $customerId customerId (optional)
     * @param  string $id id (optional)
     * @param  string[] $ids ids (optional)
     * @param  string $searchText searchText (optional)
     * @param  string $email email (optional)
     * @param  float $mapLat mapLat (optional)
     * @param  float $mapLong mapLong (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function apiV1CustomerShippingAddressesCountGet($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesCountGet'][0])
    {
        list($response) = $this->apiV1CustomerShippingAddressesCountGetWithHttpInfo($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CustomerShippingAddressesCountGetWithHttpInfo
     *
     * Returns the count of customer-shippingaddresses
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesCountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CustomerShippingAddressesCountGetWithHttpInfo($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesCountGet'][0])
    {
        $request = $this->apiV1CustomerShippingAddressesCountGetRequest($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CustomerShippingAddressesCountGetAsync
     *
     * Returns the count of customer-shippingaddresses
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesCountGetAsync($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesCountGet'][0])
    {
        return $this->apiV1CustomerShippingAddressesCountGetAsyncWithHttpInfo($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CustomerShippingAddressesCountGetAsyncWithHttpInfo
     *
     * Returns the count of customer-shippingaddresses
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesCountGetAsyncWithHttpInfo($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesCountGet'][0])
    {
        $returnType = 'int';
        $request = $this->apiV1CustomerShippingAddressesCountGetRequest($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CustomerShippingAddressesCountGet'
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CustomerShippingAddressesCountGetRequest($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesCountGet'][0])
    {











        $resourcePath = '/api/v1/customerShippingAddresses/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customerId,
            'CustomerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'Ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchText,
            'SearchText', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'Email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mapLat,
            'MapLat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mapLong,
            'MapLong', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'Skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'Take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CustomerShippingAddressesDelete
     *
     * Delete an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressDeleteCommand $customerShippingAddressDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiV1CustomerShippingAddressesDelete($customerShippingAddressDeleteCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesDelete'][0])
    {
        list($response) = $this->apiV1CustomerShippingAddressesDeleteWithHttpInfo($customerShippingAddressDeleteCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CustomerShippingAddressesDeleteWithHttpInfo
     *
     * Delete an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressDeleteCommand $customerShippingAddressDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CustomerShippingAddressesDeleteWithHttpInfo($customerShippingAddressDeleteCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesDelete'][0])
    {
        $request = $this->apiV1CustomerShippingAddressesDeleteRequest($customerShippingAddressDeleteCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CustomerShippingAddressesDeleteAsync
     *
     * Delete an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressDeleteCommand $customerShippingAddressDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesDeleteAsync($customerShippingAddressDeleteCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesDelete'][0])
    {
        return $this->apiV1CustomerShippingAddressesDeleteAsyncWithHttpInfo($customerShippingAddressDeleteCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CustomerShippingAddressesDeleteAsyncWithHttpInfo
     *
     * Delete an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressDeleteCommand $customerShippingAddressDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesDeleteAsyncWithHttpInfo($customerShippingAddressDeleteCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->apiV1CustomerShippingAddressesDeleteRequest($customerShippingAddressDeleteCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CustomerShippingAddressesDelete'
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressDeleteCommand $customerShippingAddressDeleteCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CustomerShippingAddressesDeleteRequest($customerShippingAddressDeleteCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesDelete'][0])
    {



        $resourcePath = '/api/v1/customerShippingAddresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($customerShippingAddressDeleteCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($customerShippingAddressDeleteCommand));
            } else {
                $httpBody = $customerShippingAddressDeleteCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CustomerShippingAddressesGet
     *
     * Returns a list of customer-shippingaddresses
     *
     * @param  string $customerId customerId (optional)
     * @param  string $id id (optional)
     * @param  string[] $ids ids (optional)
     * @param  string $searchText searchText (optional)
     * @param  string $email email (optional)
     * @param  float $mapLat mapLat (optional)
     * @param  float $mapLong mapLong (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\CustomerShippingAddressDto[]
     */
    public function apiV1CustomerShippingAddressesGet($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesGet'][0])
    {
        list($response) = $this->apiV1CustomerShippingAddressesGetWithHttpInfo($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CustomerShippingAddressesGetWithHttpInfo
     *
     * Returns a list of customer-shippingaddresses
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\CustomerShippingAddressDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CustomerShippingAddressesGetWithHttpInfo($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesGet'][0])
    {
        $request = $this->apiV1CustomerShippingAddressesGetRequest($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CustomerShippingAddressesGetAsync
     *
     * Returns a list of customer-shippingaddresses
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesGetAsync($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesGet'][0])
    {
        return $this->apiV1CustomerShippingAddressesGetAsyncWithHttpInfo($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CustomerShippingAddressesGetAsyncWithHttpInfo
     *
     * Returns a list of customer-shippingaddresses
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesGetAsyncWithHttpInfo($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto[]';
        $request = $this->apiV1CustomerShippingAddressesGetRequest($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CustomerShippingAddressesGet'
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CustomerShippingAddressesGetRequest($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesGet'][0])
    {











        $resourcePath = '/api/v1/customerShippingAddresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customerId,
            'CustomerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'Ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchText,
            'SearchText', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'Email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mapLat,
            'MapLat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mapLong,
            'MapLong', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'Skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'Take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CustomerShippingAddressesIdIdGet
     *
     * Returns the customer-shippingaddress with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\CustomerShippingAddressDto
     */
    public function apiV1CustomerShippingAddressesIdIdGet($id, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesIdIdGet'][0])
    {
        list($response) = $this->apiV1CustomerShippingAddressesIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CustomerShippingAddressesIdIdGetWithHttpInfo
     *
     * Returns the customer-shippingaddress with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesIdIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\CustomerShippingAddressDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CustomerShippingAddressesIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesIdIdGet'][0])
    {
        $request = $this->apiV1CustomerShippingAddressesIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CustomerShippingAddressesIdIdGetAsync
     *
     * Returns the customer-shippingaddress with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesIdIdGetAsync($id, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesIdIdGet'][0])
    {
        return $this->apiV1CustomerShippingAddressesIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CustomerShippingAddressesIdIdGetAsyncWithHttpInfo
     *
     * Returns the customer-shippingaddress with this ID
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesIdIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\CustomerShippingAddressDto';
        $request = $this->apiV1CustomerShippingAddressesIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CustomerShippingAddressesIdIdGet'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CustomerShippingAddressesIdIdGetRequest($id, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiV1CustomerShippingAddressesIdIdGet'
            );
        }


        $resourcePath = '/api/v1/customerShippingAddresses/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CustomerShippingAddressesListGet
     *
     * Returns a list of customer-shippingaddresses with minimal data
     *
     * @param  string $customerId customerId (optional)
     * @param  string $id id (optional)
     * @param  string[] $ids ids (optional)
     * @param  string $searchText searchText (optional)
     * @param  string $email email (optional)
     * @param  float $mapLat mapLat (optional)
     * @param  float $mapLong mapLong (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Radix\Model\IdCodeDescription[]
     */
    public function apiV1CustomerShippingAddressesListGet($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesListGet'][0])
    {
        list($response) = $this->apiV1CustomerShippingAddressesListGetWithHttpInfo($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CustomerShippingAddressesListGetWithHttpInfo
     *
     * Returns a list of customer-shippingaddresses with minimal data
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Radix\Model\IdCodeDescription[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CustomerShippingAddressesListGetWithHttpInfo($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesListGet'][0])
    {
        $request = $this->apiV1CustomerShippingAddressesListGetRequest($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Radix\Model\IdCodeDescription[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Radix\Model\IdCodeDescription[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Radix\Model\IdCodeDescription[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Radix\Model\IdCodeDescription[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Radix\Model\IdCodeDescription[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CustomerShippingAddressesListGetAsync
     *
     * Returns a list of customer-shippingaddresses with minimal data
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesListGetAsync($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesListGet'][0])
    {
        return $this->apiV1CustomerShippingAddressesListGetAsyncWithHttpInfo($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CustomerShippingAddressesListGetAsyncWithHttpInfo
     *
     * Returns a list of customer-shippingaddresses with minimal data
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesListGetAsyncWithHttpInfo($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesListGet'][0])
    {
        $returnType = '\OpenAPI\Client\Radix\Model\IdCodeDescription[]';
        $request = $this->apiV1CustomerShippingAddressesListGetRequest($customerId, $id, $ids, $searchText, $email, $mapLat, $mapLong, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CustomerShippingAddressesListGet'
     *
     * @param  string $customerId (optional)
     * @param  string $id (optional)
     * @param  string[] $ids (optional)
     * @param  string $searchText (optional)
     * @param  string $email (optional)
     * @param  float $mapLat (optional)
     * @param  float $mapLong (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CustomerShippingAddressesListGetRequest($customerId = null, $id = null, $ids = null, $searchText = null, $email = null, $mapLat = null, $mapLong = null, $skip = null, $take = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesListGet'][0])
    {











        $resourcePath = '/api/v1/customerShippingAddresses/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customerId,
            'CustomerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'Id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'Ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchText,
            'SearchText', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'Email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mapLat,
            'MapLat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mapLong,
            'MapLong', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'Skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'Take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CustomerShippingAddressesPatch
     *
     * Updating an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressPatchCommand $customerShippingAddressPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1CustomerShippingAddressesPatch($customerShippingAddressPatchCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesPatch'][0])
    {
        list($response) = $this->apiV1CustomerShippingAddressesPatchWithHttpInfo($customerShippingAddressPatchCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CustomerShippingAddressesPatchWithHttpInfo
     *
     * Updating an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressPatchCommand $customerShippingAddressPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CustomerShippingAddressesPatchWithHttpInfo($customerShippingAddressPatchCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesPatch'][0])
    {
        $request = $this->apiV1CustomerShippingAddressesPatchRequest($customerShippingAddressPatchCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CustomerShippingAddressesPatchAsync
     *
     * Updating an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressPatchCommand $customerShippingAddressPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesPatchAsync($customerShippingAddressPatchCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesPatch'][0])
    {
        return $this->apiV1CustomerShippingAddressesPatchAsyncWithHttpInfo($customerShippingAddressPatchCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CustomerShippingAddressesPatchAsyncWithHttpInfo
     *
     * Updating an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressPatchCommand $customerShippingAddressPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesPatchAsyncWithHttpInfo($customerShippingAddressPatchCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesPatch'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1CustomerShippingAddressesPatchRequest($customerShippingAddressPatchCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CustomerShippingAddressesPatch'
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressPatchCommand $customerShippingAddressPatchCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CustomerShippingAddressesPatchRequest($customerShippingAddressPatchCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesPatch'][0])
    {



        $resourcePath = '/api/v1/customerShippingAddresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($customerShippingAddressPatchCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($customerShippingAddressPatchCommand));
            } else {
                $httpBody = $customerShippingAddressPatchCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV1CustomerShippingAddressesPost
     *
     * Creating an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressPostCommand $customerShippingAddressPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiV1CustomerShippingAddressesPost($customerShippingAddressPostCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesPost'][0])
    {
        list($response) = $this->apiV1CustomerShippingAddressesPostWithHttpInfo($customerShippingAddressPostCommand, $contentType);
        return $response;
    }

    /**
     * Operation apiV1CustomerShippingAddressesPostWithHttpInfo
     *
     * Creating an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressPostCommand $customerShippingAddressPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Radix\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV1CustomerShippingAddressesPostWithHttpInfo($customerShippingAddressPostCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesPost'][0])
    {
        $request = $this->apiV1CustomerShippingAddressesPostRequest($customerShippingAddressPostCommand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiV1CustomerShippingAddressesPostAsync
     *
     * Creating an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressPostCommand $customerShippingAddressPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesPostAsync($customerShippingAddressPostCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesPost'][0])
    {
        return $this->apiV1CustomerShippingAddressesPostAsyncWithHttpInfo($customerShippingAddressPostCommand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV1CustomerShippingAddressesPostAsyncWithHttpInfo
     *
     * Creating an customer-shippingaddress
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressPostCommand $customerShippingAddressPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV1CustomerShippingAddressesPostAsyncWithHttpInfo($customerShippingAddressPostCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiV1CustomerShippingAddressesPostRequest($customerShippingAddressPostCommand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV1CustomerShippingAddressesPost'
     *
     * @param  \OpenAPI\Client\Radix\Model\CustomerShippingAddressPostCommand $customerShippingAddressPostCommand  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV1CustomerShippingAddressesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV1CustomerShippingAddressesPostRequest($customerShippingAddressPostCommand = null, string $contentType = self::contentTypes['apiV1CustomerShippingAddressesPost'][0])
    {



        $resourcePath = '/api/v1/customerShippingAddresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($customerShippingAddressPostCommand)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($customerShippingAddressPostCommand));
            } else {
                $httpBody = $customerShippingAddressPostCommand;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
